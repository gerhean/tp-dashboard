[
  {
    "path": ".github/pull_request_template.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "## Description"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Please include a summary of the change and which issue is fixed. Include details on which features have been implemented and are now available."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Fixes #"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "## Remarks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Add any additional remarks for others to take note of."
      }
    ],
    "authorContributionMap": {
      "tankangliang": 13
    }
  },
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F11-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F11-4/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "![Ui](docs/images/UI.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "- This is a **brownfield team project done under NUS\u0027s CS2103T: Software Engineering**.\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  - It has been built up from an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details. This provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  - It is **written in OOP fashion**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  - It has **user and developer documentation**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  - For detailed documentation, please refer to the **[TBM Website](https://ay2021s1-cs2103t-f11-4.github.io/tp/)**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 2,
      "raysonkoh": 1,
      "tankangliang": 6,
      "qwoprocks": 1,
      "-": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "allprojects {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    gradle.projectsEvaluated {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            options.compilerArgs \u003c\u003c \"-Xlint:unchecked\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "run {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0027java.awt.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0027glass.platform\u0027: \u0027monocle\u0027,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0027monocle.platform\u0027: \u0027headless\u0027,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0027prism.verbose\u0027: \u0027true\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    String testFxVersion \u003d \u00274.0.16-alpha\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    implementation \u0027com.jfoenix:jfoenix:9.0.10\u0027"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit5\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-11+26\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    archiveFileName \u003d \u0027TBM.jar\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027check\u0027"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 17,
      "tankangliang": 8,
      "qwoprocks": 29,
      "-": 70
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      \u003c!-- Checks that indentation for case blocks matches switch line. --\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      \u003c!-- Checks that indentation for wrapped lines is 8 spaces more than the parent line. --\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      \u003cproperty name\u003d\"lineWrappingIndentation\" value\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003c!-- Checks for missing Javadoc comments for public class, enum, interface, and annotation interface. --\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003cmodule name\u003d\"MissingJavadocType\"/\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003c!-- Checks if every overriden method has the @Override annotation. --\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003cmodule name\u003d\"MissingOverride\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 9,
      "-": 403
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "You can reach us at the email `university@rocketmail.com`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Tan Kang Liang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003cimg src\u003d\"images/tankangliang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](https://github.com/tankangliang)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "[[portfolio](team/tankangliang.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Role: In charge of deliverables and deadlines"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Updating of commands to support the editing and usage of Client class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add arguments tz/ and c/ and respective fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add tests for adding, updating, deleting clients"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "### Lim Ming Chong"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003cimg src\u003d\"images/qwoprocks.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](http://github.com/qwoprocks)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[[portfolio](team/qwoprocks.md)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Role: In charge of integration, repo maintenance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Creating the skeleton of the full project, and refactoring of relevant classes to support all Client functionality"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Drafting of new UML diagram for the projected changes to the application"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Lee En Hao"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cimg src\u003d\"images/leeenhao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](http://github.com/leeenhao)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[portfolio](team/leeenhao.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Role: In charge of documentation and scheduling"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Implementing the View command and relevant functionalities associated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Modification of GUI to fit the theme of TBM"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add tests for View command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Maintain a showcase of MVP funcationalities"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### raysonkoh"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003cimg src\u003d\"images/raysonkoh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](http://github.com/raysonkoh)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "[[portfolio](team/raysonkoh.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* Role: In charge of testing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Implementing the Country class and all associated functionality"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add command for adding country notes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add command for filtering by country"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add tests for filtering and adding country notes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### Ritesh Kumar"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cimg src\u003d\"images/rtshkmr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "[[github](http://github.com/rtshkmr)]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "[[portfolio](team/rtshkmr.md)]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Role: Team Lead, In charge of code quality"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Fill in implementation for Note class (flexible Note class)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add command for adding, deleting client notes"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add command for updating client notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  - Add tests for adding, deleting, updating client notes"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 35,
      "rtshkmr": 3,
      "raysonkoh": 3,
      "tankangliang": 4,
      "qwoprocks": 3,
      "-": 29
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Welcome! We are excited that you want to learn about **_TBM_**.\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "This page contains step-by-step instructions on how to get started in contributing or getting yourself involved in this awesome project! However, before you get too excited, allow us to introduce you to the core concepts that underpins the heart of **_TBM_**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Travelling BusinessMan Design Concepts"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Lightweight/Portable: **_TBM_** has a small footprint and runs fast on any platform."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Scalable: Software which does not deteriorate in performance with increasing data sizes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Extensible: A community driven software development process, which encourages innovative inputs and contributions from our users. Features are easily integrated into the application when needed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Privacy: We do not collect, store or misappropriate our client\u0027s data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. CLI Optimised: Built by users for users. Our features in the application cater to users highly accustomed to the CLI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "These concepts are the foundations of **_TBM_**, furthermore we believe in the value of having users being an active contributor to our project."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "With that being said, this guide will help orient you eager developers quickly, to things like,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Software design choices of **_TBM_**."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Architecture of **_TBM_**."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Implementations for the array of features **_TBM_** offers."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-F11-4/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-F11-4/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-F11-4/tp/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `client delete 1`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-F11-4/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ClientListPanel`, `WidgetViewBox`, `StatusBarFooter`, etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-F11-4/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-F11-4/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-F11-4/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. `Logic` uses the `MainParser` class to parse the user command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a client)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "![Interactions Inside the Logic Component for the `client delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-F11-4/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cClient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* contains a `UniqueTagSet` to prevent duplication of `Tag` objects."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "#### Inner Workings of TBM"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c!--- TODO: Add a full explanation of the interaction between Note, Tag and Country, with class and sequence diagrams? --\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "![Design of the Client, Note, Tag and Country Components](images/InnerWorkings.png)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "The above Model diagram provides a high level view of how **_TBM_** functions. However, is does not fully represent the class design between Note, Country and Tag."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "This sub-section gives a better explanation of the mappings for Note, Tag and Country."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-F11-4/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### Associating Notes and Tags"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "The proposed association mechanism between `Tag` and `Note` objects is facilitated by `TagNoteMap`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "It is stored internally within the `TbmManager` object. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `TagNoteMap#getTagsForNote()` — Returns an unmodifiable set of Tags associated to a particular Note."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `TagNoteMap#updateTagsForNote()` — Returns an unmodifiable set of Notes associated to a particular Tag ."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* `TagNoteMap#initTagNoteMapFromNotes()` —  Initialises the TagNoteMap from a set of Notes."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "The `TagNoteMap#initTagNoteMapFromNotes()` is exposed in the `Model` interface as `Model#initialiseTagNoteMap()`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Given below is an example usage scenario and how mapping mechanism behaves at each step."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Associating Notes and Countries"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "The association between `Note` and `Country` is facilitated by `CountryNotesManager`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Internally, `CountryNotesManager` stores a list of country notes using an instance of `javafx.collections.ObservableList\u003cCountryNote\u003e`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "By storing the list of country notes as an `ObservableList`, the UI would be able to track and immediately reflect any changes to the country notes list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `CountryNotesManager#asUnmodifiableObservableList()` — Returns an unmodifiable `ObservableList\u003cCountryNote\u003e`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `CountryNotesManager#hasCountryNote(CountryNote countryNote)`  — Returns true if the given `countryNote` already exists in the internal `ObservableList\u003cCountryNote\u003e`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `CountryNotesManager#addCountryNote(CountryNote countryNote)`  — Adds the given `countryNote` to the internal `ObservableList\u003cCountryNote\u003e`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* `CountryNotesManager#deleteCountryNote(CountryNote countryNote)`  — Deletes the given `countryNote` from the internal `ObservableList\u003cCountryNote\u003e`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "The following class diagram illustrates how the relevant classes in the `seedu.address.model` package are related to `CountryNote`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "![Country Class Diagram](images/CountryClass.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Given below is a sequence diagram that shows how the `country note add` command works."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "For brevity, the full command `country note add c/COUNTRY_CODE nt/NOTE_STRING` will be substituted by `country note add`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Note that the `AddressBookParser#parseCommand(userInput)` calls `CountryNoteAddCommandParser#parse(userInput)` which in turn parses the user input into a `CountryNote` object, and returns an instance of a `CountryNoteAddCommand` with the `CountryNote` instance passed in as an argument to the constructor of `CountryNoteAddCommand`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Hence, `CountryNoteAddCommand` stores a `CountryNote` object. For brevity, the aforementioned sequence of method calls will be excluded from the following sequence diagram."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "![Country Note Add Sequence Diagram](images/CountryNoteAddSeqDiag.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Suggesting contacts"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "The suggestion mechanism is facilitated by `filteredClients` in `ModelManager`. It is an instance of `javafx.collections.transformation.FilteredList\u003cClient\u003e`. It implements the following relevant operations:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* `FilteredList\u003cClient\u003e#setPredicate(Predicate\u003c? super Client\u003e p)` — Filters out any clients that do not match the predicate in the list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* `FilteredList\u003cClient\u003e#sort(Comparator\u003c? super Client\u003e p)` — Sorts the list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#updateFilteredClientList()` and `Model#sortFilteredClientList()` respectively."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "The following activity diagram summarizes what happens when a user inputs a `suggest` command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "![Suggest Activity Diagram](images/SuggestActivityDiagram.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given below is an example usage scenario and how the suggestion mechanism behaves at each step."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 1: The user executes `suggest by/contract` to list the suggested clients sorted by contract expiry dates. At this point, `filteredClients` is showing all clients."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "![SuggestState0](images/SuggestState0.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 2: The `suggest` command calls `Model#updateFilteredClientList` with the contract expiry date predicate (which checks if a client has a contract expiry date). `Model` updates the `filteredClients` object with the contract expiry date predicate which filters out all clients without an existing contract expiry date."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "![SuggestState1](images/SuggestState1.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 3: The `suggest` command calls `Model#sortFilteredClientList` with the contract expiry date comparator (which sorts clients by earliest contract expiry date). `Model` updates the `filteredClients` object with the contract expiry date comparator which gives us clients in order of increasing contract expiry date."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "![SuggestState2](images/SuggestState2.png)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 4: The change is then propagated to `Ui`, which updates the displayed clients in `ClientListPanel`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 5: The user decides to execute the command `list`, which resets the `filteredClients` objects to have all clients, and in turn resets the displayed clients in `ClientListPanel` as well."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "The following sequence diagram shows how the suggest operation works:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "![Suggest Sequence Diagram](images/SuggestSequenceDiagram.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedTbmManager`. It extends `TbmManager` with an undo/redo history, stored internally as an `tbmManagerStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `VersionedTbmManager#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `VersionedTbmManager#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `VersionedTbmManager#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTbmManager()`, `Model#undoTbmManager()` and `Model#redoTbmManager()` respectively."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTbmManager` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th client in the address book. The `delete` command calls `Model#commitTbmManager()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `tbmManagerStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new client. The `add` command also calls `Model#commitTbmManager()`, causing another modified address book state to be saved into the `tbmManagerStateList`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitTbmManager()`, so the address book state will not be saved into the `tbmManagerStateList`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 4. The user now decides that adding the client was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTbmManager()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial TbmManager state, then there are no previous TbmManager states to restore. The `undo` command uses `Model#canUndoTbmManager()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoTbmManager()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `tbmManagerStateList.size() - 1`, pointing to the latest address book state, then there are no undone TbmManager states to restore. The `redo` command uses `Model#canRedoTbmManager()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitTbmManager()`, `Model#undoTbmManager()` or `Model#redoTbmManager()`. Thus, the `tbmManagerStateList` remains unchanged."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitTbmManager()`. Since the `currentStatePointer` is not pointing at the end of the `tbmManagerStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "##### Aspect: How undo/redo executes"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the client being deleted)."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### \\[Proposed\\] Command History"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "A command history will greatly optimise the user\u0027s productivity by removing the need to repetitively type out similar commands."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Furthermore, it allows backwards viewing of previous commands given, which is similar to the CLI experience."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**Target user profile**: Businesspeople who travel a lot"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* has a need to manage a significant number of clients that span multiple timezones"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**Value proposition**: Manages notes, client contact details and preferences across multiple countries and timezones"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| -------- | --------------------------------- | ---------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | potential user                    | see the App populated with sample data   | easily see how the App will look like when it is in use                |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user ready to start using the App | purge all current data                   | get rid of sample/experimental data I used to explore the app          |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                          | see usage instructions                   | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add contact details of business contacts |                                                                        |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add personal preferences of existing business contacts | keep track of them                                       |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add meeting notes after meeting with existing business contacts | keep track of my meetings                       |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "| `* * *`  | user                              | add information on business deals and contract expiration dates | let **_TBM_** keep track of them                      |"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | filter business contacts by country      |                                                                        |"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | add cultural or relevant notes regarding a specific country | refer to these notes in the future                  |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | view my previously added information regarding a country |                                                        |"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | see and search for all my clients        | easily find and view information on my clients without having to go through the entire list |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "| `* * *`  | user                              | edit my clients\u0027 information           |                                                                        |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | save the information I enter             |                                                                        |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | transfer my data across different computers |                                                                     |"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | manage the priority of business aspects regarding my clients (e.g. expiring contracts) |                          |"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | receive suggestions on which clients to catch up on if I have not done so for quite long | maintain my relationship with my clients |"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | view who is likely to be free in other timezones currently | contact them and catch up with them                  |"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | delete a client                          | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* * *`  | user                              | note down and be reminded when my clients have their noteworthy moments (dates) | congratulate them in a timely manner |"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | long-time user                    | archive/hide unused data                 | not be distracted by irrelevant data                                   |"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | manage my flight bookings across countries |                                                                      |"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | manage my hotel bookings in a particular country |                                                                |"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | visualize my flight and hotel bookings on a timeline |                                                            |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | filter business contacts by country and state |                                                                   |"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `* *`    | user                              | undo and redo                                 | correct my mistakes easily                                        |"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `*`      | user                              | hide private contact details             | minimize chance of someone else seeing them by accident                |"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `*`      | user                              | find clients nearest to my current location   | find someone near me to meet                                      |"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `*`      | user                              | customize the GUI   | make it more intuitive to use or more visually appealing                                    |"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "| `*`      | proficient CLI user               | type out my emails straight from the application without moving to the browser | have a faster workflow           |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "(For all use cases below, the **System** is the `TBM` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC1 - Adding a Client**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1.  User meets secures a new business deal/client"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "2.  User attempts to add the all associated parties and their information into **_TBM_**."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "3.  User successfully adds the all new information into **_TBM_**."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* 2a. A party has a prior entry in **_TBM_**, which shows that User has a previous professional encounter with the party."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * 2a1. User does not add the new party as it will duplicate entries in the **_TBM_**."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * 2a2. User can choose to update/edit the client information instead."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC2 - Finding Clients**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1.  User requests to find a client."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "2.  **_TBM_** shows a list of clients that match user\u0027s query."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* 1a. The list of clients is empty."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC3 - Saving data**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "1.  User enters a valid command that alters data (E.g. \u003cu\u003e`adding a client (UC1)`\u003c/u\u003e)."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "2.  Modified data gets stored in the existing data file."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "3.  **_TBM_** shows a message indicating command has been executed successfully."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* 2a. An error occurred while saving the modified data to the existing data file."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * 2a1. **_TBM_** reloads the data from the existing data file."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * 2a2. **_TBM_** shows an error message."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**UC4 - Filtering by country**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. User inputs a country as filter."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "2. **_TBM_** shows all clients belonging to that country."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* 1a. Invalid country is given."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * 1a1. **_TBM_** shows an error message."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "**UC5 - Clearing all entries from **_TBM_****"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1.  User requests to clear all entries."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "2.  **_TBM_** asks the user to confirm."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "3.  User confirms that they want to clear all entries."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "4.  **_TBM_** clears all entries."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* 1a. There are no entries."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* 3a. User decides not to clear all entries."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1.  **_TBM_** should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "2.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "4.  **_TBM_** should be able to recover its previous stable state from the data file if it crashes."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "3.  The data file should be stored locally in a human-editable text file."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "4.  **_TBM_** should be used by a single user."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "5.  **_TBM_** should be able to hold up to 1000 business contacts without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "6.  **_TBM_** should be able to hold up to 5000 total client notes without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "7.  **_TBM_** can handle at most 10000 business contacts and at most 50000 total client notes."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "8.  **_TBM_** will only accept countries that are specified by the [ISO3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) specification."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "9.  **_TBM_** will only accept [GMT](https://en.wikipedia.org/wiki/Greenwich_Mean_Time) timezones."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "10. **_TBM_** is not required to validate that the timezone of a business contact correctly matches his/her country."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "11. **_TBM_** should retain all functionalities even when it is not connected to the internet."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "12. The size of the **_TBM_** _JAR_ file should not exceed 100Mb."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Business Contact**: Synonymous with **Client**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Client**: Refers to a person whom the user is conducting his/her business with"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **GMT**: [Greenwich Mean Time](https://en.wikipedia.org/wiki/Greenwich_Mean_Time)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **_TBM_**: Initialism for Travelling BusinessMan"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Given below are instructions to test the app manually. Additionally, testers can look through our [Testing Guide](Testing.md) to get started on automated testing."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "### Deleting a client"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "1. Deleting a client while all clients are being shown"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "   1. Prerequisites: List all clients using the `list` command. Multiple clients in the list."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "   1. Test case: `client delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "   1. Test case: `client delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      Expected: No client is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "   1. Other incorrect delete commands to try: `client delete`, `client delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 79,
      "rtshkmr": 31,
      "raysonkoh": 41,
      "tankangliang": 56,
      "qwoprocks": 76,
      "-": 288
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ":bulb: Running test using method 3 is more reliable, and it does not choke up your computer graphical interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner** (Not recommended)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Method 3: Using Gradle (headless)**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  * Open a console and run command `gradlew clean headless test` (Mac/Linux: `./gradlew clean headless test`)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. ##### GUI Tests"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    These are tests which simulates user interaction with the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    a. *Unit tests* that test the individual GUI components. These are in the `seedu.address.ui` package."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. ##### Non-GUI Tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    These are tests not involving the GUI of TBM. They include,\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    a. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "      e.g  `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    b. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    c. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      e.g. `seedu.address.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 20,
      "qwoprocks": 2,
      "-": 30
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c!-- NTS: end every sentence with a period --\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cdiv\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cimg src\u003d\"images/TBM_BRAND.png\" width\u003d\"160px\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003ch3\u003e\u003ci\u003eWelcome to the Travelling BusinessMan User Guide!\u003c/i\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cp\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003cstrong\u003e\u003ci\u003eTravelling BusinessMan\u003c/i\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e, is a specialised contact management system targeted at business people with many international clients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e sorts and organises your clients for you, streamlines your workflow, improves business efficiency and so much more. All this is at the convenience of the Command-Line Interface. \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e does more than just tracking your clients!\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        This user guide will be a starting point for you in getting oriented with how \u003cstrong\u003e\u003ci\u003eTBM\u003c/i\u003e\u003c/strong\u003e works and how you can integrate it into your professional journey!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " ![Client Notes](images/command-screenshots/client_view.png) "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " ![Country Notes](images/command-screenshots/country_note_view.png)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## Quickstart"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**:information_source:** Please refer to the [Introduction to UI](#appendix-a---introduction-to-the-ui) if you\u0027re trying TBM out for the first time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Before you start using **_TBM_**, "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Ensure you have Java 11."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "1. Download the application file (.jar file) from [here](https://github.com/AY2021S1-CS2103T-F11-4/tp/releases)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Navigate to the directory that the application file was downloaded to. To start the application:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    1. Double click on the `TBM.jar` file and the application will start shortly."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    1. Alternatively, open any shell terminal in the current directory and run the command `java -jar TBM.jar`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Now that you have started **_TBM_**,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Type any command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "1. ***(Recommended for new users)*** The [`help`](#help-window) command will show a help page of some commonly"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " used commands to fully utilise **_TBM_**."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "   * **_Either_** press the **F1** key on your keyboard, **_or_** type the [`help`](#help-window) command in the command box and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    press Enter to execute it. e.g. typing [`help`](#help-window) and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "The following section outlines the commands supported by **_TBM_**. A short description is given for each command along with the format that they should be executed with. Complex commands also come with examples to demonstrate the purpose that the command serve."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Certain commands require parameters and the summary of these parameters as well as their prefixes and constraints can be found in our [parameters summary table](#parameter-constraints-summary)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "A summary of all commands can be found in our [command summary table](#command-summary)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  e.g. in `client add n/NAME`, `NAME` is a parameter which can be used as `client add n/John Doe`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  e.g `n/NAME [ce/CONTRACT_EXPIRY_DATE]` can be used as `n/John Doe ce/2-3-2020`(both supplied) or as `n/John Doe`(optional parameter missing)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* Items in round brackets mean that you have to supply at least one of them.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  e.g. `INDEX (n/NAME) (n/PHONE_NUMBER)` can be used as `1 n/John Doe` or `1 p/98899889` or `1 n/John Doe p/98899889`, but not as `1` (i.e. both items are not supplied)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Viewing all saved clients: `list`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Shows a list of all clients in **_TBM_**."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Shows commonly used commands for **_TBM_** in a [new help window](#help-window). Pressing Esc will close this window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Adding a client: `client add`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Adds a new client to **_TBM_**."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Format: `client add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COUNTRY_CODE tz/TIMEZONE [ce/CONTRACT_EXPIRY_DATE]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client add n/Katya p/98123456 e/katya@yahoo.com a/Vladivostok, Nevelskogo, bld. 15, appt. 256 c/RU tz/GMT+3 ce/2-3-2020`\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  Adds a new client with name **Katya**, phone number **98123456**, email **katya@yahoo.com**, address **Vladivostok, Nevelskogo, bld. 15, appt. 256**, country **Russia**, timezone **GMT+3**, contract expiry date **2 Mar 2020**."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "### Viewing a client: `client view`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Views the client specified by the `INDEX` parameter."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**:information_source:** Please refer to [this](#ui-when-viewing-clients) if you need to be re-acquainted with the UI for client related commands"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Format: `client view INDEX`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given the current list of clients:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Katya"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Alex"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Command: `client view 2`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "The information for the client at index 2 of the list will be shown. In the example above, Alex\u0027s information will be displayed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### Finding clients: `client find`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Finds clients whose names contain any of the given keywords."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Format: `client find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Clients matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo` will return `Hans Gruber` and `Bo Yang`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client find katya`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "   Finds all clients with names that matches **katya**."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client find Katya Hans`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "   Finds all clients whose names contain either **Katya** or **Hans**."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Editing a client: `client edit`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Edits a client\u0027s information by their index in the list view. Only edits the fields that have been passed in as parameters."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Format: `client edit INDEX (n/NAME) (p/PHONE) (e/EMAIL) (a/ADDRESS) (c/COUNTRY_CODE) (tz/TIMEZONE) (ce/CONTRACT_EXPIRY)`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client edit 5 n/Katya`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Only edits **name** to `Katya`, other fields remain the same."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client edit 4 n/Alek p/34842097 e/dcsdcr@nus.edu.sg`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Edits **name** to `Alek`, **phone number** to `34842097` and **email** to `dcsdcr@nus.edu.sg`, other fields remain the same."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client edit 1 c/JP tz/GMT+7`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Edits **country** to `Japan` and **timezone** to `GMT+7`, other fields remain the same."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given the client below:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client 1"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Name: Alex"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Phone: 911"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Country: Singapore"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Timezone: GMT+8"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "...(other fields omitted)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Command: `client edit 1 c/JP tz/GMT+7`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Alex\u0027s **country** and **timezone** will be edited and the following will be the result."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client 1"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Name: Alex"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Phone: 911"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Country: Japan"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Timezone: GMT+7"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "...(other fields omitted)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Deleting a client: `client delete`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Deletes a client by their index in the list view."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `client delete INDEX`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client delete 5`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Deletes the client at index 5 of the list panel."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Your data is automatically saved after every change. The file is saved in the ubiquitous `.json` format, which"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "allows you to edit the file manually without even opening **TBM** up."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "The location for this file is `./data/tbmManager.json` (indicated at the bottom left of the application), where the"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " `.` represents the directory where you have saved `TBM.jar`. Here\u0027s a snippet of this editable text file:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "```json5"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "{"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  \"clients\" : [ {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"name\" : \"Alex Yeoh\","
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"phone\" : \"87438807\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"email\" : \"alexyeoh@example.com\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"address\" : \"Blk 30 Geylang Street 29, #06-40\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"country\" : \"SG\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"timezone\" : \"GMT+8\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"contractExpiryDate\" : \"21-4-2022\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"lastModifiedInstant\" : \"2020-01-01T00:00:00Z\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \"clientNotes\" : [ {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"contents\" : \"Wants to take his wife to Norway for New Years\u0027 Day\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"countryCode\" : \"NULL_CC\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"tags\" : [ \"romantic\", \"holidayPlans\", \"travel\" ]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  . . . "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**:information_source:** Tweaking this file should be done \u003cstrong\u003e\u003ci\u003eonly\u003c/i\u003e\u003c/strong\u003e if you\u0027re familiar with JSON"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ". If you\u0027re new to JSON, \u003ca href\u003d\"https://www.json.org/json-en.html\"\u003ehere\u0027s\u003c/a\u003e a good place to learn more."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Adding client notes: `client note add`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Format: `client note add CLIENT_INDEX nt/NOTE_STRING [t/TAG]...`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client note add 1 t/pref nt/wants meetings to be as short as possible (preferably 30 mins)`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Adds a **note** with a **tag** to the **first** client in the list."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client note add 2 nt/prefers emails to calls`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Adds a **note** to the **second** client in the list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `client note add 4 t/meeting nt/need to slowly convince him to sign the contract`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Adds a **note** with a **tag** to the **fourth** client in the list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Deleting client notes: `client note delete`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Deletes a note of a client (denoted by a client\u0027s index) by the note\u0027s index."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Format: `client note delete CLIENT_INDEX NOTE_INDEX`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given a list of notes:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client: 3"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Loves dogs [tag: pref]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Hates cats [tag: pref]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Command: `client note delete 3 2`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "The above command deletes the note regarding \"Hates cats\". The resulting information will look like:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client: 3"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Loves dogs [tag: pref]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Editing client notes: `client note edit`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Edits a note of a client (denoted by that client\u0027s index) by the note\u0027s index. Supplying tags to the command will add the tags onto the current existing tags for that note."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Format: `client note edit CLIENT_INDEX NOTE_INDEX nt/NOTE_STRING [t/TAG]...`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given a list of notes:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client: 3"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Loves dogs [tag: pref]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Hates cats [tag: pref]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "3. Apprehensive of resigning contract [tag: meeting]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Command: `client note edit 3 2 nt/Loves cats t/important`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "The original note containing \"Hates cats\" will be changed to \"Loves cats\" with an additional tag (on top of the existing one). The resulting list will look like:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client: 3"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Notes:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Loves dogs [tag: pref]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Loves cats [tag: pref, important]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "3. Apprehensive of resigning contract [tag: meeting]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Filtering clients by country: `country filter`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Filters the list of clients by a specified country."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `country filter c/COUNTRY_CODE`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country filter c/SG`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Filters by contacts in Singapore."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country filter c/RU`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Filters by contacts in Russia."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Viewing notes for a country: `country note view`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**:information_source:** Please refer to [this](#ui-when-viewing-country) if you need to be re-acquainted with the UI for country related commands"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Views the list of country notes from the country specified by the country code."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "If no country code is given, all country notes in **_TBM_** will be shown."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `country note view [c/COUNTRY_CODE]`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country note view`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    All country notes in **_TBM_** will be displayed."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country note view c/SG`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Only country notes for Singapore will be displayed."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country note view c/IN`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Only country notes for India will be displayed."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Adding notes for a country: `country note add`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Adds a note that is associated with a specific country."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `country note add c/COUNTRY_CODE nt/NOTE_STRING [t/TAG]...`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country note add c/SG nt/has one of the lowest corporate taxes in the world t/tax`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Adds a **note** with a **tag** for Singapore."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country note add c/CN nt/building good relations (guanxi) is important when conducting business here t/intercultural`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Adds a **note** with a **tag** for China."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country note add c/IN nt/is world\u0027s fastest growing economy`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Adds a **note** for India."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Editing notes for a country: `country note edit`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Edits a note that is associated with a specific country at the given index based on the current view of the list panel displaying country notes. Supplying tags to the command will add the tags onto the current existing tags for that note."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "The country note list panel can be viewed using the command `country note view`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `country note edit INDEX (nt/NOTE_STRING) (t/TAG)...`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given the list of country notes in the country note list panel:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "China"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Speaks Mandarin [tag: language]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Russia"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Speaks Russian [tag: language]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Singapore"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "3. Speaks English"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Command: `country note edit 3 nt/Speaks Singlish t/language`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Edits the third country note in the country notes panel. In this case, it will be the note under Singapore. The resulting list will look like:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "China"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. Speaks Mandarin [tag: language]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Russia"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "2. Speaks Russian [tag: language]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Singapore"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "3. Speaks Singlish [tag: language]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "### Deleting notes for a country: `country note delete`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Deletes a note that is associated with a specific country at the given index based on the current view of the list panel displaying country notes."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Format: `country note delete INDEX`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `country note delete 1`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Deletes the country note at index 1 of the country notes list panel."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "### Getting suggestions on clients: `suggest`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Obtains a list of clients based on the suggestion type(s) passed in."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Format: `suggest by/SUGGESTION_TYPE [by/SUGGESTION_TYPE]...`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `suggest by/available`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Obtains a list of clients where the time is 1800-2200 in the client\u0027s timezone (off work hours)."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* Command: `suggest by/frequency`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    Obtains a list of clients based on the last time their details were edited in **_TBM_**. Clients who have not been contacted for a longer period will be the first in the list."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `suggest by/contract`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Obtains a list of clients based on their current contract details. Clients whose contracts are expiring will be shown first."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* `suggest by/contract by/available`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Obtains a list of clients based on their current contract details but only clients who are available will be shown. Clients whose contracts are expiring will be shown first."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries: `clear`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Deletes all existing information from the application. The end result will be an application with no client/note/country data."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous **_TBM_** home folder.\u003cbr\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**List all clients** | `list`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Add client** | `client add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COUNTRY_CODE tz/TIMEZONE [ce/CONTRACT_EXPIRY_DATE]` \u003cbr\u003e e.g., `client add n/Katya p/98123456 e/katya@yahoo.com a/Vladivostok, Nevelskogo, bld. 15, appt. 256 c/RU tz/GMT+3 ce/22-12-2020`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**Edit client** | `client edit INDEX (n/NAME) (p/PHONE) (e/EMAIL) (a/ADDRESS) (c/COUNTRY_CODE) (tz/TIMEZONE) (ce/CONTRACT_EXPIRY_DATE)`\u003cbr\u003e e.g.,`client edit 3 c/JP tz/GMT+7`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**View client** | `client view INDEX` \u003cbr\u003e e.g., `client view 2`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Find client** | `client find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `client find Hans`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**Delete client** | `client delete INDEX`\u003cbr\u003e e.g., `client delete 3`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**Add client note** | `client note add CLIENT_INDEX nt/NOTE_STRING [t/TAG]...` \u003cbr\u003e e.g., `client note add 4 t/meeting nt/need to slowly convince him to sign the contract`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Delete client note** | `client note delete CLIENT_INDEX NOTE_INDEX` \u003cbr\u003e e.g., `client note delete 3 2`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Edit client note** | `client note edit CLIENT_INDEX NOTE_INDEX nt/NOTE_STRING [t/TAG]...` \u003cbr\u003e e.g., `client note edit 3 2 nt/Loves cats`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**Filter by country** | `country filter c/COUNTRY_CODE` \u003cbr\u003e e.g., `country filter c/SG`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**View country note** | `country note view [c/COUNTRY_CODE]` \u003cbr\u003e e.g., `country note view c/SG`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**Add country note** | `country note add c/COUNTRY_CODE nt/NOTE_STRING [t/TAG]...` \u003cbr\u003e e.g., `country note add c/SG nt/has one of the lowest coporate taxes in the world t/tax`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**Edit country note** | `country note edit INDEX (nt/NOTE_STRING) (t/TAG)...` \u003cbr\u003e e.g., `country note edit 1 nt/has one of the lowest coporate taxes in the world t/tax`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "**Delete country note** | `country note delete INDEX` \u003cbr\u003e e.g., `country note delete 1`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**Get suggestions** | `suggest by/SUGGESTION_TYPE [by/SUGGESTION_TYPE]...` \u003cbr\u003e e.g., `suggest by/available by/frequency`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "## Parameter constraints summary"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Parameter | Prefix | Constraints, Examples"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "--------|------------------| ----------"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**NAME** | `n/` | Names should only contain alphanumeric characters and spaces, and it should not be blank. \u003cbr\u003e e.g. `n/John Doe`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**PHONE_NUMBER** | `p/` | Phone numbers should only contain numbers, and it should be at least 3 digits long. \u003cbr\u003e e.g. `p/9123 4567`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**EMAIL** | `e/` | Emails should be of the format local-part@domain. \u003cbr\u003e e.g. `e/katya@yahoo.com`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**ADDRESS** |`a/` | Addresses can take any values, and it should not be blank. \u003cbr\u003e e.g. `Vladivostok, Nevelskogo, bld. 15, appt. 256`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**COUNTRY_CODE** | `c/` | A 2-letter country code that follows the ISO3166 specification. [List](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) of country codes. \u003cbr\u003e e.g. `c/SG` (Singapore)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**TIMEZONE** | `tz/` | Timezone should be given in offsets relative to [Greenwich Mean Time](https://en.wikipedia.org/wiki/Greenwich_Mean_Time). \u003cbr\u003e e.g. `tz/GMT+8`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**CONTRACT_EXPIRY_DATE** | `ce/` | Date should be given in the format \"DD-MM-YYYY\". \u003cbr\u003e e.g. `ce/10-10-2020`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**NOTE_STRING** | `nt/` | Notes can take any values, and it should not be blank. \u003cbr\u003e e.g. `nt/Likes cats`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**TAG** | `t/` | Tags names should be alphanumeric and have a maximum of 45 characters. \u003cbr\u003e e.g. `t/important`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**SUGGESTION_TYPE** | `by/` | Suggestion types can only be either `available`, `contract` or `frequency`. \u003cbr\u003e e.g. `by/available`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "**INDEX** | - | Index is a number greater than 0 that is based on the numberings beside each client or note. \u003cbr\u003e e.g. `1` would refer to the first client or note."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "## Appendix A - Introduction to the UI"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### Start Page"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "The diagram below shows the key UI elements of TBM upon first start-up."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "![Annotated UI Default Page](images/command-screenshots/UI_annotated.png)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Command Box** allows you to input commands to interact with TBM."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Client List Panel** will always allow you to view all your clients\u0027 information at a go. It\u0027s scrollable so that you "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "never have to worry about not being able to see all your important clients at a single glance!"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Client Card** will show you brief information about a particular client. "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Result Display** will show you the output of executing your command."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * It indicates successful commands."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * On the off-chance there\u0027s a syntax issue, TBM will remind you of the correct syntax it expects, something like this:"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     ![Result Display slowing error message](images/command-screenshots/result_display_error_syntax.png)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Generic Widget View Box** is aptly named because it shall render *Client Cards* or *Country Cards* when"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " relevant commands are sent. Initially it will show you your local time to the precise second, as well as your current location."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "   "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### UI when Viewing Clients"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "The diagram below is what you should see upon viewing a particular client (i.e. firing up the command `client view 1"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "`). It shows how to identify a particular client\u0027s `CLIENT_INDEX`, and an associated note\u0027s `CLIENT_NOTE_INDEX`."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "![Annotated Client View UI Layout](images/command-screenshots/client_view_annotated.png)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Here, the **Client Note Card** displaying the note that\u0027s tagged as `hobbies` is referred to by the `CLIENT_INDEX` of `1`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Being able to identify these is key to adding, deleting and editing client notes as well as editing clients."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### UI when Viewing Country"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Similarly, `COUNTRY_NOTE_INDEX` can be identified like so by referring to the index indicated on the **Country Note Card**:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "![Annotated Country View UI Layout](images/command-screenshots/country_note_view_annotated.png)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "### Help Window"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "This is what to expect when you type in the `help` command or press `F1`: "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "![help window](./images/command-screenshots/help_window.png)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "   \u003cstrong\u003e\u003ci\u003e{End of Appendix A, please return to the \u003ca href\u003d\"#table-of-contents\"\u003eTable of Contents\u003c/a\u003e } \u003c/i"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "   \u003e\u003c/strong\u003e "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 40,
      "rtshkmr": 123,
      "raysonkoh": 44,
      "tankangliang": 244,
      "qwoprocks": 17,
      "-": 125
    }
  },
  {
    "path": "docs/_sass/minima/custom-styles.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Placeholder to allow defining custom styles that override everything else."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// (Use `_sass/minima/custom-variables.scss` to override variable defaults)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "body {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  background-color: #fef4e8;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "h2, h3, h4, h5, h6 {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  color: #3a506b;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "div \u003e img, p \u003e img {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  margin: auto;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "img.emoji {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  display: inline !important;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "table {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  tr {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u0026:nth-child(odd) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      background-color: #fcfbf8;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u0026:nth-child(even) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      background-color: #faf9f6;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "a {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  color: #be0000;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "a:visited {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  color: #800000;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "// Bootstrap style alerts"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".alert {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  position: relative;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  padding: $alert-padding-y $alert-padding-x;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  margin-bottom: $alert-margin-bottom;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  border: $alert-border-width solid transparent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  order-radius : $alert-border-radius;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "// Headings for larger alerts"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".alert-heading {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  // Specified to prevent conflicts of changing $headings-color"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  color: inherit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "// Provide class for links that match alerts"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".alert-link {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  font-weight: $alert-link-font-weight;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "// Generate contextual modifier classes for colorizing the alert."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "@each $color, $value in $theme-colors {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  .alert-#{$color} {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @include alert-variant(color-level($value, $alert-bg-level), color-level($value, $alert-border-level), color-level($value, $alert-color-level));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 31,
      "-": 34
    }
  },
  {
    "path": "docs/_sass/minima/initialize.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@charset \"utf-8\";"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// Define defaults for each variable."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "$base-font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Segoe UI Symbol\", \"Segoe UI Emoji\", \"Apple Color Emoji\", Roboto, Helvetica, Arial, sans-serif !default;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "$code-font-family: \"Menlo\", \"Inconsolata\", \"Consolas\", \"Roboto Mono\", \"Ubuntu Mono\", \"Liberation Mono\", \"Courier New\", monospace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "$base-font-size:   16px !default;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "$base-font-weight: 400 !default;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "$small-font-size:  $base-font-size * 0.875 !default;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "$base-line-height: 1.5 !default;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "$spacing-unit:     30px !default;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "$table-text-align: left !default;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "// Width of the content area"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "$content-width:    1000px !default;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "$on-palm:          600px !default;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "$on-laptop:        1000px !default;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "$on-medium:        $on-palm !default;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "$on-large:         $on-laptop !default;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "// Use media queries like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "// @include media-query($on-palm) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "//   .wrapper {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "//     padding-right: $spacing-unit / 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "//     padding-left: $spacing-unit / 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "//   }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "// }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "// Notice the following mixin uses max-width, in a deprecated, desktop-first"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "// approach, whereas media queries used elsewhere now use min-width."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "@mixin media-query($device) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  @media screen and (max-width: $device) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@mixin relative-font-size($ratio) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  font-size: #{$ratio}rem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "// Import pre-styling-overrides hook and style-partials."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "@import"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/custom-variables\", // Hook to override predefined variables."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/custom-mixins\",    // Hook to add custom mixins."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/base\",             // Defines element resets."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/layout\",           // Defines structure and style based on CSS selectors."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/custom-styles\"     // Hook to override existing styles."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ";"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 49
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"client delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"client delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteClient(c)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveTbmManager(tbmManager)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "qwoprocks": 3,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager *-right-\u003e \"1\" UniqueClientList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "UniqueTagList -[hidden]down- UniqueClientList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "UniqueTagList -[hidden]down- UniqueClientList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "UniqueClientList o-right-\u003e Client"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 2,
      "qwoprocks": 8,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if () then ([command commits TbmManager])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    :Save TbmManager to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    TbmManagerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/CountryClass.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Class Country"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Class CountryNotesManager"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Class CountryCodeVerifier"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Class CountryNote"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "CountryNote -up-|\u003e Note"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "CountryNote -r-\u003e \"1\" Country"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "CountryNotesManager \"1\" -up-\u003e \"*\" CountryNote"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Country .up.\u003e CountryCodeVerifier"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "AddressBook -left-\u003e \"1\" CountryNotesManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 20
    }
  },
  {
    "path": "docs/diagrams/CountryNoteAddSeqDiag.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "participant \"c : CountryNoteAddCommand\" as CountryNoteAddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "participant \":AddressBook\" as AddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "participant \":CountryNotesManager\" as CountryNotesManager MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "[-\u003e LogicManager : execute(country note add)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(country note add)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "create CountryNoteAddCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "AddressBookParser -\u003e CountryNoteAddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "activate CountryNoteAddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "CountryNoteAddCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deactivate CountryNoteAddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "LogicManager -\u003e CountryNoteAddCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "activate CountryNoteAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "CountryNoteAddCommand -\u003e Model : addCountryNote(countryNote)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Model -\u003e AddressBook : addCountryNote(countryNote)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "activate AddressBook"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "AddressBook -\u003e CountryNotesManager : addCountryNote(countryNote)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "activate CountryNotesManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "CountryNotesManager --\u003e AddressBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deactivate CountryNotesManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "AddressBook --\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deactivate AddressBook"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Model --\u003e CountryNoteAddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "CountryNoteAddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deactivate CountryNoteAddCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "CountryNoteAddCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "destroy CountryNoteAddCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 59
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "participant \":MainParser\" as MainParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "participant \":ClientDeleteCommandParser\" as ClientDeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "participant \"d:ClientDeleteCommand\" as ClientDeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[-\u003e LogicManager : execute(\"client delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "LogicManager -\u003e MainParser : parseCommand(\"client delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "activate MainParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "create ClientDeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "MainParser -\u003e ClientDeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "activate ClientDeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "ClientDeleteCommandParser --\u003e MainParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "deactivate ClientDeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "MainParser -\u003e ClientDeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "activate ClientDeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "create ClientDeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientDeleteCommandParser -\u003e ClientDeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "activate ClientDeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientDeleteCommand --\u003e ClientDeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "deactivate ClientDeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "ClientDeleteCommandParser --\u003e MainParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "deactivate ClientDeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "ClientDeleteCommandParser -[hidden]-\u003e MainParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "destroy ClientDeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "MainParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "deactivate MainParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "LogicManager -\u003e ClientDeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "activate ClientDeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientDeleteCommand -\u003e Model : deleteClient(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Model --\u003e ClientDeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientDeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "CommandResult --\u003e ClientDeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientDeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "deactivate ClientDeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 10,
      "qwoprocks": 22,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/InnerWorkings.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Package Client {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Client"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class UniqueClientList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class ContractExpiryDate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Timezone"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Package Country {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Country"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class CountryManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Package Note {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class TagNoteMap"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class UniqueTagSet"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager *-right-\u003e \"1\" UniqueClientList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager *-right-\u003e \"1\" UniqueTagSet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager *-right-\u003e \"1\" CountryManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "UniqueClientList o--\u003e \"*\" Client"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client *--\u003e Name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client *--\u003e Phone"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client *--\u003e Email"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client *--\u003e Address"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client *--\u003e ContractExpiryDate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client *-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client -up-\u003e Country"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client --\u003e Timezone"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client --\u003e\"*\" Note"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "CountryManager o-left-\u003e\"*\" Country : has \u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "UniqueTagSet o-right-\u003e\"*\" Tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "TagNoteMap o-right-\u003e\"*\" Note"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "TagNoteMap o-up-\u003e Tag"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "CountryManager --\u003e \"*\" Note : creates mapping \u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Client -[hidden]right- TbmManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 54,
      "tankangliang": 4
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Class MainParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "LogicManager --\u003e\"1\" MainParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "MainParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Interface ReadOnlyTbmManager \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Class TbmManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Class ReadOnlyTbmManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Package Widget {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Interface WidgetModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class WidgetModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class WidgetObject"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "note \"The design of Country, Note and Tag is omitted\\nfrom this diagram to keep it simple. Refer to\\nthe bottom section.\" as N1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Package Client {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Class Client"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Class Timezone"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Class UniqueClientList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class ContractExpiryDate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Timezone"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Package Note {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class TagNoteMap"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Package Country {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Class Country"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class UniqueTagSet"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Package Note {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class TagNoteMap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Package Country {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class Country"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class CountryNotesManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class CountryCodeVerifier"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager .up.|\u003e ReadOnlyTbmManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "ModelManager o--\u003e \"1\" TbmManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "ModelManager *-right-\u003e\"1\" WidgetModel"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager *-right-\u003e\"1\" UniqueTagSet"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager *-right-\u003e \"1\" CountryNotesManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "TbmManager *--\u003e \"1\" UniqueClientList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "UniqueClientList o--\u003e \"*\" Client"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client *--\u003e Name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client *--\u003e Phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client *--\u003e Email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Client *--\u003e Address"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client *--\u003e ContractExpiryDate"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client *-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client -right-\u003e Country"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client --\u003e Timezone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Client --\u003e\"*\" Note"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "WidgetModelManager ..|\u003e WidgetModel"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "WidgetModelManager *-right-\u003e\"1\" WidgetObject"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "CountryNotesManager o-right-\u003e \"*\" Country"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "UniqueTagSet o-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "TagNoteMap o-right-\u003e \"*\" Note"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "UniqueTagSet -[hidden]right-\u003e Tag"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ModelManager --\u003e\"1\" Client : filtered list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 42,
      "tankangliang": 11,
      "qwoprocks": 9,
      "-": 45
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Interface TbmManagerStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Class JsonTbmManagerStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class JsonAdaptedNote"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "StorageManager o--\u003e TbmManagerStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "JsonTbmManagerStorage .left.|\u003e TbmManagerStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "JsonTbmManagerStorage .down.\u003e JsonSerializableTbmManagerStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "JsonSerializableTbmManagerStorage .right.\u003e JsonSerializableClient"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "JsonSerializableClient .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "tankangliang": 6,
      "qwoprocks": 1,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/SuggestActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":Start with empty list of predicates and comparators;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "while () is ([arguments present])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    :Parse argument into SuggestionType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    :Add related predicate into list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    :Add related comparator into list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "endwhile ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":Apply predicates to Model#updateClientFilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":Apply comparators to Model#sortClientFilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":Changes to FilteredList are propagated to user via UI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 19
    }
  },
  {
    "path": "docs/diagrams/SuggestSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "title After command \"suggest by/contract\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "participant \":SuggestCommand\" as SuggestCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "participant \"c:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[-\u003e SuggestCommand : execute(\"suggest by/contract\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "activate SuggestCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "SuggestCommand -\u003e Model : updateClientFilteredList(Predicate)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Model --\u003e SuggestCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "SuggestCommand -\u003e Model : sortClientFilteredList(Comparator)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Model --\u003e SuggestCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "SuggestCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "CommandResult --\u003e SuggestCommand : c"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[\u003c-- SuggestCommand : c"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "deactivate SuggestCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 39
    }
  },
  {
    "path": "docs/diagrams/SuggestState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "show members"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package filteredClients {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    object \"__:Client__\" as alice  {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        name \u003d \"alice\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        contract_expiry \u003d \"20-01-2024\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    object \"__:Client__\" as bob {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        name \u003d \"bob\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    object \"__:Client__\" as cindy {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        name \u003d \"cindy\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        contract_expiry \u003d \"20-12-2020\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "alice -[hidden]right-\u003e bob"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "bob -[hidden]right-\u003e cindy"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 30
    }
  },
  {
    "path": "docs/diagrams/SuggestState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "show members"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "title Predicate applied"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package filteredClients {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    object \"__:Client__\" as alice  {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        name \u003d \"alice\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        contract_expiry \u003d \"20-01-2024\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    object \"__:Client__\" as cindy {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        name \u003d \"cindy\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        contract_expiry \u003d \"20-12-2020\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "alice -[hidden]right-\u003e cindy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 25
    }
  },
  {
    "path": "docs/diagrams/SuggestState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "show members"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "title Predicate and Comparator applied"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package filteredClients {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    object \"__:Client__\" as alice  {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        name \u003d \"alice\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        contract_expiry \u003d \"20-01-2024\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    object \"__:Client__\" as cindy {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        name \u003d \"cindy\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        contract_expiry \u003d \"20-12-2020\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "cindy -[hidden]right-\u003e alice"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 25
    }
  },
  {
    "path": "docs/diagrams/TagNoteMapSequence.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "title Getting Tags for a Note"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 6
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Class ClientListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Class ClientCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Class WidgetViewBox"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "MainWindow *-down-\u003e WidgetViewBox"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "MainWindow *-down-\u003e ClientListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientListPanel -down-\u003e ClientCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientCard --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "WidgetViewBox -left-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "WidgetViewBox .right.\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "ClientCard .right.\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ClientListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 4,
      "qwoprocks": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State1 as \"__tm0:TbmManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State2 as \"__tm1:TbmManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State3 as \"__tm2:TbmManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State1 as \"__tm0:TbmManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State2 as \"__tm1:TbmManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State3 as \"__tm2:TbmManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State1 as \"__tm0:TbmManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State2 as \"__tm1:TbmManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State3 as \"__tm2:TbmManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State1 as \"__tm0:TbmManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State2 as \"__tm1:TbmManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State3 as \"__tm2:TbmManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State1 as \"__tm0:TbmManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State2 as \"__tm1:TbmManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State3 as \"__tm2:TbmManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State1 as \"__tm0:TbmManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State2 as \"__tm1:TbmManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    class State3 as \"__tm3:TbmManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "note right on link: State tm2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "participant \":MainParser\" as MainParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "participant \":VersionedTbmManager\" as VersionedTbmManager MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "LogicManager -\u003e MainParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "activate MainParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "MainParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "UndoCommand --\u003e MainParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "MainParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "deactivate MainParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "UndoCommand -\u003e Model : undoTbmManager()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Model -\u003e VersionedTbmManager : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "activate VersionedTbmManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "VersionedTbmManager -\u003e VersionedTbmManager :resetData(ReadOnlyTbmManager)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "VersionedTbmManager --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "deactivate VersionedTbmManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Participant \":MainParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "ecp -\u003e ec ++: index, editClientDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "qwoprocks": 1,
      "-": 19
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "title: Travelling BusinessMan"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F11-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F11-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "![Ui](./images/UI.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "**Travelling BusinessMan is a desktop application for managing your client contact details, organized with a focus on their country of residence.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* If you are interested in using Travelling BusinessMan, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quickstart)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* If you are interested about developing Travelling BusinessMan, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5), [JFoenix](https://github.com/jfoenixadmin/JFoenix), [TestFX](https://github.com/TestFX)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* Codebase referenced: [Address Book 4](https://github.com/se-edu/addressbook-level4)"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 5,
      "qwoprocks": 4,
      "-": 11
    }
  },
  {
    "path": "docs/team/leeenhao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "title: Lee En Hao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "## Project: Travelling BusinessMan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Travelling BusinessMan is a desktop application that manages notes and contacts across multiple"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "countries and timezones for businessmen who travels a lot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Ability to view specific client\u0027s information in detail."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dleeenhao\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003dLeeEnHao\u0026zR\u003dAY2021S1-CS2103T-F11-4%2Ftp%5Bmaster%5D\u0026zACS\u003d258.1984652947332\u0026zS\u003d2020-08-14\u0026zFS\u003d\u0026zU\u003d2020-10-14\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * New GUI features"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Capability to view each client information in detail"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * GUI theme and styling overhaul"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Improve GUI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Un-deprecate `list` command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added `client view` command section to user guide to document the changes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Add"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    * Add “Adding a client” and \"Viewing help\" to use cases"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Contributed to forum discussion (examples: [\\#157](https://github.com/nus-cs2103-AY2021S1/forum/issues/157), [\\#116](https://github.com/nus-cs2103-AY2021S1/forum/issues/116), [\\#93](https://github.com/nus-cs2103-AY2021S1/forum/issues/93), [\\#55](https://github.com/nus-cs2103-AY2021S1/forum/issues/55), [\\#85](https://github.com/nus-cs2103-AY2021S1/forum/issues/85#issuecomment-682309177))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 25,
      "rtshkmr": 12
    }
  },
  {
    "path": "docs/team/qwoprocks.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "title: Lim Ming Chong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "## Project: Travelling BusinessMan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Travelling BusinessMan is a desktop application that manages notes and contacts across multiple countries and timezones for businessmen who travels a lot. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 24 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **New Feature**: Added option to close help window using the Esc key"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dqwoprocks\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dqwoprocks\u0026tabRepo\u003dAY2021S1-CS2103T-F11-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Managed releases `v1.1` - `v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Created walking skeleton for `v1.2` (Pull request [\\#115](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/115))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Refactor all instances of `person` to `client` (Pull request [\\#116](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/116))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added documentation for the features `country note`, `clear`, and `exit` [\\#31](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/31)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added the list of user stories and labelled their priorities [\\#38](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/38)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added the use case for `clearing all entries` [\\#53](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/53)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#51](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/51), [\\#121](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/121), [\\#131](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/131), [\\#134](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/134), [\\#137](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/137), [\\#144](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/144), [\\#146](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/146)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Contributed to forum discussions (examples: [\\#36](https://github.com/nus-cs2103-AY2021S1/forum/issues/36), [\\#62](https://github.com/nus-cs2103-AY2021S1/forum/issues/62), [\\#71](https://github.com/nus-cs2103-AY2021S1/forum/issues/71), [\\#110](https://github.com/nus-cs2103-AY2021S1/forum/issues/110), [\\#126](https://github.com/nus-cs2103-AY2021S1/forum/issues/126), [\\#132](https://github.com/nus-cs2103-AY2021S1/forum/issues/132), [\\#145](https://github.com/nus-cs2103-AY2021S1/forum/issues/145), [\\#146](https://github.com/nus-cs2103-AY2021S1/forum/issues/146), [\\#169](https://github.com/nus-cs2103-AY2021S1/forum/issues/169), [\\#239](https://github.com/nus-cs2103-AY2021S1/forum/issues/239), [\\#295](https://github.com/nus-cs2103-AY2021S1/forum/issues/295), [\\#296](https://github.com/nus-cs2103-AY2021S1/forum/issues/296), [\\#316](https://github.com/nus-cs2103-AY2021S1/forum/issues/316))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Gave suggestions for other teams in the class (examples: [\\#309](https://github.com/nus-cs2103-AY2021S1/forum/issues/309))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Added a [GitHub action](https://github.com/cloudbees/plantuml-github-action) to automatically generates and commits images of UML diagrams when .puml files are changed"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 14,
      "qwoprocks": 22
    }
  },
  {
    "path": "docs/team/raysonkoh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "title: Rayson Koh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "## Project: Travelling BusinessMan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Travelling BusinessMan is a desktop application that manages notes and contacts across multiple"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "countries and timezones for businessmen who travels a lot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * `country filter` command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * `country note add` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003drayson\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByAuthors\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003draysonkoh\u0026zR\u003dAY2021S1-CS2103T-F11-4%2Ftp%5Bmaster%5D\u0026zACS\u003d168\u0026zS\u003d2020-08-14\u0026zFS\u003drayson\u0026zU\u003d2020-10-14\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByAuthors\u0026zFR\u003dfalse)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Brainstorm user stories for `v1.1`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Translate user stories to issues in Github issue tracker"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Create follow-up issues relating to Country Note and Country Filter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Add `Deleting clients`, `Saving Data` and `Adding Notes` sections"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Update `Country Filter` and `Country Note Add` example usage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Add Non-Functional Requirements (NFR) section"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Add \"Saving Data\" use case"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (examples: [\\#121](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/121), [\\#125](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/125), [\\#134](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/134))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Contributed to forum discussions (examples: [\\#125](https://github.com/nus-cs2103-AY2021S1/forum/issues/125), [\\#161](https://github.com/nus-cs2103-AY2021S1/forum/issues/161))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Gradle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Junit 5.0"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 17,
      "raysonkoh": 22
    }
  },
  {
    "path": "docs/team/rtshkmr.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "title: Ritesh Kumar\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "## Project: Travelling BusinessMan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Travelling BusinessMan is a desktop application that manages notes and contacts across multiple"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "countries and timezones for businessmen who travels a lot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * `Client Notes Command`: Notes associated to clients can be created."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed:** [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003drtshkmr\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Project management:**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PR reviews: #153 #149 #148 #131 #121"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PR approvals:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Managed project v1.1 to v1.2 on GitHub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      * Update ClientNoteAdd feature."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      * Update Help Instruction on command syntax."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 31
    }
  },
  {
    "path": "docs/team/tankangliang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "title: Tan Kang Liang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "## Project: Travelling BusinessMan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "Travelling BusinessMan is a desktop application that manages notes and contacts across multiple"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "countries and timezones for businessmen who travels a lot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * `Timezone` class that represents the timezone of a client"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Ability to add `Country` and `Timezone` to a client in `client add`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Ability to edit `Country` and `Timezone` of a client in `client edit`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dtankangliang\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zFR\u003dfalse\u0026zA\u003dtankangliang\u0026zR\u003dAY2021S1-CS2103T-F11-4%2Ftp%5Bmaster%5D\u0026zACS\u003d311.54761904761904\u0026zS\u003d2020-08-14\u0026zFS\u003dkang%20liang\u0026zU\u003d2020-10-14\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Managed project v1.1 to v1.2 on GitHub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added PR template"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added `Country` field to `Client`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Added `Timezone` field to `Client`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    * Added documentation for the features `client note delete`, `client note update` and `country filter`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * Update documentation for `client add` and `client edit`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    * Added `Glossary` for terms worth recording"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [#124](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/121), [#151](https://github.com/AY2021S1-CS2103T-F11-4/tp/pull/151)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  * Contributed to forum discussions (examples: [\\#24](https://github.com/nus-cs2103-AY2021S1/forum/issues/24), [\\#47](https://github.com/nus-cs2103-AY2021S1/forum/issues/47), [\\#63](https://github.com/nus-cs2103-AY2021S1/forum/issues/63), [\\#79](https://github.com/nus-cs2103-AY2021S1/forum/issues/79), [\\#121](https://github.com/nus-cs2103-AY2021S1/forum/issues/121), [\\#147](https://github.com/nus-cs2103-AY2021S1/forum/issues/147), [\\#182](https://github.com/nus-cs2103-AY2021S1/forum/issues/182), [\\#194](https://github.com/nus-cs2103-AY2021S1/forum/issues/194), [\\#240](https://github.com/nus-cs2103-AY2021S1/forum/issues/240), [\\#241](https://github.com/nus-cs2103-AY2021S1/forum/issues/241),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 14,
      "tankangliang": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.storage.JsonTbmManagerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.storage.TbmManagerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TBM ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManagerStorage tbmManagerStorage \u003d new JsonTbmManagerStorage(userPrefs.getTbmManagerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        storage \u003d new StorageManager(tbmManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.initialiseTagNoteMap();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TBM ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ui \u003d new UiManager(logic, this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Optional\u003cReadOnlyTbmManager\u003e tbmManagerOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ReadOnlyTbmManager initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            tbmManagerOptional \u003d storage.readTbmManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            if (!tbmManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TbmManager\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            initialData \u003d tbmManagerOptional.orElseGet(SampleDataUtil::getSampleTbmManager);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TbmManager\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            initialData \u003d new TbmManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TbmManager\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            initialData \u003d new TbmManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TbmManager\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        logger.info(\"Starting TbmManager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "rtshkmr": 2,
      "tankangliang": 18,
      "qwoprocks": 2,
      "-": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String LOG_FILE \u003d \"TBM.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_INVALID_COUNTRY_NOTE_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            \"The country note index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_CLIENTS_LISTED_OVERVIEW \u003d \"%1$d clients listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "qwoprocks": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the TbmManager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @see seedu.address.model.Model#getTbmManager()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    ReadOnlyTbmManager getTbmManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the client of the widget view box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Client."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    Client getWidgetClient();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of clients */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of country notes */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cCountryNote\u003e getSortedFilteredCountryNoteList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the user prefs\u0027 TbmManager file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Path getTbmManagerFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 7,
      "raysonkoh": 2,
      "tankangliang": 6,
      "qwoprocks": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.parser.MainParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final MainParser mainParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        mainParser \u003d new MainParser(model.getTagNoteMap());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Command command \u003d mainParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            storage.saveTbmManager(model.getTbmManager());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ReadOnlyTbmManager getTbmManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return model.getTbmManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Client getWidgetClient() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return model.getWidgetClient();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return model.getSortedFilteredClientList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cCountryNote\u003e getSortedFilteredCountryNoteList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return model.getSortedFilteredCountryNoteList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Path getTbmManagerFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return model.getTbmManagerFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 5,
      "raysonkoh": 1,
      "tankangliang": 10,
      "qwoprocks": 9,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        model.setTbmManager(new TbmManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTRACT_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Adds a client to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_COUNTRY + \"COUNTRY_CODE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_TIMEZONE + \"TIMEZONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"[\" + PREFIX_CONTRACT_EXPIRY_DATE + \"CONTRACT_EXPIRY_DATE\" + \"]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_COUNTRY + \"SG \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_TIMEZONE + \"GMT+8 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + PREFIX_CONTRACT_EXPIRY_DATE + \"30-1-2023 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Client toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Creates an ClientAddCommand to add the specified {@code Client}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientAddCommand(Client client) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        toAdd \u003d client;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (model.hasClient(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.addClient(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof ClientAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ClientAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 14,
      "qwoprocks": 12,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Deletes a client identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \": Deletes the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getSortedFilteredClientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof ClientDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ClientDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 5,
      "qwoprocks": 9,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.LastModifiedInstant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Edits the details of an existing client in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientEditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"[\" + PREFIX_COUNTRY + \"COUNTRY_CODE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"[\" + PREFIX_TIMEZONE + \"TIMEZONE]\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final EditClientDescriptor editClientDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param index of the client in the filtered client list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param editClientDescriptor details to edit the client with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientEditCommand(Index index, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(editClientDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.editClientDescriptor \u003d new EditClientDescriptor(editClientDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getSortedFilteredClientList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates and returns a {@code Client} with the details of {@code clientToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * edited with {@code editClientDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assert clientToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Address updatedAddress \u003d editClientDescriptor.getAddress().orElse(clientToEdit.getAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country updatedCountry \u003d editClientDescriptor.getCountry().orElse(clientToEdit.getCountry());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Timezone updatedTimezone \u003d editClientDescriptor.getTimezone().orElse(clientToEdit.getTimezone());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ContractExpiryDate updatedContractExpiryDate \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                editClientDescriptor.getContractExpiryDate().orElse(clientToEdit.getContractExpiryDate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant updatedLastModifiedInstant \u003d new LastModifiedInstant();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        LinkedHashSet\u003cNote\u003e retainedClientNotes \u003d new LinkedHashSet\u003c\u003e(clientToEdit.getClientNotes());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client newClient \u003d new Client(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedCountry,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                updatedTimezone, updatedContractExpiryDate, updatedLastModifiedInstant);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        retainedClientNotes.forEach(clientNote -\u003e newClient.addClientNote(clientNote));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return newClient;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!(other instanceof ClientEditCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand e \u003d (ClientEditCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Stores the details to edit the client with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * corresponding field value of the client."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static class EditClientDescriptor {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        private Country country;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        private Timezone timezone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private ContractExpiryDate contractExpiryDate;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public EditClientDescriptor() {}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public EditClientDescriptor(EditClientDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            setCountry(toCopy.country);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            setTimezone(toCopy.timezone);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            setContractExpiryDate(toCopy.contractExpiryDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, country, timezone, contractExpiryDate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public void setCountry(Country country) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            this.country \u003d country;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public Optional\u003cCountry\u003e getCountry() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return Optional.ofNullable(country);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public void setTimezone(Timezone timezone) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public Optional\u003cTimezone\u003e getTimezone() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return Optional.ofNullable(timezone);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void setContractExpiryDate(ContractExpiryDate contractExpiryDate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            this.contractExpiryDate \u003d contractExpiryDate;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public Optional\u003cContractExpiryDate\u003e getContractExpiryDate() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return Optional.ofNullable(contractExpiryDate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (!(other instanceof EditClientDescriptor)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            EditClientDescriptor e \u003d (EditClientDescriptor) other;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    \u0026\u0026 getCountry().equals(e.getCountry())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    \u0026\u0026 getTimezone().equals(e.getTimezone())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    \u0026\u0026 getContractExpiryDate().equals(e.getContractExpiryDate());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 7,
      "tankangliang": 40,
      "qwoprocks": 54,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Finds and lists all clients in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientFindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Initializes a ClientFindCommand with a predicate of Client."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param predicate The predicate to filter Clients by."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientFindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getSortedFilteredClientList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof ClientFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 predicate.equals(((ClientFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "raysonkoh": 5,
      "tankangliang": 5,
      "qwoprocks": 5,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientNoteAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Adds a Client-specific Note to list of notes associated with a client."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client note add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note associated to a client \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"Parameters: INDEX \" + PREFIX_NOTE + \"NOTE_STRING [\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_NOTE + \"client note content\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_CLIENT_NOTE \u003d \"The client note already exists\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully added client note\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Note clientNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initializes a ClientNoteAddCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param targetIndex The index of the client whom the clientNote will be associated to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clientNote  The clientNote to be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteAddCommand(Index targetIndex, Note clientNote) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(clientNote);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.clientNote \u003d clientNote;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getSortedFilteredClientList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client clientToAddNoteTo \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (model.hasClientNote(clientToAddNoteTo, clientNote)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT_NOTE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.addClientNote(clientToAddNoteTo, clientNote);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS); // TODO: dynamically format success message"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!(other instanceof ClientNoteAddCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteAddCommand c \u003d (ClientNoteAddCommand) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.targetIndex.equals(c.targetIndex) \u0026\u0026 this.clientNote.equals(c.clientNote);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 73,
      "tankangliang": 1,
      "qwoprocks": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientNoteDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Deletes a Client-specific Note from a list of notes associated with a client."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client note delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a note associated to a client \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"by the index number used in the displayed client list \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"and the index number for client note in the displayed client notes list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"Parameters: CLIENT INDEX, CLIENT NOTES INDEX\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + \"client note content\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DELETED_CLIENT_NOTE_SUCCESS \u003d \"Successfully deleted client note\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String MESSAGE_INVALID_CLIENT_NOTE_DISPLAYED_INDEX \u003d \"The client note index provided is \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Index targetClientIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Index targetClientNoteIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initializes a ClientNoteDeleteCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param targetClientIndex The index of the client whom the clientNote is associated to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param targetClientNoteIndex  The index of the clientNote to be deleted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteDeleteCommand(Index targetClientIndex, Index targetClientNoteIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(targetClientIndex, targetClientNoteIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.targetClientIndex \u003d targetClientIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.targetClientNoteIndex \u003d targetClientNoteIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e lastShownClientList \u003d model.getSortedFilteredClientList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (targetClientIndex.getZeroBased() \u003e\u003d lastShownClientList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cNote\u003e notesList \u003d lastShownClientList.get(targetClientIndex.getZeroBased()).getClientNotesAsList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (targetClientNoteIndex.getZeroBased() \u003e\u003d notesList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CLIENT_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client associatedClient \u003d lastShownClientList.get(targetClientIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note noteToDelete \u003d associatedClient.getClientNotesAsList().get(targetClientNoteIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert associatedClient.hasClientNote(noteToDelete) : \"attempting to delete client note that doesn\u0027t exist\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.deleteClientNote(associatedClient, noteToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new CommandResult(MESSAGE_DELETED_CLIENT_NOTE_SUCCESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!(other instanceof ClientNoteDeleteCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand c \u003d (ClientNoteDeleteCommand) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.targetClientIndex.equals(c.targetClientIndex)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u0026\u0026 this.targetClientNoteIndex.equals(c.targetClientNoteIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // todo: question: is it better to check commmand equality using the ClientNote object or it\u0027s associated index?"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 79,
      "qwoprocks": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientNoteEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Edits a Client-specific Note from a list of notes associated with a client while preserving tagging history."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteEditCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client note edit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a note associated to a client \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"by the index number used in the displayed client list\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"and the index number for client note in the displayed client notes list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"Parameters: CLIENT_INDEX CLIENT_NOTE_INDEX \" + PREFIX_NOTE + \"NOTE_STRING [\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1 \" + PREFIX_NOTE + \"client note newly edited content\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String MESSAGE_EDIT_CLIENT_NOTE_SUCCESS \u003d \"Successfully edited client note\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String MESSAGE_INVALID_CLIENT_NOTE_DISPLAYED_INDEX \u003d \"The client note index provided is \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Index targetClientIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Index targetClientNoteIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Note newNote;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initializes a ClientNoteEditCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *  @param targetClientIndex The index of the client whom the clientNote is associated to."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param targetClientNoteIndex  The index of the clientNote to be edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param newNote The newly edited note."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteEditCommand(Index targetClientIndex, Index targetClientNoteIndex, Note newNote) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(targetClientIndex, targetClientNoteIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.targetClientIndex \u003d targetClientIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.targetClientNoteIndex \u003d targetClientNoteIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.newNote \u003d newNote;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cClient\u003e lastShownClientList \u003d model.getSortedFilteredClientList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (targetClientIndex.getZeroBased() \u003e\u003d lastShownClientList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cNote\u003e notesList \u003d lastShownClientList.get(targetClientIndex.getZeroBased()).getClientNotesAsList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (targetClientNoteIndex.getZeroBased() \u003e\u003d notesList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CLIENT_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client associatedClient \u003d lastShownClientList.get(targetClientIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note noteToEdit \u003d associatedClient.getClientNotesAsList().get(targetClientNoteIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert associatedClient.hasClientNote(noteToEdit) : \"attempting to edit client note that doesn\u0027t exist\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e accumulatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        accumulatedTags.addAll(noteToEdit.getTags()); // these are the previous tags, because we want to retain history"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        accumulatedTags.addAll(newNote.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // because parser used tagNoteMap#getUniqueTags, it is okay for there to be duplicates in previous tags and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // new Note\u0027s tags. Overwriting will keep one of the two duplicates, and they are the same object reference."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (accumulatedTags.size() \u003e 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            accumulatedTags.remove(Tag.UNTAGGED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newNote.setTags(accumulatedTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.editClientNote(associatedClient, noteToEdit, newNote);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new CommandResult(MESSAGE_EDIT_CLIENT_NOTE_SUCCESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!(other instanceof ClientNoteEditCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand c \u003d (ClientNoteEditCommand) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.targetClientIndex.equals(c.targetClientIndex)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u0026\u0026 this.targetClientNoteIndex.equals(c.targetClientNoteIndex)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u0026\u0026 this.newNote.equals(c.newNote);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClientViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.ui.WidgetViewOption;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Views a client identified by its displayed index. Displayed on the widget view box."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /** Client command in the form client view index, where index points to the index of the client at current location"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    of the rendered */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"client view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \": Views the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String MESSAGE_VIEW_CLIENT_SUCCESS \u003d \"Viewing client: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ClientViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getSortedFilteredClientList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client clientToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        model.setWidgetClient(clientToView);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_CLIENT_SUCCESS, clientToView.getName()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                false, false, WidgetViewOption.generateClientWidgetOption());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                || (other instanceof ClientViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ClientViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 62,
      "raysonkoh": 2,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.ui.WidgetViewOption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /** Indicates what kind of display to show on the widget view box. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final WidgetViewOption widgetViewOption;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.widgetViewOption \u003d WidgetViewOption.generateNullWidgetOption();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, WidgetViewOption widgetViewOption) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(feedbackToUser, showHelp, exit, widgetViewOption);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.widgetViewOption \u003d widgetViewOption;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns the string representation of the widget view."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The string representation of the widget view."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getWidgetViewOptionAsString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return widgetViewOption.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns true if the UI should display the client view."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return True if the UI should display the client view."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean shouldDisplayClient() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return widgetViewOption.isClient();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns true if the UI should display the country notes view."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return True if the UI should display the country notes view."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean shouldDisplayCountryNote() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return widgetViewOption.isCountryNote();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the country that is associated with the widget view."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country that is associated with the widget view."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return widgetViewOption.getCountry();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 56,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountryFilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Filters the client list based on their country."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryFilterCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"country filter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose country matches \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"the specified country-code and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Parameters: \" + PREFIX_COUNTRY + \"COUNTRY_CODE\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" c/SG\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_FILTER_CLIENT_BY_COUNTRY_SUCCESS \u003d \"Showing %1$s clients that are from: %2$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final ClientCountryMatchesInputCountryPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes CountryFilterCommand with a predicate of Client."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param predicate The Country predicate to filter clients by."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryFilterCommand(ClientCountryMatchesInputCountryPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                String.format(MESSAGE_FILTER_CLIENT_BY_COUNTRY_SUCCESS, model.getSortedFilteredClientList().size(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                        predicate.getInputCountryStringRepresentation()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof CountryFilterCommand)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand c \u003d (CountryFilterCommand) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return predicate.equals(c.predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 58,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountryNoteAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Adds a Country-specific Note."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteAddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"country note add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \": Adds a note that is associated with the user input country.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + PREFIX_COUNTRY + \"COUNTRY_CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + PREFIX_NOTE + \"NOTE_STRING\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \" [\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_COUNTRY + \"SG \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + PREFIX_NOTE + \"has one of the lowest coporate taxes in the world \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + PREFIX_TAG + \"tax\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_COUNTRY_NOTE \u003d \"This country note already exists in TBM\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Successfully added country note for %1$s: %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryNote countryNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a CountryNoteCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The countryNote to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteAddCommand(CountryNote countryNote) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNote);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryNote \u003d countryNote;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (model.hasCountryNote(countryNote)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COUNTRY_NOTE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        model.addCountryNote(countryNote);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, countryNote.getCountry(), countryNote));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof CountryNoteAddCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand c \u003d (CountryNoteAddCommand) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryNote.equals(c.countryNote);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountryNoteDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.ui.WidgetViewOption;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A class that encapsulates the logic for deleting country notes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteDeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"country note delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \": Deletes the country note at the given index in the last viewed country note list panel.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted country note at index %1$s: %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a CountryNoteDeleteCommand with the given targetIndex."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param targetIndex The given targetIndex."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cCountryNote\u003e lastShownList \u003d model.getSortedFilteredCountryNoteList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUNTRY_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote countryNoteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        model.deleteCountryNote(countryNoteToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(), countryNoteToDelete), false, false,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                WidgetViewOption.generateNullWidgetOption());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof CountryNoteDeleteCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteDeleteCommand c \u003d (CountryNoteDeleteCommand) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return targetIndex.equals(c.targetIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 68,
      "tankangliang": 1,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountryNoteEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.ui.WidgetViewOption;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A class that encapsulates the logic for editing country notes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteEditCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"country note edit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \": Edits the country note at the given index in the last viewed country note list panel.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"(\" + PREFIX_NOTE + \"NOTE_STRING )\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \" (\" + PREFIX_TAG + \"TAG)...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_NOTE + \"better government stability in recent months\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Edited country note at index %1$s: %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryNote countryNote;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a CountryNoteEditCommand with the given targetIndex."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param targetIndex The given targetIndex."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The country note that contains the new note content."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteEditCommand(Index targetIndex, CountryNote countryNote) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryNote \u003d countryNote;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a CountryNoteEditCommand with the given targetIndex."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param targetIndex The given targetIndex."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tags The new tags to add to the country note at the existing targetIndex."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteEditCommand(Index targetIndex, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(targetIndex, tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryNote \u003d CountryNote.NULL_COUNTRY_NOTE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        List\u003cCountryNote\u003e lastShownList \u003d model.getSortedFilteredCountryNoteList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUNTRY_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote countryNoteToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tags.addAll(countryNoteToEdit.getTags());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tags.addAll(countryNote.getTags());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // if previously note has UNTAGGED and now it has additional tags, remove UNTAGGED"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (tags.size() \u003e 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tags.remove(Tag.UNTAGGED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote newCountryNote \u003d new CountryNote("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryNote.equals(CountryNote.NULL_COUNTRY_NOTE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                        ? countryNoteToEdit.getNoteContent() : countryNote.getNoteContent(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryNoteToEdit.getCountry(), tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        model.setCountryNote(countryNoteToEdit, newCountryNote);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(), newCountryNote), false, false,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                WidgetViewOption.generateNullWidgetOption());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof CountryNoteEditCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand c \u003d (CountryNoteEditCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return targetIndex.equals(c.targetIndex) \u0026\u0026 countryNote.equals(c.countryNote) \u0026\u0026 tags.equals(c.tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return Objects.hash(targetIndex, countryNote, tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountryNoteViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.ui.WidgetViewOption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Command to view all country notes of a given country."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteViewCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"country note view\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \": Views all country notes that are associated with the given country.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + PREFIX_COUNTRY + \"COUNTRY_CODE \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_COUNTRY + \"SG\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing country notes for %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a CountryNoteViewCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country The country which all displayed country notes belong to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteViewCommand(Country country) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a CountryNoteViewCommand that views all country notes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteViewCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.country \u003d Country.NULL_COUNTRY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (country.equals(Country.NULL_COUNTRY)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            model.updateFilteredCountryNoteList(countryNote -\u003e true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            model.updateFilteredCountryNoteList(countryNote -\u003e countryNote.getCountry().equals(country));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                country.equals(Country.NULL_COUNTRY) ? \"all countries\" : country),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            false, false, WidgetViewOption.generateCountryNoteWidgetOption(country));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof CountryNoteViewCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteViewCommand c \u003d (CountryNoteViewCommand) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return country.equals(c.country);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 70,
      "tankangliang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Lists all clients in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUGGEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.SuggestionType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Suggests a list of clients based on the specified suggestion types"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggest\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Suggests a list of all clients based on the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"suggestion types specified in the arguments.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"Parameters: \" + PREFIX_SUGGEST + \"SUGGESTION_TYPE\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SUGGEST + SuggestionType.BY_FREQUENCY + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SUGGEST + SuggestionType.BY_AVAILABLE + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SUGGEST + SuggestionType.BY_CONTRACT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String MESSAGE_SUGGEST_SUCCESS \u003d \"Showing clients based on suggestion criteria\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Set\u003cSuggestionType\u003e suggestionTypeOrderedSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Predicate\u003cClient\u003e suggestionTypePredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Comparator\u003cClient\u003e suggestionTypeCombinedComparator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Initializes SuggestCommand with a SuggestionType"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public SuggestCommand(Set\u003cSuggestionType\u003e suggestionTypeOrderedSet) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(suggestionTypeOrderedSet);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.suggestionTypeOrderedSet \u003d suggestionTypeOrderedSet;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.suggestionTypePredicate \u003d getCombinedPredicate(suggestionTypeOrderedSet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.suggestionTypeCombinedComparator \u003d getCombinedComparator(suggestionTypeOrderedSet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Given an ordered set of suggestion types, returns a combined predicate that returns true only if the client"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * passed in passes all the suggestion types\u0027 predicates."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static Predicate\u003cClient\u003e getCombinedPredicate(Set\u003cSuggestionType\u003e suggestionTypeOrderedSet) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return suggestionTypeOrderedSet.stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .map(SuggestionType::getSuggestionPredicate)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .reduce(client -\u003e true, (p1, p2) -\u003e client -\u003e p1.test(client) \u0026\u0026 p2.test(client));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Given an ordered set of suggestion types, returns a combined comparator that combines the suggestion types\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * comparators. Ordering of comparisons will be the same as the ordering of the ordered set passed in."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static Comparator\u003cClient\u003e getCombinedComparator(Set\u003cSuggestionType\u003e suggestionTypeOrderedSet) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cComparator\u003cClient\u003e\u003e suggestionTypeComparatorList \u003d suggestionTypeOrderedSet.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .map(SuggestionType::getSuggestionComparator).collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return (client1, client2) -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (Comparator\u003cClient\u003e comparator: suggestionTypeComparatorList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                int compareResult \u003d comparator.compare(client1, client2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                if (compareResult !\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    return compareResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(suggestionTypePredicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateSortedFilteredClientList(suggestionTypeCombinedComparator);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new CommandResult(MESSAGE_SUGGEST_SUCCESS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            || (other instanceof SuggestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u0026\u0026 suggestionTypeOrderedSet.equals(((SuggestCommand) other).suggestionTypeOrderedSet)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 6,
      "tankangliang": 38,
      "qwoprocks": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final Prefix PREFIX_COUNTRY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final Prefix PREFIX_TIMEZONE \u003d new Prefix(\"tz/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Prefix PREFIX_CONTRACT_EXPIRY_DATE \u003d new Prefix(\"ce/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"nt/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final Prefix PREFIX_SUGGEST \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "tankangliang": 2,
      "qwoprocks": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTRACT_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.LastModifiedInstant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new ClientAddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommandParser implements Parser\u003cClientAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientAddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns an ClientAddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                        PREFIX_COUNTRY, PREFIX_TIMEZONE, PREFIX_CONTRACT_EXPIRY_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_COUNTRY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                PREFIX_TIMEZONE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Timezone timezone \u003d ParserUtil.parseTimezone(argMultimap.getValue(PREFIX_TIMEZONE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Optional\u003cString\u003e contractExpiryDateString \u003d argMultimap.getValue(PREFIX_CONTRACT_EXPIRY_DATE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ContractExpiryDate contractExpiryDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (contractExpiryDateString.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            contractExpiryDate \u003d ParserUtil.parseContractExpiryDate(contractExpiryDateString.get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            contractExpiryDate \u003d ContractExpiryDate.NULL_DATE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant \u003d new LastModifiedInstant();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client client \u003d new Client(name, phone, email, address, country, timezone, contractExpiryDate,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                lastModifiedInstant);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new ClientAddCommand(client);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 21,
      "qwoprocks": 16,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new ClientDeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientDeleteCommandParser implements Parser\u003cClientDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns a ClientDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientDeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTRACT_EXPIRY_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new ClientEditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientEditCommandParser implements Parser\u003cClientEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientEditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns an ClientEditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_COUNTRY, PREFIX_TIMEZONE, PREFIX_CONTRACT_EXPIRY_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    ClientEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor editClientDescriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            editClientDescriptor.setCountry(ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMEZONE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            editClientDescriptor.setTimezone(ParserUtil.parseTimezone(argMultimap.getValue(PREFIX_TIMEZONE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTRACT_EXPIRY_DATE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            editClientDescriptor.setContractExpiryDate("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    ParserUtil.parseContractExpiryDate(argMultimap.getValue(PREFIX_CONTRACT_EXPIRY_DATE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!editClientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(ClientEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new ClientEditCommand(index, editClientDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 21,
      "qwoprocks": 11,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new ClientFindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientFindCommandParser implements Parser\u003cClientFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientFindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns a ClientFindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new ClientFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 8,
      "qwoprocks": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientNoteAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Parses input arguments and creates a new ClientNoteAddCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteAddCommandParser implements Parser\u003cClientNoteAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final TagNoteMap tagNoteMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Initializes a {@code CLientNoteAddCommandParser} with the {@code tagNoteMap} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientNoteAddCommandParser(TagNoteMap tagNoteMap) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(tagNoteMap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.tagNoteMap \u003d tagNoteMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param userInput The user input String."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return A ClientNoteAddCommand corresponding to the input string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws ParseException If user input is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteAddCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_TAG, PREFIX_NOTE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTE) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientNoteAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    ClientNoteAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d tagNoteMap.getUniqueTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        ClientNoteAddCommand.MESSAGE_USAGE))));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientNote.setTags(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new ClientNoteAddCommand(index, clientNote);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 53,
      "qwoprocks": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientNoteDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteDeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Parses input arguments and creates a new ClientNoteDeleteCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteDeleteCommandParser implements Parser\u003cClientNoteDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteDeleteCommand parse(String restOfCommand) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(restOfCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(restOfCommand); // no prefix needed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    ClientNoteDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index targetClientIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index targetClientNoteIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String[] splitPreamble \u003d argMultimap.getPreamble().split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (splitPreamble.length !\u003d 2) { // restOfCommand: 1 1 all space delimited \u003d\u003d\u003e 2 elems only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                throw new ParseException(\"nope\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            targetClientIndex \u003d ParserUtil.parseIndex(splitPreamble[splitPreamble.length - 2]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            targetClientNoteIndex \u003d ParserUtil.parseIndex(splitPreamble[splitPreamble.length - 1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ClientNoteDeleteCommand(targetClientIndex, targetClientNoteIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    ClientNoteDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientNoteEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Parses input arguments and creates a new ClientNoteEditCommandParser object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteEditCommandParser implements Parser\u003cClientNoteEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final TagNoteMap tagNoteMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initializes a {@code ClientNoteEditCommandParser} with the {@code tagNoteMap} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteEditCommandParser(TagNoteMap tagNoteMap) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(tagNoteMap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.tagNoteMap \u003d tagNoteMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ClientNoteEditCommand parse(String restOfCommand) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(restOfCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(restOfCommand, PREFIX_NOTE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // NEED TO PASS IN NOTE STRING AT LEAST, TAGS ARE OPTIONAL"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTE) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    ClientNoteEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index targetClientIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index targetClientNoteIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String[] splitPreamble \u003d argMultimap.getPreamble().split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (splitPreamble.length !\u003d 2) { // restOfCommand: 1 1 all space delimited \u003d\u003d\u003e 2 elems only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                throw new ParseException(\"\"); // empty string, will be caught in the catch block"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            targetClientIndex \u003d ParserUtil.parseIndex(splitPreamble[splitPreamble.length - 2]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            targetClientNoteIndex \u003d ParserUtil.parseIndex(splitPreamble[splitPreamble.length - 1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Set\u003cTag\u003e tags \u003d tagNoteMap.getUniqueTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Note newNote \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    .orElseThrow(() -\u003e new ParseException(\"\"))); // empty string, will be caught in the catch block"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            newNote.setTags(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ClientNoteEditCommand(targetClientIndex, targetClientNoteIndex, newNote);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    ClientNoteEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClientViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Parses input arguments and creates a new ClientViewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientViewCommandParser implements Parser\u003cClientViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClientViewCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * and returns a ClientViewCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ClientViewCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return new ClientViewCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CountryFilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryFilterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Parses input arguments and creates a new CountryFilterCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryFilterCommandParser implements Parser\u003cCountryFilterCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses the given {@code arg} of arguments in the context of the CountryFilterCommand and returns a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * CountryFilterCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param args The user input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A CountryFilterCommand object which corresponds to the user input string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException If user input string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isEmpty() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CountryFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String countryCode \u003d argMultimap.getValue(PREFIX_COUNTRY).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(countryCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CountryFilterCommand(new ClientCountryMatchesInputCountryPredicate(country));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CountryNoteAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Parses input arguments and creates a new CountryNoteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteAddCommandParser implements Parser\u003cCountryNoteAddCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final TagNoteMap tagNoteMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a {@code CLientNoteAddCommandParser} with the {@code tagNoteMap} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteAddCommandParser(TagNoteMap tagNoteMap) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(tagNoteMap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.tagNoteMap \u003d tagNoteMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses the given {@code arg} of arguments in the context of the CountryNoteAddCommand and returns a"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * CountryNoteAddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param args The user input string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A CountryNoteAddCommand object which corresponds to the user input string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException If user input string is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COUNTRY, PREFIX_NOTE, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isEmpty() || argMultimap.getValue(PREFIX_NOTE).isEmpty()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CountryNoteAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Set\u003cTag\u003e tags \u003d tagNoteMap.getUniqueTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Note note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(note.getNoteContent(), country);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNote.setTags(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CountryNoteAddCommand(countryNote);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 58,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CountryNoteDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A class that parses the user input and returns a CountryNoteDeleteCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteDeleteCommandParser implements Parser\u003cCountryNoteDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryNoteDeleteCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CountryNoteDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CountryNoteEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Parses input arguments and creates a new CountryNoteEditCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteEditCommandParser implements Parser\u003cCountryNoteEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final TagNoteMap tagNoteMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a {@code CountryNoteEditCommandParser} with the {@code tagNoteMap} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteEditCommandParser(TagNoteMap tagNoteMap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(tagNoteMap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.tagNoteMap \u003d tagNoteMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NOTE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if ((argMultimap.getValue(PREFIX_NOTE).isEmpty() \u0026\u0026 argMultimap.getValue(PREFIX_TAG).isEmpty())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    CountryNoteEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Index targetIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tags.addAll(tagNoteMap.getUniqueTags(argMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryNoteEditCommand(targetIndex, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Note note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(note.getNoteContent(), Country.NULL_COUNTRY, tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CountryNoteEditCommand(targetIndex, countryNote);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CountryNoteViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Parses input arguments and creates a new CountryNoteViewCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteViewCommandParser implements Parser\u003cCountryNoteViewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CountryNoteViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryNoteViewCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new CountryNoteViewCommand(country);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MainParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientFindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryFilterCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteAddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteDeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteEditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainParser.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Different command type separators"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String CLIENT_TYPE \u003d \"client\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String COUNTRY_TYPE \u003d \"country\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String COUNTRY_NOTE_TYPE \u003d \"country note\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String NOTE_TYPE \u003d \"note\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Used for separation of command type and rest of command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandType\u003e\\\\S+)(?\u003crestOfCommand\u003e.*)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final TagNoteMap tagNoteMap;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public MainParser(TagNoteMap tagNoteMap) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.tagNoteMap \u003d tagNoteMap;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandType \u003d matcher.group(\"commandType\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String restOfCommand \u003d matcher.group(\"restOfCommand\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        logger.info(\"Command Type: \" + commandType + \" Rest of command: \" + restOfCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case CLIENT_TYPE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return parseClientCommands(restOfCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case COUNTRY_TYPE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return parseCountryCommands(restOfCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case SuggestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new SuggestCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses input given that command is of COUNTRY_TYPE (starts with \"country\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param input user input with \"client\" stripped"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return command relating to client functions"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException if input does not conform to expected format"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Command parseCountryCommands(String input) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandType \u003d matcher.group(\"commandType\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String restOfCommand \u003d matcher.group(\"restOfCommand\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        logger.info(\"Command Type: \" + commandType + \" Rest of command: \" + restOfCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String commandWord \u003d COUNTRY_TYPE + \" \" + commandType;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case COUNTRY_NOTE_TYPE:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return parseCountryNoteCommands(restOfCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case CountryFilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryFilterCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses input given that command is of COUNTRY_NOTE_TYPE (starts with \"country note\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param input user input with \"country note\" stripped"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return command relating to country note functions"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException if input does not conform to expected format"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Command parseCountryNoteCommands(String input) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final String commandType \u003d matcher.group(\"commandType\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final String restOfCommand \u003d matcher.group(\"restOfCommand\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        logger.info(\"Command Type: \" + commandType + \" Rest of command: \" + restOfCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String commandWord \u003d COUNTRY_NOTE_TYPE + \" \" + commandType;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case CountryNoteAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryNoteAddCommandParser(tagNoteMap).parse(restOfCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case CountryNoteViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryNoteViewCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case CountryNoteDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryNoteDeleteCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case CountryNoteEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new CountryNoteEditCommandParser(tagNoteMap).parse(restOfCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses input given that command is of CLIENT_TYPE (starts with \"client\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input user input with \"client\" stripped"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return command relating to client functions"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws ParseException if input does not conform to expected format"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Command parseClientCommands(String input) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandType \u003d matcher.group(\"commandType\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String restOfCommand \u003d matcher.group(\"restOfCommand\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        logger.info(\"Command Type: \" + commandType + \" Rest of command: \" + restOfCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (commandType.equals(NOTE_TYPE)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return parseClientNoteCommands(restOfCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String commandWord \u003d CLIENT_TYPE + \" \" + commandType;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientAddCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientEditCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientDeleteCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientFindCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        case ClientViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientViewCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses input given that command is of CLIENT_TYPE + NOTE_TYPE (starts with \"client note\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input user input with \"client note\" stripped"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return command relating to client note functions"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws ParseException if input does not conform to expected format"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Command parseClientNoteCommands(String input) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandType \u003d matcher.group(\"commandType\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String restOfCommand \u003d matcher.group(\"restOfCommand\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        logger.info(\"Command Type: \" + commandType + \" Rest of command: \" + restOfCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String commandWord \u003d CLIENT_TYPE + \" \" + NOTE_TYPE + \" \" + commandType;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case ClientNoteAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new ClientNoteAddCommandParser(tagNoteMap).parse(restOfCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case ClientNoteDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ClientNoteDeleteCommandParser().parse(restOfCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case ClientNoteEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ClientNoteEditCommandParser(tagNoteMap).parse(restOfCommand);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 2,
      "rtshkmr": 11,
      "raysonkoh": 71,
      "tankangliang": 101,
      "qwoprocks": 7,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.SuggestionType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.CountryCodeVerifier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses {@code String rawCountryCode} into a {@code Country}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param rawCountryCode The raw countryCode."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country associated with the input country code."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException If countryCode is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static Country parseCountry(String rawCountryCode) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(rawCountryCode);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String trimmedCountryCode \u003d rawCountryCode.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!CountryCodeVerifier.isValidCountryCode(trimmedCountryCode)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(CountryCodeVerifier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new Country(trimmedCountryCode);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses {@code String timezone} into a {@code Timezone}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param timezone String to be parsed into timezone."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return The timezone associated with the input string."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws ParseException If timezone is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static Timezone parseTimezone(String timezone) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(timezone);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String trimmedTimezone \u003d timezone.trim().toUpperCase();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!Timezone.isValidTimezone(trimmedTimezone)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(Timezone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Timezone(trimmedTimezone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses {@code String noteString} into a {@code Note}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param noteString The contents of the Note."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The Note representing the input noteString."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws ParseException If noteString is empty or null string."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static Note parseNote(String noteString) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(noteString);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String trimmedNoteString \u003d noteString.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (trimmedNoteString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Note(trimmedNoteString);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses a {@code String suggestionType} into a {@code SuggestionType}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws ParseException if the given {@code suggestionType} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static SuggestionType parseSuggestionType(String suggestionType) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(suggestionType);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String trimmedSuggestionType \u003d suggestionType.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!SuggestionType.isValidSuggestionType(trimmedSuggestionType)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException(SuggestionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new SuggestionType(trimmedSuggestionType);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e suggestionTypes} into a {@code Set\u003cSuggestionType\u003e}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static Set\u003cSuggestionType\u003e parseSuggestionTypes(Collection\u003cString\u003e suggestionTypes) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(suggestionTypes);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final Set\u003cSuggestionType\u003e suggestionSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (String suggestionType : suggestionTypes) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            suggestionSet.add(parseSuggestionType(suggestionType));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return suggestionSet;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Parses a {@code String dateString} into a {@code ContractExpiryDate}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static ContractExpiryDate parseContractExpiryDate(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String trimmedDateString \u003d dateString.trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (trimmedDateString.isEmpty()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return ContractExpiryDate.NULL_DATE;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!ContractExpiryDate.isValidDate(trimmedDateString)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new ParseException(ContractExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new ContractExpiryDate(trimmedDateString);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 44,
      "tankangliang": 46,
      "qwoprocks": 22,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUGGEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.SuggestionType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parses input arguments and creates a new SuggestCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * and returns a SuggestCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public SuggestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUGGEST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SUGGEST).isPresent() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cSuggestionType\u003e suggestionTypeOrderedSet \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ParserUtil.parseSuggestionTypes(argMultimap.getAllValues(PREFIX_SUGGEST));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new SuggestCommand(suggestionTypeOrderedSet);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 34,
      "qwoprocks": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the user prefs\u0027 TBM Manager file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Path getTbmManagerFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the user prefs\u0027 TBM Manager file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    void setTbmManagerFilePath(Path tbmManagerFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the TbmManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    ReadOnlyTbmManager getTbmManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Replaces TBM Manager data with the data in {@code tbmManager}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    void setTbmManager(ReadOnlyTbmManager tbmManager);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in TBM Manager."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    boolean hasClient(Client client);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Deletes the given client. The client must exist in TBM Manager."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void deleteClient(Client target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Sets the widget box contents to the given client."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void setWidgetClient(Client client);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Retrives the client to be displayed in the widget."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return Client."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    Client getWidgetClient();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Adds the given client."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * {@code client} must not already exist in TBM Manager."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void addClient(Client client);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Replaces the given client {@code target} with {@code editedClient}. {@code target} must exist in the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * TBM Manager. The client identity of {@code editedClient} must not be the same as another existing"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * client in TBM Manager."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void setClient(Client target, Client editedClient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns true if the {@code countryNote} already exists in TBM."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    boolean hasCountryNote(CountryNote countryNote);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds the given country note to TBM."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    void addCountryNote(CountryNote countryNote);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Deletes the given country note in TBM."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    void deleteCountryNote(CountryNote countryNoteToDelete);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Replaces the given old country note with the given new country note."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    void setCountryNote(CountryNote oldCountryNote, CountryNote newCountryNote);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if {@code client} contains the {@code clientNote} specified."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    boolean hasClientNote(Client client, Note clientNote);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Adds the given client note to the given client, updating relevant maps while at it."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void addClientNote(Client client, Note clientNote);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Deletes a Client Note associated to a particular Client."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param associatedClient Client associated to the note to be deleted."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param noteToDelete     Note to be deleted."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void deleteClientNote(Client associatedClient, Note noteToDelete);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Edits a Client Note associated to a particular Client."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param associatedClient Client associated to the note to be edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param noteToEdit     Note to be edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param  newNote     newNote to be used."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void editClientNote(Client associatedClient, Note noteToEdit, Note newNote);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns an unmodifiable view of the filtered client list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cClient\u003e getSortedFilteredClientList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns an unmodifiable view of the filtered client notes list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cNote\u003e getSortedFilteredClientNotesList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Updates the filter of the filtered client list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Updates the order of the filtered client list using the give {@code comparator}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @throws NullPointerException if {@code comparator} is null."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void updateSortedFilteredClientList(Comparator\u003cClient\u003e comparator);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns an unmodifiable view of the filtered country notes list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cCountryNote\u003e getSortedFilteredCountryNoteList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Updates the filter of the filtered country notes list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    void updateFilteredCountryNoteList(Predicate\u003cCountryNote\u003e predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initialises TagNoteMap from Clients notes and Country notes."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void initialiseTagNoteMap();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the tag note map."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    TagNoteMap getTagNoteMap();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Updates its {@code TagNoteMap} to map a note with a new set of tags."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param newTags The tags to associate with a particular note."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param note    The note to associate the tag with."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void updateTagNoteMapWithNote(Set\u003cTag\u003e newTags, Note note);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 14,
      "rtshkmr": 35,
      "raysonkoh": 37,
      "tankangliang": 13,
      "qwoprocks": 30,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.widget.WidgetModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Represents the in-memory model of the TbmManager data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final TbmManager tbmManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final FilteredList\u003cClient\u003e filteredClients;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final SortedList\u003cClient\u003e sortedFilteredClients;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final FilteredList\u003cCountryNote\u003e filteredCountryNotes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final SortedList\u003cCountryNote\u003e sortedFilteredCountryNotes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final WidgetModel widget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final TagNoteMap tagNoteMap;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Initializes a ModelManager with the given tbmManager and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ModelManager(ReadOnlyTbmManager tbmManager, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireAllNonNull(tbmManager, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        logger.fine(\"Initializing with TBM Manager: \" + tbmManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.tbmManager \u003d new TbmManager(tbmManager);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.widget \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        filteredClients \u003d new FilteredList\u003c\u003e(this.tbmManager.getClientList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sortedFilteredClients \u003d new SortedList\u003c\u003e(filteredClients);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        filteredCountryNotes \u003d new FilteredList\u003c\u003e(this.tbmManager.getCountryNoteList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sortedFilteredCountryNotes \u003d new SortedList\u003c\u003e(filteredCountryNotes,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                Comparator.comparing(CountryNote::getCountry)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        .thenComparingInt(filteredCountryNotes::indexOf));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.initialiseTagNoteMap(); // init TagNoteMap upon construction of modelManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this(new TbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Path getTbmManagerFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return userPrefs.getTbmManagerFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void setTbmManagerFilePath(Path tbmManagerFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(tbmManagerFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userPrefs.setTbmManagerFilePath(tbmManagerFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TbmManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ReadOnlyTbmManager getTbmManager() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManager;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void setTbmManager(ReadOnlyTbmManager tbmManager) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.tbmManager.resetData(tbmManager);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManager.hasClient(client);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.removeClient(target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setWidgetClient(Client client) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widget.setWidgetClient(client);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Client getWidgetClient() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return widget.getWidgetClient();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.addClient(client);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cNote\u003e clientNotes \u003d client.getClientNotes();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Note note : clientNotes) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Set\u003cTag\u003e tags \u003d note.getTags();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            updateTagNoteMapWithNote(tags, note);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.setClient(target, editedClient);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        initialiseTagNoteMap();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean hasCountryNote(CountryNote countryNote) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNote);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManager.hasCountryNote(countryNote);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean hasClientNote(Client target, Note clientNote) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(target, clientNote);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assert tbmManager.hasClient(target) : \"tbmManager not synced with modelManager; missing client\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return target.hasClientNote(clientNote);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote(CountryNote countryNote) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNote);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d countryNote.getTags();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        updateTagNoteMapWithNote(newTags, countryNote);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.addCountryNote(countryNote);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void deleteCountryNote(CountryNote countryNoteToDelete) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNoteToDelete);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tagNoteMap.deleteNote(countryNoteToDelete);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.deleteCountryNote(countryNoteToDelete);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setCountryNote(CountryNote oldCountryNote, CountryNote newCountryNote) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(oldCountryNote, newCountryNote);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.tagNoteMap.editNote(oldCountryNote, newCountryNote);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tbmManager.setCountryNote(oldCountryNote, newCountryNote);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void addClientNote(Client target, Note clientNote) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(target, clientNote);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        target.addClientNote(clientNote);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d clientNote.getTags();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        updateTagNoteMapWithNote(newTags, clientNote);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void updateTagNoteMapWithNote(Set\u003cTag\u003e newTags, Note note) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.tagNoteMap.addTagsForNote(newTags, note);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initialises TagNoteMap from Clients notes and Country notes."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void initialiseTagNoteMap() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.tagNoteMap.initTagNoteMapFromClients(this.tbmManager.getClientList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // todo: initialiseTagNoteMap probably has to be changed to use TbmManager#getNoteList()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.tagNoteMap.initTagNoteMapFromCountryNotes(new HashSet\u003c\u003e(this.tbmManager.getCountryNoteList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public TagNoteMap getTagNoteMap() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.tagNoteMap;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void deleteClientNote(Client associatedClient, Note noteToDelete) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(associatedClient, noteToDelete);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.tagNoteMap.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        associatedClient.deleteClientNote(noteToDelete);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void editClientNote(Client associatedClient, Note noteToEdit, Note newNote) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(associatedClient, noteToEdit);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.tagNoteMap.editNote(noteToEdit, newNote);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        associatedClient.editClientNote(noteToEdit, newNote);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cClient\u003e getSortedFilteredClientList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return sortedFilteredClients;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cNote\u003e getSortedFilteredClientNotesList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // todo: depends on UI display of client notes and their index"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cNote\u003e clientNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Client client : getSortedFilteredClientList()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            clientNotes.addAll(client.getClientNotes());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return FXCollections.observableList(clientNotes);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        filteredClients.setPredicate(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void updateSortedFilteredClientList(Comparator\u003cClient\u003e comparator) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sortedFilteredClients.setComparator(comparator);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cCountryNote\u003e getSortedFilteredCountryNoteList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return sortedFilteredCountryNotes;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void updateFilteredCountryNoteList(Predicate\u003cCountryNote\u003e predicate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        filteredCountryNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManager.equals(other.tbmManager)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 sortedFilteredClients.equals(other.sortedFilteredClients)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 tagNoteMap.equals(other.tagNoteMap);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 14,
      "rtshkmr": 58,
      "raysonkoh": 26,
      "tankangliang": 32,
      "qwoprocks": 35,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTbmManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public interface ReadOnlyTbmManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an unmodifiable view of the clients list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * This list will not contain any duplicate clients."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    ObservableList\u003cClient\u003e getClientList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns an unmodifiable view of the notes list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * This list will not contain any duplicate notes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    ObservableList\u003cNote\u003e getNoteList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns an unmodifiable view of the country notes list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * This list will not contain any duplicate country notes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    ObservableList\u003cCountryNote\u003e getCountryNoteList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 13,
      "tankangliang": 1,
      "qwoprocks": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Path getTbmManagerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TbmManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.UniqueClientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.CountryNotesManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Wraps all data at TbmManager level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Duplicates are not allowed (by .isSameClient comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TbmManager implements ReadOnlyTbmManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UniqueClientList clients;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryNotesManager countryNotesManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesManager \u003d new CountryNotesManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TbmManager() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Creates an TbmManager using the Clients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TbmManager(ReadOnlyTbmManager toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the contents of the client list with {@code clients} and the contents of the tag set with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * the union over all client tags, then update client tag sets with unique tags."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.clients.setClients(clients);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Replaces all notes in TbmManager with the given list of notes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param notes The given list of notes."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (Note note: notes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (note.isClientNote()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                // handle client notes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                // todo:  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                //        decided to not store the client notes in a separete set"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                //        because the notes are going to be stored within clients"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                //        itself. The setClient function aldy does this. Adding in"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                //        a collection of client notes in this class would mean that"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                //        collection needs to be constantly updated. As such, it"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                //        might be good enough to just modify the getNoteList method"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                //        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryNotesManager.addCountryNote((CountryNote) note);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Resets the existing data of this {@code TbmManager} with {@code newData}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void resetData(ReadOnlyTbmManager newData) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        setClients(newData.getClientList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        setNotes(newData.getNoteList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    //// client-level operations"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in TManager."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clients.contains(client);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Adds the client to TbmManager."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * The client must not already exist in TbmManager."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients.add(client);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Replaces the given client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * {@code target} must exist in TbmManager."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in TbmManager."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients.setClient(target, editedClient);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Removes {@code key} from this {@code TbmManager}. {@code key} must exist in TbmManager."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void removeClient(Client key) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients.remove(key);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks whether the given country has the given countryNote."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The given countryNote"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return True if the given country has the given countryNote."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean hasCountryNote(CountryNote countryNote) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNote);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryNotesManager.hasCountryNote(countryNote);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds the given countryNote to the given country."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The given countryNote"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote(CountryNote countryNote) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNote);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesManager.addCountryNote(countryNote);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Replaces the old country note with the new country note."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param oldCountryNote The old country note."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param newCountryNote The new country note that replaces the old country note."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setCountryNote(CountryNote oldCountryNote, CountryNote newCountryNote) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(oldCountryNote, newCountryNote);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesManager.setCountryNote(oldCountryNote, newCountryNote);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Deletes the given country note."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNoteToDelete The country note to delete."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void deleteCountryNote(CountryNote countryNoteToDelete) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNoteToDelete);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesManager.deleteCountryNote(countryNoteToDelete);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clients.asUnmodifiableObservableList().size() + \" clients\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    //TODO: add client notes also. NOTE: THIS ONLY RETURNS COUNTRY NOTES FOR NOW."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cNote\u003e accumulated \u003d new ArrayList\u003c\u003e(getCountryNoteList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.clients.forEach(client -\u003e accumulated.addAll(client.getClientNotes()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return FXCollections.observableArrayList(accumulated);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the list of country notes in TBM as an unmodifiable observable list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The unmodifiable observable list of country notes in TBM."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ObservableList\u003cCountryNote\u003e getCountryNoteList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryNotesManager.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof TbmManager // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 clients.equals(((TbmManager) other).clients)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 countryNotesManager.equals(((TbmManager) other).countryNotesManager)); // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Objects.hash(clients, countryNotesManager);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 12,
      "raysonkoh": 77,
      "tankangliang": 16,
      "qwoprocks": 30,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Path tbmManagerFilePath \u003d Paths.get(\"data\" , \"tbmManager.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        setTbmManagerFilePath(newUserPrefs.getTbmManagerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Path getTbmManagerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManagerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void setTbmManagerFilePath(Path tbmManagerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(tbmManagerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.tbmManagerFilePath \u003d tbmManagerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 tbmManagerFilePath.equals(o.tbmManagerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return Objects.hash(guiSettings, tbmManagerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + tbmManagerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Client.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class Client {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final Timezone timezone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ContractExpiryDate contractExpiryDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableSet\u003cNote\u003e clientNotes \u003d FXCollections.observableSet(new LinkedHashSet\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final LastModifiedInstant lastModifiedInstant;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Address address, Country country, Timezone timezone,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            ContractExpiryDate contractExpiryDate, LastModifiedInstant lastModifiedInstant) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireAllNonNull(name, phone, email, address, country, timezone, contractExpiryDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.contractExpiryDate \u003d contractExpiryDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.lastModifiedInstant \u003d lastModifiedInstant;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Timezone getTimezone() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return timezone;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ContractExpiryDate getContractExpiryDate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return contractExpiryDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public LastModifiedInstant getLastModifiedInstant() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return lastModifiedInstant;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Gets the list of client notes associated with this client."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return The list of client notes associated with this client."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Set\u003cNote\u003e getClientNotes() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Collections.unmodifiableSet(this.clientNotes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Gets the list of client notes associated with this client as an unmodifiable list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return An unmodifiable list of client notes associated with this client."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public List\u003cNote\u003e getClientNotesAsList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Collections.unmodifiableList(new ArrayList\u003c\u003e(getClientNotes()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableSet\u003cNote\u003e getClientNotesAsObservableSet() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clientNotes;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Adds a client note for this client."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clientNote The client note to be added."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void addClientNote(Note clientNote) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(clientNote);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.clientNotes.add(clientNote);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Deletes a specific client note from associated notes for this client."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clientNote the clientNote to be deleted."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void deleteClientNote(Note clientNote) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(clientNote);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.clientNotes.remove(clientNote);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Edits a specific client note from associated notes for this client."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clientNote the clientNote to be deleted."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param newNote the new clientnote to replace the existing one."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void editClientNote(Note clientNote, Note newNote) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireNonNull(clientNote);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.clientNotes.remove(clientNote);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.clientNotes.add(newNote);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // todo: keep existing tags."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Checks whether the client has a given note in collection or not."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clientNote The note, to be checked if client has it in collection."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return True if Client has that note in the collection."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean hasClientNote(Note clientNote) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return clientNotes.contains(clientNote);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if both clients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * This defines a weaker notion of equality between two clients."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean isSameClient(Client otherClient) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (otherClient \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return otherClient !\u003d null"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 (otherClient.getPhone().equals(getPhone()) || otherClient.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if both clients have the same identity and data fields."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * This defines a stronger notion of equality between two clients."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client otherClient \u003d (Client) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 otherClient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 otherClient.getCountry().equals(getCountry())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 otherClient.getTimezone().equals(getTimezone())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 otherClient.getContractExpiryDate().equals(getContractExpiryDate());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return Objects.hash(name, phone, email, address, country, timezone, contractExpiryDate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(\" Country: \")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(getCountry())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(\" Timezone: \")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(getTimezone())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .append(\" Contract Expiry Date: \")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(getContractExpiryDate());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 3,
      "rtshkmr": 64,
      "raysonkoh": 1,
      "tankangliang": 31,
      "qwoprocks": 30,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/ClientCountryMatchesInputCountryPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Country} matches the given Country."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ClientCountryMatchesInputCountryPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes with the country to be matched."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country The country to be matched"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ClientCountryMatchesInputCountryPredicate(Country country) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return client.getCountry().equals(country);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns string representation of user-input country."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The string representation of the user-input country."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getInputCountryStringRepresentation() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return country.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                || (other instanceof ClientCountryMatchesInputCountryPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \u0026\u0026 country.equals(((ClientCountryMatchesInputCountryPredicate) other).country)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/ContractExpiryDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a contract expiry date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ContractExpiryDate implements Comparable\u003cContractExpiryDate\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"ContractExpiryDate should be in the format day-month-year,\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \" where day is between 1 and 31 and month is between 1-12.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * ContractExpiryDate should be in the format day-month-year separating the digits."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Day should be in the range 1-31, month should be in the range 1-12, and year can be from 0000-9999."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \"^([0]?[1-9]|[1|2][0-9]|[3][0|1])[-]([0]?[1-9]|[1][0-2])[-]([0-9]{4}|[0-9]{2})$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d-M-[uuuu][uu]\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_DATE_FORMAT \u003d \"d-M-uuuu\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DISPLAY_DATE_FORMAT \u003d \"d MMM uuuu\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final ContractExpiryDate NULL_DATE \u003d new ContractExpiryDate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public final boolean isNullDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Constructs a null date object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private ContractExpiryDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.value \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.displayValue \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.isNullDate \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Constructs a date object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ContractExpiryDate(String date) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.date \u003d LocalDate.parse(date, DATE_FORMATTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.value \u003d this.date.format(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.displayValue \u003d this.date.format(DateTimeFormatter.ofPattern(DISPLAY_DATE_FORMAT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.isNullDate \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if the String follows the correct date format and is a valid date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                LocalDate.parse(test, DATE_FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                || (other instanceof ContractExpiryDate // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 date.equals(((ContractExpiryDate) other).date)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Objects.hash(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int compareTo(ContractExpiryDate other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return date.compareTo(other.date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/LastModifiedInstant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static java.time.format.DateTimeFormatter.ISO_INSTANT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Represents the instant the client was modified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidInstant(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class LastModifiedInstant implements Comparable\u003cLastModifiedInstant\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public final Instant value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Constructs an {@code LastModifiedInstant}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * This is used when client is added or edited."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public LastModifiedInstant() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.value \u003d Instant.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Constructs an {@code LastModifiedInstant}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * This is mainly used to construct an instant from storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param instant A valid instant string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public LastModifiedInstant(String instant) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(instant);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!isValidInstant(instant)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            this.value \u003d Instant.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            this.value \u003d Instant.parse(instant);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns true if the String is a valid instant."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static boolean isValidInstant(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Instant.parse(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof LastModifiedInstant // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 value.equals(((LastModifiedInstant) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return ISO_INSTANT.format(value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public int compareTo(LastModifiedInstant other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return other.value.compareTo(value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 72,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Represents a Client\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/SuggestAvailabilityPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Predicate to check for client availability in their timezone"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class SuggestAvailabilityPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final int AVAILABLE_STARTING_HOUR \u003d 18;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final int AVAILABLE_ENDING_HOUR \u003d 22;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final int SUGGEST_AVAILABILITY_PREDICATE_HASHCODE \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        int currHour \u003d client.getTimezone().getCurrHourInTimezone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return (currHour \u003e\u003d AVAILABLE_STARTING_HOUR \u0026\u0026 currHour \u003c AVAILABLE_ENDING_HOUR);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            || (other instanceof SuggestAvailabilityPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return SUGGEST_AVAILABILITY_PREDICATE_HASHCODE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/SuggestContractPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Predicate to check if client contains a contract expiry date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class SuggestContractPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final int SUGGEST_CONTRACT_PREDICATE_HASHCODE \u003d 2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return !client.getContractExpiryDate().isNullDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                || (other instanceof SuggestContractPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return SUGGEST_CONTRACT_PREDICATE_HASHCODE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/SuggestionType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Represents a SuggestionType in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Guarantees: immutable; suggestion type is valid as declared in {@link #isValidSuggestionType(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class SuggestionType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String BY_FREQUENCY \u003d \"frequency\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String BY_AVAILABLE \u003d \"available\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String BY_CONTRACT \u003d \"contract\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Suggestion type can only be of the following: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + BY_FREQUENCY + \", \" + BY_AVAILABLE + \", \" + BY_CONTRACT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public final String suggestionString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Constructs a {@code SuggestionType}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param suggestionString A valid string representing one of the three suggestion types."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public SuggestionType(String suggestionString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(suggestionString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        checkArgument(isValidSuggestionType(suggestionString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.suggestionString \u003d suggestionString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns this suggestion type\u0027s predicate."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Predicate\u003cClient\u003e getSuggestionPredicate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        switch (suggestionString) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case BY_AVAILABLE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new SuggestAvailabilityPredicate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case BY_CONTRACT:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return new SuggestContractPredicate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case BY_FREQUENCY:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return client -\u003e true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assert false; // code execution will never reach here"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns this suggestion type\u0027s comparator."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Comparator\u003cClient\u003e getSuggestionComparator() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        switch (suggestionString) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        case BY_AVAILABLE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return (client1, client2) -\u003e 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        case BY_CONTRACT:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return Comparator.comparing(Client::getContractExpiryDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        case BY_FREQUENCY:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return Comparator.comparing(Client::getLastModifiedInstant);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            assert false; // code execution will never reach here"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if a given string is a valid suggestion type name."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static boolean isValidSuggestionType(String test) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return test.equals(BY_FREQUENCY) || test.equals(BY_AVAILABLE) || test.equals(BY_CONTRACT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof SuggestionType // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 suggestionString.equals(((SuggestionType) other).suggestionString)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return suggestionString.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return \u0027[\u0027 + suggestionString + \u0027]\u0027;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 17,
      "tankangliang": 54,
      "qwoprocks": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Timezone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.OffsetDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Represents a Client\u0027s timezone in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTimezone(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Timezone {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String GMT_STRING \u003d \"GMT\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final int SMALLEST_NEGATIVE_OFFSET \u003d 12;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final int LARGEST_POSITIVE_OFFSET \u003d 14;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            \"Timezone should be in the form \\\"\" + GMT_STRING + \"+X\\\" or \\\"\" + GMT_STRING"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"-X\\\" where X is a number.\\n\" + \"Largest offset is \" + GMT_STRING"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"+\" + LARGEST_POSITIVE_OFFSET + \" and smallest offset is \" + GMT_STRING"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"-\" + SMALLEST_NEGATIVE_OFFSET;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /** Timezone must start with \"GMT\" */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\" + GMT_STRING + \"(?\u003csign\u003e[+-])(?\u003cnumber\u003e[\\\\d]+)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Pattern TIMEZONE_FORMAT \u003d Pattern.compile(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public final int offsetValue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Constructs a {@code Timezone}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param timezone A valid timezone."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Timezone(String timezone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(timezone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        checkArgument(isValidTimezone(timezone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String offsetString \u003d timezone.substring(GMT_STRING.length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        int offsetValue \u003d Integer.parseInt(offsetString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assert offsetValue \u003c\u003d LARGEST_POSITIVE_OFFSET \u0026\u0026 offsetValue \u003e\u003d (-1 * SMALLEST_NEGATIVE_OFFSET);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.offsetValue \u003d offsetValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns true if a given string is a valid timezone."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static boolean isValidTimezone(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final Matcher matcher \u003d TIMEZONE_FORMAT.matcher(test);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            matcher.find();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final String sign \u003d matcher.group(\"sign\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final String numberString \u003d matcher.group(\"number\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            if (numberString.length() \u003e 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final int number \u003d Integer.parseInt(numberString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            final int offset \u003d sign.equals(\"+\") ? LARGEST_POSITIVE_OFFSET : SMALLEST_NEGATIVE_OFFSET;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            if (number \u003c\u003d offset) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the current hour in this timezone."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The current hour in this timezone."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public int getCurrHourInTimezone() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ZoneOffset zoneOffSet \u003d ZoneOffset.ofHours(offsetValue);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        OffsetDateTime date \u003d OffsetDateTime.now(zoneOffSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return date.getHour();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // Negative offset values will automatically include \"-\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String sign \u003d offsetValue \u003e\u003d 0 ? \"+\" : \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return GMT_STRING + sign + offsetValue;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                || (other instanceof Timezone // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 offsetValue \u003d\u003d (((Timezone) other).offsetValue)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return offsetValue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 22,
      "tankangliang": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/UniqueClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A list of clients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A client is considered unique by comparing using {@code Client#isSameClient(Client)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * clients uses Client#isSameClient(Client) for equality so as to ensure that the client being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * unique in terms of identity in the UniqueClientList. However, the removal of a client uses Client#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * as to ensure that the client with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * @see Client#isSameClient(Client)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class UniqueClientList implements Iterable\u003cClient\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    // Initialize observableArrayList with a Callback that monitors change in the clients\u0027 notes list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList(client -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Observable[] { client.getClientNotesAsObservableSet() });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if the list contains an equivalent client as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean contains(Client toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameClient);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Adds a client to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * The client must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void add(Client toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!target.isSameClient(editedClient) \u0026\u0026 contains(editedClient)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalList.set(index, editedClient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Removes the equivalent client from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * The client must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void remove(Client toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients(UniqueClientList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the contents of this list with {@code clients}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(clients);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!clientsAreUnique(clients)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalList.setAll(clients);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ObservableList\u003cClient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Iterator\u003cClient\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                || (other instanceof UniqueClientList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueClientList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if {@code clients} contains only unique clients."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private boolean clientsAreUnique(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (int i \u003d 0; i \u003c clients.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (int j \u003d i + 1; j \u003c clients.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                if (clients.get(i).isSameClient(clients.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Signals that the operation is unable to find the specified client."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Signals that the operation will result in duplicate Clients (Clients are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class DuplicateClientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public DuplicateClientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        super(\"Operation would result in duplicate clients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/country/Country.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A representation of a Country that can be identified by a 2-letter ISO3166 country-code or by its country"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * name. It contains a list of country notes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class Country implements Comparable\u003cCountry\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final Country NULL_COUNTRY \u003d new Country();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String NONE_COUNTRY_CODE \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String NONE_COUNTRY_NAME \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String countryName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String countryCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a Country by its countryCode."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryCode The ISO3166 2-letter country code of the country to be initialized."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Country(String countryCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assert CountryCodeVerifier.isValidCountryCode(countryCode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryCode \u003d countryCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryName \u003d new Locale(\"\", countryCode).getDisplayName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Country() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryCode \u003d NONE_COUNTRY_CODE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryName \u003d NONE_COUNTRY_NAME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the country name of this country."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country name of this country."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getCountryName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the country code of this country."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country code of this country."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getCountryCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!(other instanceof Country)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country c \u003d (Country) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return countryCode.equals(c.countryCode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return countryCode.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryName + \" (\" + countryCode + \")\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int compareTo(Country country) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return countryCode.compareTo(country.countryCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 67,
      "tankangliang": 10,
      "qwoprocks": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/country/CountryCodeVerifier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Class that is responsible for verification of ISO3166 country-codes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryCodeVerifier {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Country code must be a valid 2-letter ISO3166 country code\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks if countryCode is a valid ISO3166 code."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryCode The country code."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Whether countryCode is a valid ISO3166 code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static boolean isValidCountryCode(String countryCode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c COUNTRY_CODES.length; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (COUNTRY_CODES[i].equals(countryCode)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the array of valid country-codes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The array of valid country-codes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static String[] getCountryCodes() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return COUNTRY_CODES;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/country/CountryNotesManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A high-level class responsible for mapping ISO3166 countries to countryNotes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNotesManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final ObservableList\u003cCountryNote\u003e internalCountryNoteList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final ObservableList\u003cCountryNote\u003e internalCountryNoteUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalCountryNoteList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks if {@code countryNote} already exists."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The note to be checked."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Whether {@code countryNote} already exists."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean hasCountryNote(CountryNote countryNote) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNote);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return internalCountryNoteList.contains(countryNote);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds the {@code countryNote}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNote The country note to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote(CountryNote countryNote) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // should always be a valid country"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assert CountryCodeVerifier.isValidCountryCode(countryNote.getCountry().getCountryCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNote);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!hasCountryNote(countryNote)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            internalCountryNoteList.add(countryNote);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns all Country Notes as an unmodifiable List."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Unmodifiable list of all country notes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ObservableList\u003cCountryNote\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return internalCountryNoteUnmodifiableList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Deletes the given country note."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param countryNoteToDelete The country note to be deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void deleteCountryNote(CountryNote countryNoteToDelete) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // should always be a valid country"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assert CountryCodeVerifier.isValidCountryCode(countryNoteToDelete.getCountry().getCountryCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(countryNoteToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assert hasCountryNote(countryNoteToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        internalCountryNoteList.remove(countryNoteToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Replaces the old country note with the new country note."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param oldCountryNote The old country note."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param newCountryNote The new country note."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setCountryNote(CountryNote oldCountryNote, CountryNote newCountryNote) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assert hasCountryNote(oldCountryNote) : \"old country note must exist in internal list\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        int targetIndx \u003d internalCountryNoteList.indexOf(oldCountryNote);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        internalCountryNoteList.set(targetIndx, newCountryNote);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                || (other instanceof CountryNotesManager // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 internalCountryNoteList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        .equals(((CountryNotesManager) other).internalCountryNoteList)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Objects.hash(internalCountryNoteList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 7,
      "raysonkoh": 66,
      "qwoprocks": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/CountryNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Representation of a country note."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class CountryNote extends Note {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static final CountryNote NULL_COUNTRY_NOTE \u003d new CountryNote(\"\", Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a country note."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param content The content of the country note."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country The country that is associate with the note."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNote(String content, Country country) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes the country note with the given content, country and tags."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param content The content of the country note."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country The country that the country note belongs to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tags The tags that are associated with the country note."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNote(String content, Country country, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireAllNonNull(content, country, tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super.setTags(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the country that is being associated with this country note."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country that is being associated with this country note."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean isClientNote() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!(other instanceof CountryNote)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // state check, super checks for note content and tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return super.equals(other) \u0026\u0026 country.equals(((CountryNote) other).country);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return Objects.hash(super.hashCode(), country);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return \"[\" + getCountry() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 75,
      "qwoprocks": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Generic Note class for country and client notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Notes should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Note.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final String noteContent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Constructs a Note object with some content in it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param content to be added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Note(String content) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        noteContent \u003d content;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        logger.info(String.format(\"--------------[New Note created with contents: %s]\", noteContent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the tags of this note to the {@code tags} passed in."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param tags The tag to be added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.tags.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the content of the note."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The content of the note."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public String getNoteContent() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return noteContent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns whether this note is a client note."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return True if this note is a client note, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean isClientNote() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the set of tags that is related to this Note."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The set of tags that is related to this Note."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!(obj instanceof Note)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note c \u003d (Note) obj;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        boolean hasSameTags \u003d this.tags.equals(c.tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this.noteContent.equals(c.noteContent) \u0026\u0026 hasSameTags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return noteContent;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Objects.hash(noteContent, tags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 36,
      "raysonkoh": 39,
      "qwoprocks": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/TagNoteMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Manages the relationship between Tags and Notes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class TagNoteMap {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TagNoteMap.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * A map that contains the mapping from any tag to a unique tag."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * A map is used instead of a set because the set does not offer the option of getting objects inside it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Map\u003cTag, Tag\u003e uniqueTagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Set\u003cNote\u003e noteSet \u003d new HashSet\u003c\u003e(); // TODO: not really needed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Map\u003cTag, Set\u003cNote\u003e\u003e tagToNotesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Map\u003cNote, Set\u003cTag\u003e\u003e noteToTagsMap \u003d new HashMap\u003c\u003e(); // TODO: not really needed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Constructor ensures our unique tag map has the UNTAGGED tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public TagNoteMap() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagMap.put(Tag.UNTAGGED, Tag.UNTAGGED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void initTagNoteMapFromNotes(Set\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        noteSet.addAll(notes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Note clientNote : notes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Set\u003cTag\u003e tags \u003d clientNote.getTags();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (Tag tag : tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                uniqueTagMap.put(tag, tag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            addTagsForNote(tags, clientNote);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initialises the TagNoteMap from a list of clients."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param clients The list of clients, each containing their notes and associated tags."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void initTagNoteMapFromClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(clients);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Client client : clients) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Set\u003cNote\u003e clientNotes \u003d client.getClientNotes();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            initTagNoteMapFromNotes(clientNotes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        logger.info(\"--------------[TagNoteMap initialized from clients]\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initialises the TagNoteMap from a list of countries."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param countryNotes The set of countries, each containing their notes and associated tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void initTagNoteMapFromCountryNotes(Set\u003cNote\u003e countryNotes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // todo: make init work when passed in a list of countryNotes"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(countryNotes);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        initTagNoteMapFromNotes(countryNotes);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        logger.info(\"--------------[TagNoteMap initialized from country notes]\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Get a set of unique tag objects, based on the tagStrings."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * If any tag is not inside the tag set, we add it to the tag set."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Set\u003cTag\u003e getUniqueTags(List\u003cString\u003e tagStrings) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e uniqueTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (tagStrings.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            uniqueTags.add(Tag.UNTAGGED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return uniqueTags;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (String tagString : tagStrings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Tag tag \u003d ParserUtil.parseTag(tagString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (uniqueTagMap.containsKey(tag)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                uniqueTags.add(uniqueTagMap.get(tag));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                uniqueTagMap.put(tag, tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                uniqueTags.add(tag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Collections.unmodifiableSet(uniqueTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Set\u003cTag\u003e getTagsForNote(Note note) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Collections.unmodifiableSet(noteToTagsMap.getOrDefault(note, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Set\u003cNote\u003e getNotesForTag(Tag tag) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Collections.unmodifiableSet(tagToNotesMap.getOrDefault(tag, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Deletes a note from the TagNoteMap."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Modifies existing {@code noteSet, tagToNotesMap, noteToTagsMap, uniqueTagMap}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param note The note to be deleted from the TagNoteMap."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void deleteNote(Note note) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert noteSet.contains(note) : \"trying to remove note that doesn\u0027t exist in noteSet\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert noteToTagsMap.containsKey(note) : \"trying to remove note that doesn\u0027t exist in noteToTagsMap\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        noteSet.remove(note);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e associatedTags \u003d this.noteToTagsMap.get(note);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Tag tag : associatedTags) { // remove note for relevant tags"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Set\u003cNote\u003e notes \u003d this.tagToNotesMap.get(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            notes.remove(note);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (notes.isEmpty()) { // remove the tag itself from tagToNotesMap and uniqueTagMap:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                this.tagToNotesMap.remove(tag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                this.uniqueTagMap.remove(tag);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        noteToTagsMap.remove(note);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Edits a note from the TagNoteMap."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Modifies existing {@code noteSet, tagToNotesMap, noteToTagsMap, uniqueTagMap}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param noteToEdit The note to be edited from the TagNoteMap."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param newNote The new note to replace it with."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void editNote(Note noteToEdit, Note newNote) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert noteSet.contains(noteToEdit) : \"trying to remove note that doesn\u0027t exist in noteSet\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert noteToTagsMap.containsKey(noteToEdit) : \"trying to remove note that doesn\u0027t exist in noteToTagsMap\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        noteSet.remove(noteToEdit);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e associatedTags \u003d this.noteToTagsMap.get(noteToEdit);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Tag tag : associatedTags) { // remove note for relevant tags"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Set\u003cNote\u003e notes \u003d this.tagToNotesMap.get(tag);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            notes.remove(noteToEdit);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (notes.isEmpty()) { // remove the tag itself from tagToNotesMap and uniqueTagMap:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                this.tagToNotesMap.remove(tag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                this.uniqueTagMap.remove(tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        noteSet.add(newNote);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        noteToTagsMap.remove(noteToEdit);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        addTagsForNote(newNote.getTags(), newNote); // todo: change this to retain past tags"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Adds a set of tags to a note, the note will contain a union of its current tag set and the input tag set"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * after this operation."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Method is public for ModelManager to use."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param newTags The tags to associate with a particular note."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param note    The note to associate the tag with."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void addTagsForNote(Set\u003cTag\u003e newTags, Note note) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        requireAllNonNull(newTags, note);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Tag newTag : newTags) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            // update the notes set for each of the tags:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (tagToNotesMap.containsKey(newTag)) { // if that tag exists"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                tagToNotesMap.get(newTag).add(note);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } else { // new tag:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Set\u003cNote\u003e notes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                notes.add(note);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                tagToNotesMap.put(newTag, notes);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // update the tags set for the note:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e currentTags \u003d noteToTagsMap.getOrDefault(note, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        currentTags.addAll(newTags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        noteToTagsMap.put(note, currentTags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        noteSet.add(note);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // short circuit if same object:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // instance of handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!(obj instanceof TagNoteMap)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // state check:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TagNoteMap other \u003d (TagNoteMap) obj;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this.uniqueTagMap.equals(other.uniqueTagMap)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u0026\u0026 this.noteSet.equals(other.noteSet)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u0026\u0026 this.tagToNotesMap.equals(other.tagToNotesMap)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u0026\u0026 this.noteToTagsMap.equals(other.noteToTagsMap);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 139,
      "qwoprocks": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final int MAX_CHARACTERS \u003d 45;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric and have a maximum of \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + MAX_CHARACTERS + \" characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final Tag UNTAGGED \u003d new Tag(\"untagged\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_CHARACTERS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 1,
      "qwoprocks": 4,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A set of tags that not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#equals(Object)}, which compares tagNames."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Supports some set operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class UniqueTagSet implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableSet\u003cTag\u003e internalSet \u003d FXCollections.observableSet();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Set\u003cTag\u003e internalUnmodifiableSet \u003d FXCollections.unmodifiableObservableSet(internalSet);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if the set contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalSet.contains(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Union with another tag set."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addAll(Set\u003cTag\u003e toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalSet.addAll(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an unmodifiable set of unique tag objects from the backing set that match the set of tags passed in."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param toGet The set of tag objects to get"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @return An unmodifiable set containing the unique tag objects"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Set\u003cTag\u003e getTags(Set\u003cTag\u003e toGet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(toGet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalSet.stream().filter(toGet::contains).collect(Collectors.toUnmodifiableSet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Replaces the contents of this set with {@code tags}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalSet.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        internalSet.addAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the backing set as an unmodifiable {@code Set}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Set\u003cTag\u003e asUnmodifiableSet() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalUnmodifiableSet;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalSet.iterator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                || (other instanceof UniqueTagSet // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 internalSet.equals(((UniqueTagSet) other).internalSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return internalSet.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.LastModifiedInstant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Contains utility methods for populating {@code TbmManager} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static Client[] getSampleClients() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new Client[]{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Country(\"SG\"), new Timezone(\"GMT+8\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ContractExpiryDate(\"21-4-2022\"), new LastModifiedInstant(\"2020-01-01T00:00:00.000000Z\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Country(\"SG\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new Timezone(\"GMT+8\"), new ContractExpiryDate(\"12-12-2021\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new LastModifiedInstant(\"2020-02-02T00:00:00.000000Z\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Country(\"SG\"), new Timezone(\"GMT+8\"), new ContractExpiryDate(\"1-4-2023\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new LastModifiedInstant(\"2020-03-03T00:00:00.000000Z\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Country(\"SG\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new Timezone(\"GMT+8\"), new ContractExpiryDate(\"23-12-2020\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new LastModifiedInstant(\"2020-04-04T00:00:00.000000Z\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Country(\"SG\"), new Timezone(\"GMT+8\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ContractExpiryDate(\"3-2-2021\"), new LastModifiedInstant(\"2020-05-05T00:00:00.000000Z\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Country(\"SG\"), new Timezone(\"GMT+8\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ContractExpiryDate(\"9-6-2024\"), new LastModifiedInstant(\"2020-06-06T00:00:00.000000Z\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static ArrayList\u003cCountryNote\u003e getSampleCountryNotes() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            new CountryNote(\"This is a country note\", new Country(\"SG\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            new CountryNote(\"This is another country note\", new Country(\"MY\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static ArrayList\u003cNote\u003e getSampleClientNotes() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            new Note(\"This is a regular note\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            new Note(\"This is another regular note\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static ReadOnlyTbmManager getSampleTbmManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager sampleTm \u003d new TbmManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Client sampleClient : getSampleClients()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            sampleTm.addClient(sampleClient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        //TODO: have method to add client notes to TbmManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (Note note: getSampleClientNotes()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return sampleTm;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 20,
      "tankangliang": 23,
      "qwoprocks": 16,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/widget/WidgetModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.model.widget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * This is the api for interacting with the proposed View Box widget in the TBM application. The view box widget model"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * is encapsulated within the TBM model itself."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public interface WidgetModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Static factory."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return WidgetModel implemented by WidgetModelMoanager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    static WidgetModel initWidget() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return WidgetModelManager.initWidget();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the client to be displayed in the widget view box."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param client To be set in the widget."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    void setWidgetClient(Client client);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the widget content object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return The client displayed for the widget."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    Client getWidgetClient();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 32,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/widget/WidgetModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.model.widget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * This is a separate model manager that separately manages the display contents of the proposed View Box left of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * the filtered client list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetModelManager implements WidgetModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(WidgetModelManager.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private WidgetModelManager() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    static WidgetModelManager initWidget() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        logger.info(\"----------------[ Creating WidgetModelManager ]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new WidgetModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setWidgetClient(Client client) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        logger.info(\"Setting client of widget to: \" + client.getName().fullName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Client getWidgetClient() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        logger.info(\"Retrieving client of widget: \" + client.getName().fullName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 34,
      "raysonkoh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.LastModifiedInstant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.CountryCodeVerifier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Jackson-friendly version of {@link Client}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "class JsonAdaptedClient {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final String country;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final String timezone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final String contractExpiryDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final String lastModifiedInstant;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e clientNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Constructs a {@code JsonAdaptedClient} with the given client details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public JsonAdaptedClient(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            @JsonProperty(\"address\") String address, @JsonProperty(\"country\") String country,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            @JsonProperty(\"timezone\") String timezone,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            @JsonProperty(\"contractExpiryDate\") String contractExpiryDate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            @JsonProperty(\"lastModifiedInstant\") String lastModifiedInstant,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            @JsonProperty(\"clientNotes\") List\u003cJsonAdaptedNote\u003e clientNotes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.contractExpiryDate \u003d contractExpiryDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.lastModifiedInstant \u003d lastModifiedInstant;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (clientNotes !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.clientNotes.addAll(clientNotes);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Converts a given {@code Client} into this class for Jackson use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public JsonAdaptedClient(Client source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        country \u003d source.getCountry().getCountryCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        timezone \u003d source.getTimezone().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        contractExpiryDate \u003d source.getContractExpiryDate().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        lastModifiedInstant \u003d source.getLastModifiedInstant().toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        clientNotes.addAll(source.getClientNotes().stream().map(JsonAdaptedNote::new).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Converts this Jackson-friendly adapted client object into the model\u0027s {@code Client} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted client."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Client toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        final Set\u003cNote\u003e clientNotes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (JsonAdaptedNote note : this.clientNotes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            clientNotes.add(note.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (country \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Country.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!CountryCodeVerifier.isValidCountryCode(country)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new IllegalValueException(CountryCodeVerifier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Country modelCountry \u003d new Country(country);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (timezone \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Timezone.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!Timezone.isValidTimezone(timezone)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new IllegalValueException(Timezone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Timezone modelTimezone \u003d new Timezone(timezone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (contractExpiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ContractExpiryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // It\u0027s possible for contractExpiryDate to have an empty String as a value, which would indicate"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // the client has no contractExpiryDate set, and {@code ParserUtil.parseContractExpiryDate} will"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // parse it into"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // a {@code ContractExpiryDate.NULL_DATE}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!contractExpiryDate.isEmpty() \u0026\u0026 !ContractExpiryDate.isValidDate(contractExpiryDate)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new IllegalValueException(ContractExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        final ContractExpiryDate modelContractExpiryContractExpiryDate \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                ParserUtil.parseContractExpiryDate(contractExpiryDate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // Does not throw an exception if lastModifiedInstant is missing/invalid due to corruption of data."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // This field is merely metadata for us and is not significant enough to discard client\u0027s data due"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // to this field being missing."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant modelLastModifiedInstant;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (lastModifiedInstant \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            modelLastModifiedInstant \u003d new LastModifiedInstant();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            modelLastModifiedInstant \u003d new LastModifiedInstant(lastModifiedInstant);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client modelClient \u003d new Client(modelName, modelPhone, modelEmail, modelAddress, modelCountry, modelTimezone,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    modelContractExpiryContractExpiryDate, modelLastModifiedInstant);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Note note : clientNotes) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            modelClient.addClientNote(note);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return modelClient;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 41,
      "raysonkoh": 3,
      "tankangliang": 34,
      "qwoprocks": 27,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "class JsonAdaptedNote {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String NULL_COUNTRY_CODE \u003d \"NULL_CC\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String contents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String countryCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Set\u003cJsonAdaptedTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"contents\") String contents, @JsonProperty(\"countryCode\") String countryCode,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            @JsonProperty(\"noteTags\") Set\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.contents \u003d contents;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.countryCode \u003d countryCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes this json note with the Note that it is representing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param note The note that this json note will be representing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public JsonAdaptedNote(Note note) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.contents \u003d note.getNoteContent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.tags.addAll(note.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (note.isClientNote()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            this.countryCode \u003d NULL_COUNTRY_CODE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            this.countryCode \u003d ((CountryNote) note).getCountry().getCountryCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns whether this json note represents a client or country note."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return True if this json note represents a client note."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean isClientNote() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return countryCode.equals(NULL_COUNTRY_CODE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Converts this Jackson-friendly adapted note object into the model\u0027s {@code Note} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted note."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Note toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (JsonAdaptedTag tag : this.tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (isClientNote()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Note clientNote \u003d new Note(contents);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            clientNote.setTags(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return clientNote;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNote countryNote \u003d new CountryNote(contents, new Country(countryCode));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryNote.setTags(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return countryNote;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 20,
      "raysonkoh": 51,
      "qwoprocks": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTbmManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * An Immutable TbmManager that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@JsonRootName(value \u003d \"tbmManager\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "class JsonSerializableTbmManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Clients list contains duplicate client(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Constructs a {@code JsonSerializableTbmManager} with the given clients."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public JsonSerializableTbmManager(@JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                                      @JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.clients.addAll(clients);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Converts a given {@code ReadOnlyTbmManager} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTbmManager}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public JsonSerializableTbmManager(ReadOnlyTbmManager source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        //TODO: For storing JSON notes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        notes.addAll(source.getNoteList().stream().map(JsonAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TbmManager} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TbmManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager tbmManager \u003d new TbmManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (JsonAdaptedClient jsonAdaptedClient : clients) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Client client \u003d jsonAdaptedClient.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            if (tbmManager.hasClient(client)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            tbmManager.addClient(client);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (JsonAdaptedNote note: notes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Note modelNote \u003d note.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (!note.isClientNote()) { // i.e. it\u0027s a countryNote"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                tbmManager.addCountryNote((CountryNote) modelNote);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManager;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 2,
      "raysonkoh": 10,
      "tankangliang": 17,
      "qwoprocks": 8,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTbmManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * A class to access TbmManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class JsonTbmManagerStorage implements TbmManagerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTbmManagerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public JsonTbmManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Path getTbmManagerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Optional\u003cReadOnlyTbmManager\u003e readTbmManager() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return readTbmManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Similar to {@link #readTbmManager()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Optional\u003cReadOnlyTbmManager\u003e readTbmManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Optional\u003cJsonSerializableTbmManager\u003e jsonTbmManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                filePath, JsonSerializableTbmManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!jsonTbmManager.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return Optional.of(jsonTbmManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void saveTbmManager(ReadOnlyTbmManager tbmManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        saveTbmManager(tbmManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Similar to {@link #saveTbmManager(ReadOnlyTbmManager)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void saveTbmManager(ReadOnlyTbmManager tbmManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        requireNonNull(tbmManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTbmManager(tbmManager), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public interface Storage extends TbmManagerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Path getTbmManagerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Optional\u003cReadOnlyTbmManager\u003e readTbmManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    void saveTbmManager(ReadOnlyTbmManager tbmManager) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Manages storage of TbmManager data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private TbmManagerStorage tbmManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TbmManagerStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public StorageManager(TbmManagerStorage tbmManagerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.tbmManagerStorage \u003d tbmManagerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TbmManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Path getTbmManagerFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManagerStorage.getTbmManagerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Optional\u003cReadOnlyTbmManager\u003e readTbmManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return readTbmManager(tbmManagerStorage.getTbmManagerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Optional\u003cReadOnlyTbmManager\u003e readTbmManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManagerStorage.readTbmManager(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void saveTbmManager(ReadOnlyTbmManager tbmManager) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        saveTbmManager(tbmManager, tbmManagerStorage.getTbmManagerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void saveTbmManager(ReadOnlyTbmManager tbmManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManagerStorage.saveTbmManager(tbmManager, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 17,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TbmManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Represents a storage for {@link TbmManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public interface TbmManagerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Path getTbmManagerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns TbmManager data as a {@link ReadOnlyTbmManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Optional\u003cReadOnlyTbmManager\u003e readTbmManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @see #getTbmManagerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Optional\u003cReadOnlyTbmManager\u003e readTbmManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Saves the given {@link ReadOnlyTbmManager} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param tbmManager cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    void saveTbmManager(ReadOnlyTbmManager tbmManager) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @see #saveTbmManager(ReadOnlyTbmManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    void saveTbmManager(ReadOnlyTbmManager tbmManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String FXML \u003d \"ClientListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TbmManager level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public final Client client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private VBox clientFields;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Label country;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Label timezone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates a {@code ClientListCard} with the given {@code Client} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientListCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        name.setText(client.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        phone.setText(client.getPhone().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        address.setText(client.getAddress().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        email.setText(client.getEmail().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        country.setText(client.getCountry().getCountryName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        timezone.setText(client.getTimezone().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!client.getContractExpiryDate().isNullDate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Label dateLabel \u003d new Label(client.getContractExpiryDate().displayValue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            dateLabel.getStyleClass().add(\"cell_small_label\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            clientFields.getChildren().add(dateLabel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!(other instanceof ClientListCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientListCard card \u003d (ClientListCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 client.equals(card.client);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "tankangliang": 6,
      "qwoprocks": 25,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Panel containing the list of clients."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String FXML \u003d \"ClientListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private ListView\u003cClient\u003e clientListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates a {@code ClientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientListView.setItems(clientList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientListView.setCellFactory(listView -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            ClientListViewCell clientListViewCell \u003d new ClientListViewCell();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            clientListViewCell.disableProperty().setValue(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return clientListViewCell;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    // Selection test was removed due to lack of selection feature in AB3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code ClientListCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    class ClientListViewCell extends ListCell\u003cClient\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        protected void updateItem(Client client, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            super.updateItem(client, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (empty || client \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                setGraphic(new ClientListCard(client, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 2,
      "qwoprocks": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CountryNoteListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * Panel containing the list of country notes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String FXML \u003d \"CountryNoteListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String HEADER_ALL_COUNTRIES_TEXT \u003d \"All Country Notes\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableList\u003cCountryNote\u003e countryNoteObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private boolean displayAllCountries \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Label header;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private VBox countryNoteListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a {@code CountryNoteListPanel} with a countryNoteObservableList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public CountryNoteListPanel(ObservableList\u003cCountryNote\u003e countryNoteObservableList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.countryNoteObservableList \u003d countryNoteObservableList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        header.setText(\"Country Notes\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        updateCountryNoteListView(countryNoteObservableList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNoteObservableList.addListener((ListChangeListener\u003cCountryNote\u003e) c -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (c.next()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                updateCountryNoteListView(countryNoteObservableList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void updateCountryNoteListView(ObservableList\u003cCountryNote\u003e countryNoteObservableList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNoteListView.getChildren().clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // This index is used to keep track of how many country notes have been displayed so far."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int noteIndex \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!displayAllCountries) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            initCountryNoteListViewFromCountryNotes(countryNoteListView, countryNoteObservableList, noteIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Country currCountry \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNoteListSubPanel countryNoteListSubPanel \u003d new CountryNoteListSubPanel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (CountryNote countryNote : countryNoteObservableList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (currCountry \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                currCountry \u003d countryNote.getCountry();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (!currCountry.equals(countryNote.getCountry())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                countryNoteListSubPanel.header.setText(currCountry + \" notes\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                countryNoteListView.getChildren().add(countryNoteListSubPanel.getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                currCountry \u003d countryNote.getCountry();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                countryNoteListSubPanel \u003d new CountryNoteListSubPanel();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteListSubPanel.addNoteListCard(new NoteListCard(countryNote, noteIndex + 1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            noteIndex++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (countryNoteObservableList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteListSubPanel.header.setText(currCountry + \" notes\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteListView.getChildren().add(countryNoteListSubPanel.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Given a list of country notes and the VBox to display them in, adds the country notes to the viewbox."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static void initCountryNoteListViewFromCountryNotes(VBox countryNoteListView,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            ObservableList\u003cCountryNote\u003e countryNoteObservableList, int startIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (int i \u003d 0; i \u003c countryNoteObservableList.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            CountryNote countryNote \u003d countryNoteObservableList.get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Node node \u003d new NoteListCard(countryNote, i + startIndex + 1).getRoot();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteListView.getChildren().add(node);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Sets the header of the CountryNoteListPanel."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country The country to be displayed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setHeader(Country country) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (country.equals(Country.NULL_COUNTRY)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteListView.setSpacing(10.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            header.setText(HEADER_ALL_COUNTRIES_TEXT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            displayAllCountries \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteListView.setSpacing(20.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            header.setText(country + \" notes\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            displayAllCountries \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        updateCountryNoteListView(countryNoteObservableList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sub-panel which is used for viewing all countries\u0027 notes, only used when {@code displayAllCountries} is true."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static class CountryNoteListSubPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private static final String FXML \u003d \"CountryNoteListPanel.fxml\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private VBox countryNoteListContainer;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private Label header;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private ScrollPane countryNoteScrollPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private VBox countryNoteListView;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "         * Initializes a {@code CountryNoteListSubPanel}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public CountryNoteListSubPanel() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            super(FXML);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteListContainer.setStyle(\"-fx-border-color: #FF3333; -fx-border-radius: 20\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteScrollPane.setMinHeight(30.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteScrollPane.setPrefHeight(200.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void addNoteListCard(NoteListCard noteListCard) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            countryNoteListView.getChildren().add(noteListCard.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 37,
      "qwoprocks": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f11-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String USERGUIDE_MESSAGE \u003d \"For more information, refer to the user guide: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String HELP_TITLE \u003d \"Commonly used commands\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String COMMON_COMMANDS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            \"list\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"client add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COUNTRY_CODE tz/TIMEZONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"[ce/CONTRACT_EXPIRY_DATE]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"client edit INDEX (n/NAME) (p/PHONE) (e/EMAIL) (a/ADDRESS) (c/COUNTRY_CODE) (tz/TIMEZONE) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"(ce/CONTRACT_EXPIRY_DATE)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \"client view INDEX\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"client find KEYWORD [MORE_KEYWORDS]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"client delete INDEX\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"client note add CLIENT_INDEX nt/NOTE_STRING [t/TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            + \"client note delete CLIENT_INDEX NOTE_INDEX\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"client note edit CLIENT_INDEX NOTE_INDEX nt/NOTE_STRING [t/TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"country filter c/COUNTRY_CODE\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"country note view [c/COUNTRY_CODE]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"country note add c/COUNTRY_CODE nt/NOTE_STRING [t/TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"country note edit INDEX (nt/NOTE_STRING) (t/TAG)...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"country note delete INDEX\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"suggest by/SUGGESTION_TYPE [by/SUGGESTION_TYPE]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"clear\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"exit\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            + \"help\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Label helpTitle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Label commonCommands;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Label userGuideMessage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Hyperlink userGuideUrl;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root    Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param mainApp The main application instance, used for the getHostServices() method."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public HelpWindow(Stage root, MainApp mainApp) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        helpTitle.setText(HELP_TITLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        commonCommands.setText(COMMON_COMMANDS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        userGuideMessage.setText(USERGUIDE_MESSAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        userGuideUrl.setText(USERGUIDE_URL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        userGuideUrl.setOnAction(t -\u003e mainApp.getHostServices().showDocument(userGuideUrl.getText()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Hides the help window when the Esc key is pressed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        root.addEventHandler(KeyEvent.KEY_PRESSED, keyEvent -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (keyEvent.getCode() \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                this.hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public HelpWindow(MainApp mainApp) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this(new Stage(), mainApp);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void copyUrl() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 2,
      "raysonkoh": 4,
      "tankangliang": 12,
      "qwoprocks": 39,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private ClientListPanel clientListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private WidgetViewBox widgetViewBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private CountryNoteListPanel countryNoteListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private StackPane widgetPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private StackPane clientListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, MainApp mainApp) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        helpWindow \u003d new HelpWindow(mainApp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        widgetViewBox \u003d new WidgetViewBox(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        countryNoteListPanel \u003d new CountryNoteListPanel(logic.getSortedFilteredCountryNoteList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetPlaceholder.getChildren().add(widgetViewBox.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTbmManagerFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientListPanel getClientListPanel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return clientListPanel;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            logger.info(\"Widget View Option: \" + commandResult.getWidgetViewOptionAsString());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (commandResult.shouldDisplayClient()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                logger.info(\"Toggling client view\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                widgetPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                widgetPlaceholder.getChildren().add(widgetViewBox.getRoot());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                logger.info(logic.getWidgetClient().getName().fullName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                widgetViewBox.updateClientDisplay(logic.getWidgetClient());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            } else if (commandResult.shouldDisplayCountryNote()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                logger.info(\"Toggling country notes view\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                widgetPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryNoteListPanel.setHeader(commandResult.getCountry());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                widgetPlaceholder.getChildren().add(countryNoteListPanel.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 7,
      "raysonkoh": 14,
      "tankangliang": 1,
      "qwoprocks": 11,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NoteListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * An UI component that displays information of a {@code Note}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class NoteListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String FXML \u003d \"NoteListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TbmManager level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public final Note note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Text noteContent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates a {@code NoteListCard} with the given {@code Note} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public NoteListCard(Note note, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        VBox.setVgrow(cardPane, Priority.ALWAYS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        id.setText(\"#\" + displayedIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        note.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        noteContent.setText(note.getNoteContent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        if (!(other instanceof NoteListCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        NoteListCard card \u003d (NoteListCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u0026\u0026 note.equals(card.note);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "qwoprocks": 24,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Creates a {@code ResultDisplay} that handles the display of the result of the executed command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TextClock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A clock in the form of a dynamic text."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class TextClock {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Timeline timeline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for the text clock object. Sets the text to a label."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param label A given label to set the time value to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public TextClock(Label label) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        timeline \u003d new Timeline(new KeyFrame(Duration.ZERO, e -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            label.setText(localTime.format(formatter));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }), new KeyFrame(Duration.seconds(1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Starts the clock."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void play() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Pauses the clock."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void pause() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        timeline.pause();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/TBM.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private MainApp mainApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public UiManager(Logic logic, MainApp mainApp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, mainApp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            String contentText) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "qwoprocks": 4,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WidgetViewBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * An Ui component that displays the information of {@code Client}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetViewBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(WidgetViewBox.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String FXML \u003d \"WidgetViewBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private VBox viewBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label country;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label contractExpiryDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Label noteTitle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ScrollPane clientNoteScrollPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private VBox clientNoteListView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ObservableList\u003cClient\u003e clientObservableList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private int displayedClientIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Client displayedClient;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private TextClock textClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Creates a {@code WidgetViewBox} with the given {@code WidgetObject}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public WidgetViewBox(ObservableList\u003cClient\u003e clientObservableList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.clientObservableList \u003d clientObservableList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        clientObservableList.addListener((ListChangeListener\u003cClient\u003e) c -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (c.next()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                if (c.wasUpdated() || c.wasReplaced()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    updateClientDisplay(clientObservableList.get(displayedClientIndex));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    for (int i \u003d 0; i \u003c clientObservableList.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        Client client \u003d clientObservableList.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        if (client.isSameClient(displayedClient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            displayedClient \u003d client;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            displayedClientIndex \u003d i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        initDefault();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Updates the current client of the widget view box to the given client."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param client The new client to display."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void updateClientDisplay(Client client) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textClock.pause();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        displayedClient \u003d client;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (int i \u003d 0; i \u003c clientObservableList.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            if (clientObservableList.get(i).isSameClient(client)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                displayedClient \u003d clientObservableList.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                displayedClientIndex \u003d i;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        name.setText(client.getName().toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        phone.setText(client.getPhone().toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        email.setText(client.getEmail().toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        country.setText(client.getCountry().getCountryName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        contractExpiryDate.setText(\"Expiry: \" + client.getContractExpiryDate().displayValue);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        noteTitle.setText(\"Notes\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Platform.runLater(() -\u003e updateClientNotesDisplay(client.getClientNotesAsList()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        drawPaneBorder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Static factory for use in GUI testing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @return WidgetViewBox"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static WidgetViewBox init() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return new WidgetViewBox(FXCollections.emptyObservableList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Sets a default view for the view box."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void initDefault() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        //TODO: Some better information"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textClock \u003d new TextClock(name);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        country.setText(Locale.getDefault().getDisplayCountry());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        textClock.play();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Updates the displayed notes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param clientNotes The client notes to display."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void updateClientNotesDisplay(List\u003cNote\u003e clientNotes) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        clearChildren();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int noteIdx \u003d 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Note note : clientNotes) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            NoteListCard noteListCard \u003d new NoteListCard(note, noteIdx++);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            clientNoteListView.getChildren().add(noteListCard.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Per fn name."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void clearChildren() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        clientNoteListView.getChildren().clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!(other instanceof WidgetViewBox)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client other1 \u003d ((WidgetViewBox) other).displayedClient;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return displayedClient.equals(other1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void drawPaneBorder() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        clientNoteScrollPane.setStyle(\"-fx-border-color: #FF3333; -fx-border-radius: 5; -fx-border-width: 2;\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        clientNoteListView.setPadding(new Insets(5, 5, 5, 10));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 121,
      "qwoprocks": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WidgetViewOption.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the display option for the Widget View."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class WidgetViewOption {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String CLIENT \u003d \"CLIENT\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String COUNTRY_NOTE \u003d \"COUNTRY_NOTE\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String NONE \u003d \"NONE\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final boolean isClient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final boolean isCountryNote;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a WidgetViewOption."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isClient True if displaying client view."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isCountryNote True if displaying country notes view."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param country The country of the country notes to view."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private WidgetViewOption(boolean isClient, boolean isCountryNote, Country country) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assert !(isClient \u0026\u0026 isCountryNote) : \"isClient and isCountryNote cannot be both true\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.isClient \u003d isClient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.isCountryNote \u003d isCountryNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Generates a client widget option that represents intent to view client."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A client widget option that represents intent to view client."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static WidgetViewOption generateClientWidgetOption() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new WidgetViewOption(true, false, Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Generates a country note widget option that represents intent to view country notes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A country note widget option that represents intent to view country notes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static WidgetViewOption generateCountryNoteWidgetOption(Country country) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new WidgetViewOption(false, true, country);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Generates a null widget option."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A null widget option."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static WidgetViewOption generateNullWidgetOption() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new WidgetViewOption(false, false, Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns whether UI should display client view."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return True if UI should display client view."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean isClient() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return isClient;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns whether UI should display country notes view."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return True if UI should display country notes view."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean isCountryNote() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return isCountryNote;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Returns the country of the country notes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The country of the country notes."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (isClient) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return CLIENT;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } else if (isCountryNote) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return COUNTRY_NOTE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 98
    }
  },
  {
    "path": "src/main/resources/view/ClientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003cVBox fx:id\u003d\"clientFields\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label, bold\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \u003cLabel fx:id\u003d\"country\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$country\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \u003cLabel fx:id\u003d\"timezone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timezone\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "qwoprocks": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/ClientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  \u003cListView fx:id\u003d\"clientListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/CountryNoteListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003cVBox fx:id\u003d\"countryNoteListContainer\" prefWidth\u003d\"337.0\" styleClass\u003d\"widget-pane\" alignment\u003d\"TOP_CENTER\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" spacing\u003d\"15\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "   \u003cLabel fx:id\u003d\"header\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"46.0\" styleClass\u003d\"widget_header\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "   \u003cScrollPane fx:id\u003d\"countryNoteScrollPane\" VBox.vgrow\u003d\"SOMETIMES\" prefWidth\u003d\"337.0\" hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "               fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      \u003cVBox fx:id\u003d\"countryNoteListView\" VBox.vgrow\u003d\"ALWAYS\" spacing\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "   \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 14
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/*MAKESHIFT DARKTHEME*/"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -BACKGROUND: #393939; /*DARK GREY*/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -PANE_BACKGROUND: #000000; /*BLACK*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -PRIMARY_COLOUR: #FF3333; /*RED*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -PRIMARY_TEXT: white; /*WHITE*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -ACCENT: transparent; /*NO ACCENT*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -TERTIARY: #010012; /*DARK NAVY*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ".root * {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-font-family: \u0027Arial\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    background-color: -BACKGROUND; /* Used in the default.html file */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-control-inner-background: -BACKGROUND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-background: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ".scroll-pane .scroll-bar .decrement-arrow, .scroll-pane .scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ".scroll-pane .scroll-bar .decrement-button, .scroll-pane .scroll-bar .increment-button {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-pref-height: 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ".scroll-pane.scroll-bar:vertical {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-scale-x: 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-border-radius: 30;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-padding: 0 5 0 15;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ".list-view.scroll-bar:vertical {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-scale-x: 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-padding: 10 10 10 10;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-background-color: -PRIMARY_COLOUR;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#noteContent {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-fill: -PRIMARY_TEXT; /*#noteContent is a \u003cText\u003e, thus we need to use this -fx-fill instead of -fx-text-fill*/"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-color: derive(-ACCENT, 20%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ".widget_header {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ".widget_div {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ".widget_text {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ".bold {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-font-weight: 700;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ".widget-pane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     -fx-background-radius: 20;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     -fx-padding: 15 20 20 15;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ".notes .content{"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     -fx-border-color: -BACKGROUND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     -fx-padding: 10;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PRIMARY_COLOUR;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#resultDisplayWrapper {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-padding: 10 0 10 15;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "#resultDisplay .scroll-pane {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-hbar-policy: NEVER;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ".result-display.scroll-pane {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ".result-display .scroll-pane .viewport{"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ".result-display .scroll-pane .content{"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-border-color: -BACKGROUND;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PRIMARY_COLOUR;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PRIMARY_COLOUR;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-color: #FFBD59;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-radius: 30, 30 ,30 ,30;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-background-radius: 30, 30, 30, 30;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-background-color: derive(-PANE_BACKGROUND, 40%);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "  -fx-background-color: #FFBD59;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-color: #FFBD59, #FFBD59;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-radius: 30, 30, 30, 30;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-background-color: #010112;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-background-color: #010112;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-background-color: #010112;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PRIMARY_COLOUR;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: derive(-PANE_BACKGROUND, 50%);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /*-fx-background-color: transparent;*/"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-background-radius: 30, 30;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-color: #e3e3e3;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-radius: 30, 30;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "#clientList .content {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "#clientList .list-cell:even {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "#clientList .list-cell:odd {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "#clientListPanelPlaceholder .content {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "#clientListView {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "#clientListView .scroll-bar .thumb {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -BACKGROUND;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#filterField, #clientListPanel, #clientWebpage {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#helpContent #commonCommands {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-font-family: \"Consolas\";"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-text-fill: -PRIMARY_TEXT;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-border-color: #DDDDDD;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-border-width: 1pt;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#helpContent #helpTitle {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "#helpContent #userGuideUrl {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "#viewbox {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    -fx-border-radius: 30, 30;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background-color: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "#countryNotesScrollPane {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    -fx-background: -PANE_BACKGROUND;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 58,
      "raysonkoh": 4,
      "tankangliang": 79,
      "qwoprocks": 56,
      "-": 275
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help [Press Esc to close]\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cVBox fx:id\u003d\"helpContent\" alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003cLabel fx:id\u003d\"helpTitle\" styleClass\u003d\"label-bright\" text\u003d\"Label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \u003cLabel fx:id\u003d\"commonCommands\" maxWidth\u003d\"Infinity\" text\u003d\"Label\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cLabel fx:id\u003d\"userGuideMessage\" styleClass\u003d\"label-bright\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cHyperlink fx:id\u003d\"userGuideUrl\" styleClass\u003d\"text-field\" text\u003d\"Hyperlink\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003c/Hyperlink\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 6,
      "qwoprocks": 29,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "         title\u003d\"Travelling BusinessMan\" minWidth\u003d\"800\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cImage url\u003d\"@/images/TBM.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" styleClass\u003d\"menubar\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cMenu fx:id\u003d\"file\" mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"exit\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    \u003cMenu fx:id\u003d\"help\" mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                           minHeight\u003d\"80\" prefHeight\u003d\"100\" maxHeight\u003d\"120\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "          \u003cVBox styleClass\u003d\"pane-with-border\" prefHeight\u003d\"340\" minWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cStackPane fx:id\u003d\"widgetPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "          \u003cVBox fx:id\u003d\"clientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"350\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 17,
      "rtshkmr": 1,
      "tankangliang": 1,
      "qwoprocks": 6,
      "-": 44
    }
  },
  {
    "path": "src/main/resources/view/NoteListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003cVBox fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003cHBox spacing\u003d\"1\" alignment\u003d\"CENTER_LEFT\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003cTextFlow VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        \u003cText fx:id\u003d\"noteContent\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 24
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "\u003cStackPane fx:id\u003d\"resultDisplayWrapper\" styleClass\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            text\u003d\"Waiting for command...\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/WidgetViewBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003cStackPane prefHeight\u003d\"365.0\" prefWidth\u003d\"337.0\" styleClass\u003d\"widget-pane\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003cVBox fx:id\u003d\"viewBox\" prefHeight\u003d\"301.0\" prefWidth\u003d\"337.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cStackPane prefHeight\u003d\"45.0\" prefWidth\u003d\"337.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" prefHeight\u003d\"46.0\" prefWidth\u003d\"280.0\" styleClass\u003d\"widget_header\" text\u003d\"name\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cStackPane prefHeight\u003d\"35.0\" prefWidth\u003d\"337.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cLabel fx:id\u003d\"country\" prefHeight\u003d\"17.0\" prefWidth\u003d\"290.0\" styleClass\u003d\"widget_div\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cStackPane prefHeight\u003d\"35.0\" prefWidth\u003d\"337.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cLabel fx:id\u003d\"email\" prefHeight\u003d\"17.0\" prefWidth\u003d\"290.0\" styleClass\u003d\"widget_text\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cStackPane prefHeight\u003d\"35.0\" prefWidth\u003d\"337.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cLabel fx:id\u003d\"phone\" prefHeight\u003d\"17.0\" prefWidth\u003d\"289.0\" styleClass\u003d\"widget_text\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cStackPane prefHeight\u003d\"35.0\" prefWidth\u003d\"337.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cLabel fx:id\u003d\"contractExpiryDate\" prefHeight\u003d\"17.0\" prefWidth\u003d\"289.0\" styleClass\u003d\"widget_text\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cStackPane prefHeight\u003d\"45.0\" prefWidth\u003d\"337.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cStackPane prefHeight\u003d\"30.0\" prefWidth\u003d\"337.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        \u003cInsets topRightBottomLeft\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                        \u003cLabel fx:id\u003d\"noteTitle\" alignment\u003d\"CENTER\" prefHeight\u003d\"15.0\" prefWidth\u003d\"249.0\" styleClass\u003d\"widget_header\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"clientNoteScrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" prefWidth\u003d\"337.0\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u003cVBox fx:id\u003d\"clientNoteListView\" spacing\u003d\"20.0\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 42
    }
  },
  {
    "path": "src/test/data/JsonSerializableTbmManagerTest/duplicateClientTbmManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"country\": \"SG\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"timezone\": \"GMT+8\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"contractExpiryDate\": \"10-9-2020\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"country\": \"SG\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"timezone\": \"GMT+8\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \"contractExpiryDate\": \"10-9-2020\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \"notes\": []"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "tankangliang": 5,
      "qwoprocks": 2,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableTbmManagerTest/invalidClientTbmManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \"notes\": []"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "qwoprocks": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableTbmManagerTest/typicalClientsTbmManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  \"_comment\": \"TbmManager save file which contains the same Client values as in TypicalClients#getTypicalTbmManager()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"country\": \"SG\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"timezone\": \"GMT+8\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"contractExpiryDate\": \"1-4-2021\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"clientNotes\": [ {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"contents\": \"lives in a pineapple\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"countryCode\": \"NULL_CC\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"tags\": [\"godLike\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"contents\": \"secret to the best krabby patty is in the J.U.I.C.E.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"countryCode\": \"NULL_CC\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"tags\": [\"seduction\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"98765432\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"johnd@example.com\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"country\": \"SG\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"timezone\": \"GMT+8\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "      \"contractExpiryDate\": \"3-12-2022\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"clientNotes\": [ {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"contents\": \"his son is the devil\u0027s incarnate\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"countryCode\": \"NULL_CC\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"tags\": [\"turnOff\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"contents\": \"snores a lot\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"countryCode\": \"NULL_CC\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          \"tags\": [\"turnOff\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"95352563\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"heinz@example.com\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"wall street\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"country\": \"US\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"timezone\": \"GMT-4\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"contractExpiryDate\": \"30-1-2022\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"87652533\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"cornelia@example.com\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"10th street\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"country\": \"SG\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"timezone\": \"GMT+8\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"contractExpiryDate\": \"28-2-2021\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Elle Meyer\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482224\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"werner@example.com\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"michegan ave\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"country\": \"GB\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"timezone\": \"GMT+1\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"contractExpiryDate\": \"10-10-2024\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Fiona Kunz\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482427\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"lydia@example.com\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"little tokyo\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"country\": \"JP\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"timezone\": \"GMT+9\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"contractExpiryDate\": \"9-11-2022\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"George Best\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482442\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"anna@example.com\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"country\": \"US\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"timezone\": \"GMT-4\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "      \"contractExpiryDate\": \"2-8-2021\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "  \"notes\": [ {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"contents\": \"lives in a pineapple\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"countryCode\": \"NULL_CC\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"tags\": [\"godLike\"]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"contents\": \"secret to the best krabby patty is in the J.U.I.C.E.\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"countryCode\": \"NULL_CC\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"tags\": [\"seduction\"]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"contents\": \"his son is the devil\u0027s incarnate\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"countryCode\": \"NULL_CC\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"tags\": [\"turnOff\"]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"contents\": \"snores a lot\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"countryCode\": \"NULL_CC\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "      \"tags\": [\"turnOff\"]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 50,
      "tankangliang": 18,
      "qwoprocks": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/data/JsonTbmManagerStorageTest/invalidAndValidClientTbmManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \"name\": \"Valid Client\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"country\": \"SG\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"timezone\": \"GMT+8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \"name\": \"Client With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"country\": \"SG\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"timezone\": \"GMT+8\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \"notes\": []"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "tankangliang": 6,
      "qwoprocks": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonTbmManagerStorageTest/invalidClientTbmManager.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    \"name\": \"Client with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"country\": \"SG\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \"timezone\": \"GMT+8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \"notes\": []"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "tankangliang": 3,
      "qwoprocks": 2,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  \"tbmManagerFilePath\" : \"tbmManager.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "  \"tbmManagerFilePath\" : \"tbmManager.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.awt.GraphicsEnvironment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Acknowledgements:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/tree/master/src/test/java/guitests\"\u003eSource\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 500;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final boolean isHeadlessMode \u003d GraphicsEnvironment.isHeadless();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 112,
      "qwoprocks": 3
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ClientCardHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String COUNTRY_FIELD_ID \u003d \"#country\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String TIMEZONE_FIELD_ID \u003d \"#timezone\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label countryLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label timezoneLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for handler."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param cardNode"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ClientCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        countryLabel \u003d getChildNode(COUNTRY_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        timezoneLabel \u003d getChildNode(TIMEZONE_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getCountry() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return countryLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getTimezone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return timezoneLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns true if this handle contains {@code client}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean equals(Client client) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getName().equals(client.getName().fullName)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u0026\u0026 getAddress().equals(client.getAddress().value)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u0026\u0026 getPhone().equals(client.getPhone().value)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u0026\u0026 getEmail().equals(client.getEmail().value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 79,
      "tankangliang": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ClientListPanelHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientListPanelHandle extends NodeHandle\u003cListView\u003cClient\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String CLIENT_LIST_VIEW_ID \u003d \"#clientListView\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ClientListPanelHandle(ListView\u003cClient\u003e clientListPanelNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(clientListPanelNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void navigateToCard(Client client) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!getRootNode().getItems().contains(client)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new IllegalArgumentException(\"Client does not exist.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            getRootNode().scrollTo(client);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the client card handle of a client associated with the {@code index} in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ClientCardHandle getClientCardHandle(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .map(ClientCardHandle::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .filter(handle -\u003e handle.equals(getClient(index)))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Client getClient(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 80
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for handler."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param commandBoxNode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 48
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CountryNoteListPanelHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides a handle for {@code CountryNoteListPanel} containing the list of {@code NoteListCard}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class CountryNoteListPanelHandle extends NodeHandle\u003cListView\u003cCountryNote\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    //TODO: This class looks like it is needed for testing but is not being used?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String COUNTRY_NOTE_LIST_VIEW_ID \u003d \"#countryNoteListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String COUNTRY_NOTE_CARD_CONTAINER_ID \u003d \"#countryNoteContainer\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public CountryNoteListPanelHandle(ListView\u003cCountryNote\u003e countryNoteListNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(countryNoteListNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the client card handle of a client associated with the {@code index} in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public NoteListCardHandle getCountryNoteCardHandle(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .map(NoteListCardHandle::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .filter(handle -\u003e handle.equals(getCountryNote(index)))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private CountryNote getCountryNote(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return guiRobot.lookup(COUNTRY_NOTE_CARD_CONTAINER_ID).queryAll();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 52,
      "qwoprocks": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HelpWindowHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class HelpWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String HELP_WINDOW_TITLE \u003d \"Help [Press Esc to close]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String USERGUIDE_URL_ID \u003d \"#userGuideUrl\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public HelpWindowHandle(Stage helpWindowStage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(helpWindowStage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getUgUrl() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new GuiRobot().lookup(USERGUIDE_URL_ID).queryLabeled().getText();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Clicks on the copy url button on the {@code HelpWindow}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void clickOnCopyUrlButton() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.clickOn(\"#copyButton\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Difference between this method and the other is the above method find the node straight from the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * stage and immediately tries to clicks it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * This one looks up the node with the given id and tries to query it as a button first before clicking it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void accessCopyUrlButton() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        * I am including this method here since my IDEA does not pickup the coverage for the test on the method"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        * copyUrl of the help window. Two tests are need to display a full coverage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        * */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Button copyButton \u003d guiRobot.lookup(\"#copyButton\").queryButton();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.clickOn(copyButton);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 52
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String MENU_BAR_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 23
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String MAIN_WINDOW_TITLE \u003d \"Travelling BusinessMan\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final ClientListPanelHandle clientListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for the handle."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param stage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        clientListPanel \u003d new ClientListPanelHandle(getChildNode(ClientListPanelHandle.CLIENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ClientListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return clientListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return new GuiRobot().isWindowShown(MAIN_WINDOW_TITLE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 56
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NodeHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides access to a node in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public abstract class NodeHandle\u003cT extends Node\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final T rootNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected NodeHandle(T rootNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.rootNode \u003d requireNonNull(rootNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected T getRootNode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return rootNode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected \u003cQ extends Node\u003e Q getChildNode(String query) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Clicks on the root node (i.e. itself)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void click() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.clickOn(rootNode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 44
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NoteListCardHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides a handler for {@code NoteListCard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class NoteListCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String NOTE_ID_LABEL_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String NOTE_CONTENT_TEXT_ID \u003d \"#noteContent\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Label noteId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Text noteContent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Constructor for handler."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * @param noteListCard Node to handle."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public NoteListCardHandle(Node noteListCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        super(noteListCard);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        noteId \u003d getChildNode(NOTE_ID_LABEL_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        noteContent \u003d getChildNode(NOTE_CONTENT_TEXT_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public String getNoteContent() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return noteContent.getText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public String getNoteId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return noteId.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns true if this handle contains {@code client}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public boolean equals(Note note) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return getNoteContent().equals(note.getNoteContent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 1,
      "qwoprocks": 43
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public ResultDisplayHandle(TextArea resultDisplayNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Labeled saveLocationNode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for handler."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param statusBarFooterNode"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 36
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WidgetViewBoxHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides a handler to the widget view box."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetViewBoxHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String COUNTRY_FIELD_ID \u003d \"#country\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String CONTRACT_EXPIRY_DATE_FIELD_ID \u003d \"#contractExpiryDate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label countryLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Label contractExpiryDateLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Constructor for handler."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param widgetNode"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public WidgetViewBoxHandle(Node widgetNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        super(widgetNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        countryLabel \u003d getChildNode(COUNTRY_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        contractExpiryDateLabel \u003d getChildNode(CONTRACT_EXPIRY_DATE_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns true if this handle contains a {@code client}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public boolean equals(Client client) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return nameLabel.getText().equals(client.getName().toString())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u0026\u0026 phoneLabel.getText().equals(client.getPhone().toString())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u0026\u0026 emailLabel.getText().equals(client.getEmail().toString())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u0026\u0026 countryLabel.getText().equals(client.getCountry().getCountryName())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                \u0026\u0026 contractExpiryDateLabel.getText().equals(\"Expiry: \" + client.getContractExpiryDate().displayValue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 48
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/NodeNotFoundException.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Signals that the node cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class NodeNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/StageNotFoundException.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Signals that the stage cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class StageNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getConfigPath_returnsSetConfigPath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expected.getConfigPath(), Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_basicTests() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(expected);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_sameConfigPath_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        AppParameters other \u003d new AppParameters();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        other.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(expected.equals(other));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_differentConfigPath_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        AppParameters other \u003d new AppParameters();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        other.setConfigPath(Paths.get(\"config2.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(expected.equals(other));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 33,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getLogLevel_returnsSetLogLevel() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        defaultConfig.setLogLevel(Level.WARNING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Level.WARNING, defaultConfig.getLogLevel());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getUserPrefsFilePath_returnsSetUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        defaultConfig.setUserPrefsFilePath(Paths.get(\"prefs.json\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Paths.get(\"prefs.json\"), defaultConfig.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(defaultConfigAsString, defaultConfig.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(defaultConfig);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different log -\u003e not equal"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Config differentLog \u003d new Config();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        differentLog.setLogLevel(Level.WARNING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(defaultConfig.equals(differentLog));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different path -\u003e not equal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Config differentPath \u003d new Config();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        differentPath.setUserPrefsFilePath(Paths.get(\"different path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(defaultConfig.equals(differentPath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(defaultConfig.hashCode(), defaultConfig.hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different log -\u003e not equal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Config differentLog \u003d new Config();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        differentLog.setLogLevel(Level.WARNING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(defaultConfig.hashCode(), differentLog.hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different path -\u003e not equal"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Config differentPath \u003d new Config();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        differentPath.setUserPrefsFilePath(Paths.get(\"different path\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(defaultConfig.hashCode(), differentPath.hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 24,
      "qwoprocks": 21,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/GuiSettingsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class GuiSettingsTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final GuiSettings defaultGuiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        double windowWidth \u003d 200.0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        double windowHeight \u003d 100.0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int xPosition \u003d 50;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int yPosition \u003d 10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Point windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(windowWidth, windowHeight, xPosition, yPosition);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(guiSettings.getWindowWidth(), windowWidth);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(guiSettings.getWindowHeight(), windowHeight);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(guiSettings.getWindowCoordinates(), windowCoordinates);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String defaultGuiSettingsAsString \u003d \"Width : 740.0\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + \"Height : 600.0\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + \"Position : null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(defaultGuiSettings.toString(), defaultGuiSettingsAsString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(defaultGuiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(defaultGuiSettings.equals(new GuiSettings()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1.0, 1.0, 5, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(guiSettings.equals(guiSettings));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(defaultGuiSettings.equals(guiSettings));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(defaultGuiSettings.hashCode(), defaultGuiSettings.hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(defaultGuiSettings.hashCode(), new GuiSettings().hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1.0, 1.0, 5, 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(defaultGuiSettings.hashCode(), guiSettings.hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 11,
      "qwoprocks": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // Tests not early access vs early access on same version number"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        another \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(new Version(1, 1, 20, false));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 5,
      "qwoprocks": 4,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final Index fifthClientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(fifthClientIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(fifthClientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 7,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", () -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 4,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTRACT_EXPIRY_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.storage.JsonTbmManagerStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private StorageManager storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonTbmManagerStorage tbmManagerStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new JsonTbmManagerStorage(temporaryFolder.resolve(\"tbmManager.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        storage \u003d new StorageManager(tbmManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        model.setWidgetClient(AMY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor_nullArgs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LogicManager(model, null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LogicManager(null, storage));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getMethods_returnCorrectObjects() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(logic.getTbmManager(), model.getTbmManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(logic.getTbmManagerFilePath(), model.getTbmManagerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(logic.getFilteredClientList(), model.getSortedFilteredClientList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(logic.getWidgetClient(), model.getWidgetClient());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(logic.getGuiSettings(), model.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(15.0, 10.0, 90, 100);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(logic.getGuiSettings(), guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(logic.getGuiSettings(), guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String deleteCommand \u003d \"client delete 9\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // Setup LogicManager with JsonTbmManagerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonTbmManagerStorage tbmManagerStorage \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new JsonTbmManagerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTbmManager.json\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(tbmManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String addCommand \u003d ClientAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + ADDRESS_DESC_AMY + COUNTRY_DESC_AMY + TIMEZONE_DESC_AMY + CONTRACT_EXPIRY_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.addClient(expectedClient);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static class JsonTbmManagerIoExceptionThrowingStub extends JsonTbmManagerStorage {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        private JsonTbmManagerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public void saveTbmManager(ReadOnlyTbmManager tbmManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 2,
      "tankangliang": 21,
      "qwoprocks": 36,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void execute_emptyTbmManager_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void execute_nonEmptyTbmManager_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedModel.setTbmManager(new TbmManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ClientAddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_newClient_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.addClient(validClient);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(new ClientAddCommand(validClient), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                String.format(ClientAddCommand.MESSAGE_SUCCESS, validClient), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client clientInList \u003d model.getTbmManager().getClientList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(new ClientAddCommand(clientInList), model, ClientAddCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 9,
      "qwoprocks": 6,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final Index HUGE_OUT_OF_INDEX_VALUE \u003d Index.fromOneBased(10000000);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientAddCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CommandResult commandResult \u003d new ClientAddCommand(validClient).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(String.format(ClientAddCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Arrays.asList(validClient), modelStub.clientsAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand addCommand \u003d new ClientAddCommand(validClient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithClient(validClient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ClientAddCommand.MESSAGE_DUPLICATE_CLIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_invalidClientIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"dummyNote\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteAddCommand failingCommand \u003d new ClientNoteAddCommand(HUGE_OUT_OF_INDEX_VALUE, clientNote);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e failingCommand.execute(new ModelManager()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_duplicateClientNote_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"dummyNote\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        client.addClientNote(clientNote);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.addClient(client);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.addClientNote(client, clientNote);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteAddCommand command \u003d new ClientNoteAddCommand(Index.fromOneBased(1), clientNote);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(modelManager));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand addAliceCommand \u003d new ClientAddCommand(alice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand addBobCommand \u003d new ClientAddCommand(bob);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(addAliceCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same client -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand addAliceCommandCopy \u003d new ClientAddCommand(alice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        public void updateTagNoteMapWithNote(Set\u003cTag\u003e newTags, Note note) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public Path getTbmManagerFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public void setTbmManagerFilePath(Path tbmManagerFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public void setTbmManager(ReadOnlyTbmManager tbmManager) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public ReadOnlyTbmManager getTbmManager() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public void setWidgetClient(Client client) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new AssertionError(\"this method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public Client getWidgetClient() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public boolean hasCountryNote(CountryNote countryNote) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        public boolean hasClientNote(Client client, Note clientNote) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public void addCountryNote(CountryNote countryNote) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public void setCountryNote(CountryNote oldCountryNote, CountryNote newCountryNote) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        public void addClientNote(Client client, Note clientNote) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        public void deleteClientNote(Client associatedClient, Note noteToDelete) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        public void editClientNote(Client associatedClient, Note noteToEdit, Note newNote) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public void deleteCountryNote(CountryNote countryNoteToDelete) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public ObservableList\u003cClient\u003e getSortedFilteredClientList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public ObservableList\u003cNote\u003e getSortedFilteredClientNotesList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void updateSortedFilteredClientList(Comparator\u003cClient\u003e comparator) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public ObservableList\u003cCountryNote\u003e getSortedFilteredCountryNoteList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public void updateFilteredCountryNoteList(Predicate\u003cCountryNote\u003e predicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        public void initialiseTagNoteMap() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public TagNoteMap getTagNoteMap() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * A Model stub that contains a single client."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private class ModelStubWithClient extends ModelStub {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private final Client client;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ModelStubWithClient(Client client) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            this.client \u003d client;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return this.client.isSameClient(client);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * A Model stub that always accept the client being added."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private class ModelStubAcceptingClientAdded extends ModelStub {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final ArrayList\u003cClient\u003e clientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return clientsAdded.stream().anyMatch(client::isSameClient);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            clientsAdded.add(client);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        public ReadOnlyTbmManager getTbmManager() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return new TbmManager();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 8,
      "rtshkmr": 59,
      "raysonkoh": 31,
      "tankangliang": 18,
      "qwoprocks": 55,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * {@code ClientDeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientDeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToDelete \u003d model.getSortedFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand clientDeleteCommand \u003d new ClientDeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientDeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand clientDeleteCommand \u003d new ClientDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(clientDeleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToDelete \u003d model.getSortedFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand clientDeleteCommand \u003d new ClientDeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientDeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showNoClient(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTbmManager().getClientList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand clientDeleteCommand \u003d new ClientDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(clientDeleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand deleteFirstCommand \u003d new ClientDeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand deleteSecondCommand \u003d new ClientDeleteCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(deleteFirstCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand deleteFirstCommandCopy \u003d new ClientDeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void showNoClient(Model model) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(p -\u003e false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(model.getSortedFilteredClientList().isEmpty());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 20,
      "qwoprocks": 20,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * and unit tests for ClientEditCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientEditCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor_nullArgs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientEditCommand(INDEX_FIRST_CLIENT, null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientEditCommand(null, descriptor));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TbmManager(model.getTbmManager()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.setClient(model.getSortedFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index indexLastClient \u003d Index.fromOneBased(model.getSortedFilteredClientList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client lastClient \u003d model.getSortedFilteredClientList().get(indexLastClient.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client editedClient \u003d clientInList.withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(indexLastClient, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TbmManager(model.getTbmManager()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.setClient(lastClient, editedClient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT, new EditClientDescriptor());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client editedClient \u003d model.getSortedFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TbmManager(model.getTbmManager()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientInFilteredList \u003d model.getSortedFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d new ClientBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TbmManager(model.getTbmManager()), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.setClient(model.getSortedFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client firstClient \u003d model.getSortedFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(firstClient).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand editCommand \u003d new ClientEditCommand(INDEX_SECOND_CLIENT, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(editCommand, model, ClientEditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClientFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // edit client in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client clientInList \u003d model.getTbmManager().getClientList().get(INDEX_SECOND_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new EditClientDescriptorBuilder(clientInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(clientEditCommand, model, ClientEditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_invalidClientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand editCommand \u003d new ClientEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_invalidClientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTbmManager().getClientList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandFailure(clientEditCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // Editing a client\u0027s non-note related fields should retain existing notes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_changeClientName_preserveExistingClientNotes() throws CommandException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"this note needs to persist after client gets edited\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tags.add(new Tag(\"niceTag\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        clientNote.setTags(tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index indexLastClient \u003d Index.fromOneBased(model.getSortedFilteredClientList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client lastClient \u003d model.getSortedFilteredClientList().get(indexLastClient.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.addClientNote(lastClient, clientNote);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(model.getSortedFilteredClientNotesList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientBuilder clientInList \u003d new ClientBuilder(lastClient); // rename to currentClient"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        editedClient.addClientNote(clientNote);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientEditCommand clientEditCommand \u003d new ClientEditCommand(indexLastClient, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMessage \u003d String.format(ClientEditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TbmManager(model.getTbmManager()), new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedModel.setClient(lastClient, editedClient);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertCommandSuccess(clientEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        clientEditCommand.execute(model);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(model.hasClient(editedClient));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final ClientEditCommand standardCommand \u003d new ClientEditCommand(INDEX_FIRST_CLIENT, DESC_AMY);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(standardCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand.EditClientDescriptor copyDescriptor \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand commandWithSameValues \u003d new ClientEditCommand(INDEX_FIRST_CLIENT, copyDescriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClientEditCommand(INDEX_SECOND_CLIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(standardCommand.equals(new ClientEditCommand(INDEX_FIRST_CLIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 43,
      "tankangliang": 41,
      "qwoprocks": 44,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ClientFindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientFindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand findFirstCommand \u003d new ClientFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand findSecondCommand \u003d new ClientFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(findFirstCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand findFirstCommandCopy \u003d new ClientFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_zeroKeywords_noClientFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand command \u003d new ClientFindCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getSortedFilteredClientList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_multipleKeywords_multipleClientsFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand command \u003d new ClientFindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getSortedFilteredClientList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 8,
      "qwoprocks": 21,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientNoteAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ClientNoteAddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_1 \u003d \"client note content 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_2 \u003d \"client note content 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_3 \u003d \"client note content 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor_nullArgs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index idx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Note clientNote \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientNoteAddCommand(idx, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientNoteAddCommand(null, clientNote));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_duplicateClientNote_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index idx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.addClient(client);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.addClientNote(client, clientNote);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteAddCommand clientNoteAddCommand \u003d new ClientNoteAddCommand(idx, clientNote);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e clientNoteAddCommand.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_notDuplicateClientNote_successfullyAddsClientNote() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            model.addClient(client);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Index idx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Note clientNote2 \u003d new Note(NOTE_CONTENT_2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Note clientNote3 \u003d new Note(NOTE_CONTENT_3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            assertFalse(model.hasClientNote(client, clientNote2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ClientNoteAddCommand clientNoteAddCommand2 \u003d new ClientNoteAddCommand(idx, clientNote2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ClientNoteAddCommand clientNoteAddCommand3 \u003d new ClientNoteAddCommand(idx, clientNote3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            clientNoteAddCommand2.execute(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            clientNoteAddCommand3.execute(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            assertTrue(model.hasClientNote(client, clientNote2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            assertTrue(model.hasClientNote(client, clientNote3));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index idx1 \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index idx2 \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Note clientNote1 \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Note clientNote2 \u003d new Note(NOTE_CONTENT_2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteAddCommand addCommand \u003d new ClientNoteAddCommand(idx1, clientNote1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteAddCommand addCommandDifferentNote \u003d new ClientNoteAddCommand(idx1, clientNote2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteAddCommand addCommandDifferentIndex \u003d new ClientNoteAddCommand(idx2, clientNote1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(addCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteAddCommand addCommandCopy \u003d new ClientNoteAddCommand(idx1, clientNote1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(addCommand.equals(addCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different note or index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(addCommand.equals(addCommandDifferentNote));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(addCommand.equals(addCommandDifferentIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 60,
      "tankangliang": 2,
      "qwoprocks": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientNoteDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "class ClientNoteDeleteCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_1 \u003d \"client note content 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_2 \u003d \"client note content 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_validClientIdxValidNoteIdx_generatesClientNoteDeleteCommandSuccessfully() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index client2Idx \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index clientNoteIdx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote1 \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote2 \u003d new Note(NOTE_CONTENT_2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Model newModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client1 \u003d new ClientBuilder().withName(\"client1\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client2 \u003d new ClientBuilder().withName(\"client2\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newModel.addClient(client1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newModel.addClient(client2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newModel.addClientNote(client2, clientNote1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newModel.addClientNote(client2, clientNote2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client1Copy \u003d new ClientBuilder().withName(\"client1\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client2Copy \u003d new ClientBuilder().withName(\"client2\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.addClient(client1Copy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedModel.addClient(client2Copy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedModel.addClientNote(client2Copy, clientNote2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(ClientNoteDeleteCommand.MESSAGE_DELETED_CLIENT_NOTE_SUCCESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteDeleteCommand clientNoteDeleteCommand \u003d new ClientNoteDeleteCommand(client2Idx, clientNoteIdx);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertCommandSuccess(clientNoteDeleteCommand, newModel, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_invalidClientIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index invalidClientIndex \u003d Index.fromOneBased(model.getSortedFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand clientNoteDeleteCommand \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                new ClientNoteDeleteCommand(invalidClientIndex, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e clientNoteDeleteCommand.execute(model));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_validClientIndexInvalidClientNoteIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index idx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        model.addClientNote(client, clientNote);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index invalidClientNoteIndex \u003d Index.fromOneBased(model.getSortedFilteredClientNotesList().size() + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand clientNoteDeleteCommand \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                new ClientNoteDeleteCommand(idx, invalidClientNoteIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e clientNoteDeleteCommand.execute(model));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand clientNoteDeleteCommand1 \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                new ClientNoteDeleteCommand(Index.fromOneBased(1), Index.fromOneBased(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand clientNoteDeleteCommand1Duplicate \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                new ClientNoteDeleteCommand(Index.fromOneBased(1), Index.fromOneBased(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand clientNoteDeleteCommandClient2 \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                new ClientNoteDeleteCommand(Index.fromOneBased(2), Index.fromOneBased(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand clientNoteDeleteCommand1ClientNote2 \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                new ClientNoteDeleteCommand(Index.fromOneBased(1), Index.fromOneBased(2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(clientNoteDeleteCommand1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(clientNoteDeleteCommand1.equals(clientNoteDeleteCommand1Duplicate));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // diff values (diff client) --\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(clientNoteDeleteCommand1.equals(clientNoteDeleteCommandClient2));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // diff values (diff client note) --\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(clientNoteDeleteCommand1.equals(clientNoteDeleteCommand1ClientNote2));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 73,
      "tankangliang": 2,
      "qwoprocks": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientNoteEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "class ClientNoteEditCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_1 \u003d \"client note content 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_2 \u003d \"client note content 2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_validClientIdxValidNoteIdx_generatesClientNoteEditCommandSuccessfully() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index clientIdx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index clientNoteIdx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote1 \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote2 \u003d new Note(NOTE_CONTENT_2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note newEditNote \u003d new Note(\"dummy note to edit previous note\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client1 \u003d new ClientBuilder().withName(\"client1\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.addClient(client1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.addClientNote(client1, clientNote1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.addClientNote(client1, clientNote2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client1Copy \u003d new ClientBuilder().withName(\"client1\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedModel.addClient(client1Copy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedModel.addClientNote(client1Copy, newEditNote);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedModel.addClientNote(client1Copy, clientNote2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(ClientNoteEditCommand.MESSAGE_EDIT_CLIENT_NOTE_SUCCESS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand clientNoteEditCommand \u003d new ClientNoteEditCommand(clientIdx, clientNoteIdx, newEditNote);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertCommandSuccess(clientNoteEditCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // todo: add test to show untagged tag removal (in future commit) behaviour is verified by json file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute_validClientIdxValidNoteIdxNewTaggedNote_preservesTagHistory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Tag oldTag \u003d new Tag(\"historicalTag\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Tag newTag \u003d new Tag(\"newTag\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newTagSet.add(newTag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e tagHistory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tagHistory.add(oldTag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e expectedTags \u003d new HashSet\u003c\u003e(tagHistory); // expected to preserve old tags and have new tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedTags.add(newTag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note oldClientNote \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        oldClientNote.setTags(tagHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote2 \u003d new Note(NOTE_CONTENT_2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note newClientNote \u003d new Note(\"dummy note to edit previous note\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newClientNote.setTags(newTagSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client1 \u003d new ClientBuilder().withName(\"client1\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.addClient(client1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.addClientNote(client1, oldClientNote);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.addClientNote(client1, clientNote2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client1Copy \u003d new ClientBuilder().withName(\"client1\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedModel.addClient(client1Copy);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newClientNote.setTags(expectedTags); // containing old and new tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedModel.addClientNote(client1Copy, newClientNote);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedModel.addClientNote(client1Copy, clientNote2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index clientIdx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index clientNoteIdx \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(ClientNoteEditCommand.MESSAGE_EDIT_CLIENT_NOTE_SUCCESS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand clientNoteEditCommand \u003d new ClientNoteEditCommand(clientIdx,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNoteIdx, newClientNote);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertCommandSuccess(clientNoteEditCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note testNote \u003d new Note(\"need for speed\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand clientNoteEditCommand1 \u003d new ClientNoteEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Index.fromOneBased(1), testNote);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand clientNoteEditCommand1Duplicate \u003d new ClientNoteEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Index.fromOneBased(1), testNote);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand clientNoteEditCommandClient2 \u003d new ClientNoteEditCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Index.fromOneBased(1), testNote);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand clientNoteEditCommand1ClientNote2 \u003d new ClientNoteEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Index.fromOneBased(2), testNote);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(clientNoteEditCommand1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(clientNoteEditCommand1.equals(clientNoteEditCommand1Duplicate));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // diff values (diff client) --\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(clientNoteEditCommand1.equals(clientNoteEditCommandClient2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // diff values (diff client note) --\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(clientNoteEditCommand1.equals(clientNoteEditCommand1ClientNote2));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 107,
      "qwoprocks": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClientViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientViewCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToView \u003d model.getSortedFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand command \u003d new ClientViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String expectedMsg \u003d String.format(ClientViewCommand.MESSAGE_VIEW_CLIENT_SUCCESS, clientToView.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        expectedModel.setWidgetClient(clientToView);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCommandSuccess(command, model, expectedMsg, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand clientViewCommand \u003d new ClientViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCommandFailure(clientViewCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client clientToView \u003d model.getSortedFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand clientViewCommand \u003d new ClientViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String expectedMessage \u003d String.format(ClientViewCommand.MESSAGE_VIEW_CLIENT_SUCCESS, clientToView.getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        showClientAtIndex(expectedModel, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        expectedModel.setWidgetClient(clientToView);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCommandSuccess(clientViewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTbmManager().getClientList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand clientViewCommand \u003d new ClientViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCommandFailure(clientViewCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand viewFirstCommand \u003d new ClientViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand viewSecondCommand \u003d new ClientViewCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(viewFirstCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientViewCommand viewFirstCommandCopy \u003d new ClientViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 79,
      "tankangliang": 4,
      "qwoprocks": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.ui.WidgetViewOption;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CommandResult defaultCommandResult \u003d new CommandResult(\"test\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(defaultCommandResult.isShowHelp());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(defaultCommandResult.isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"NONE\", defaultCommandResult.getWidgetViewOptionAsString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(defaultCommandResult.shouldDisplayClient());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(defaultCommandResult.shouldDisplayCountryNote());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CommandResult customCommandResult \u003d new CommandResult(\"test\", true, false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                WidgetViewOption.generateClientWidgetOption());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(customCommandResult.isShowHelp());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(customCommandResult.isExit());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"CLIENT\", customCommandResult.getWidgetViewOptionAsString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(customCommandResult.getFeedbackToUser(), \"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(customCommandResult.shouldDisplayClient());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(customCommandResult.shouldDisplayCountryNote());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        customCommandResult \u003d new CommandResult(\"test\", true, false,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                WidgetViewOption.generateCountryNoteWidgetOption(Country.NULL_COUNTRY));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"COUNTRY_NOTE\", customCommandResult.getWidgetViewOptionAsString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(customCommandResult.shouldDisplayClient());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(customCommandResult.shouldDisplayCountryNote());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getCountry_nullCountry_returnExpected() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"test\", false, false,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                WidgetViewOption.generateCountryNoteWidgetOption(Country.NULL_COUNTRY));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(Country.NULL_COUNTRY, commandResult.getCountry());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getCountry_validCountry_returnExpected() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"test\", false, false,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                WidgetViewOption.generateCountryNoteWidgetOption(new Country(\"SG\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(new Country(\"SG\"), commandResult.getCountry());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(commandResult);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 31,
      "qwoprocks": 18,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTRACT_EXPIRY_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_COUNTRY_AMY \u003d \"SG\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_COUNTRY_BOB \u003d \"MY\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_TIMEZONE_AMY \u003d \"GMT+8\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_TIMEZONE_BOB \u003d \"GMT+7\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String VALID_CONTRACT_EXPIRY_DATE_AMY \u003d \"1-1-2022\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String VALID_CONTRACT_EXPIRY_DATE_BOB \u003d \"13-12-2021\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_LAST_MODIFIED_INSTANT_AMY \u003d \"2020-10-10T00:00:00.000000Z\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String VALID_LAST_MODIFIED_INSTANT_BOB \u003d \"2020-11-11T00:00:00.000000Z\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COUNTRY_DESC_AMY \u003d \" \" + PREFIX_COUNTRY + VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String COUNTRY_DESC_BOB \u003d \" \" + PREFIX_COUNTRY + VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String TIMEZONE_DESC_AMY \u003d \" \" + PREFIX_TIMEZONE + VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String TIMEZONE_DESC_BOB \u003d \" \" + PREFIX_TIMEZONE + VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String CONTRACT_EXPIRY_DATE_DESC_AMY \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \" \" + PREFIX_CONTRACT_EXPIRY_DATE + VALID_CONTRACT_EXPIRY_DATE_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String CONTRACT_EXPIRY_DATE_DESC_BOB \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \" \" + PREFIX_CONTRACT_EXPIRY_DATE + VALID_CONTRACT_EXPIRY_DATE_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String INVALID_COUNTRY_DESC \u003d \" \" + PREFIX_COUNTRY + \"ZZ\"; // not a valid country code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String INVALID_TIMEZONE_DESC \u003d \" \" + PREFIX_TIMEZONE + \"GT+8\"; // not a valid timezone input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String INVALID_CONTRACT_EXPIRY_DATE_DESC \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            \" \" + PREFIX_CONTRACT_EXPIRY_DATE + \"31-2-2020\"; // 31st of Feb is not a valid date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final ClientEditCommand.EditClientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final ClientEditCommand.EditClientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        DESC_AMY \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCountry(VALID_COUNTRY_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withTimezone(VALID_TIMEZONE_AMY).withContractExpiryDate(VALID_CONTRACT_EXPIRY_DATE_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        DESC_BOB \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withCountry(VALID_COUNTRY_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withTimezone(VALID_TIMEZONE_BOB).withContractExpiryDate(VALID_CONTRACT_EXPIRY_DATE_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * - the address book, filtered client list and selected client in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager expectedTbmManager \u003d new TbmManager(actualModel.getTbmManager());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getSortedFilteredClientList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedTbmManager, actualModel.getTbmManager());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getSortedFilteredClientList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the client at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static void showClientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getSortedFilteredClientList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d model.getSortedFilteredClientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(1, model.getSortedFilteredClientList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 1,
      "tankangliang": 26,
      "qwoprocks": 24,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CountryFilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryFilterCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute_validCountries_matchesExpectedFilterResult() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e initialClientList \u003d new ArrayList\u003c\u003e(model.getSortedFilteredClientList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    country);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryFilterCommand countryFilterCommand \u003d new CountryFilterCommand(pred);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryFilterCommand.execute(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            List\u003cClient\u003e expectedFilteredClientList \u003d initialClientList.stream().filter(pred)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (Client client : model.getSortedFilteredClientList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                assertEquals(expectedFilteredClientList.get(i), client);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_basicTests() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                country);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommand \u003d new CountryFilterCommand(pred);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(countryFilterCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_notCountryFilterCommand_returnFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                country);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommand \u003d new CountryFilterCommand(pred);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Object obj \u003d new Object();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(countryFilterCommand, obj);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffPred_returnFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country countryFirst \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country countrySecond \u003d new Country(\"MY\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predFirst \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryFirst);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predSecond \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countrySecond);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommandFirst \u003d new CountryFilterCommand(predFirst);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommandSecond \u003d new CountryFilterCommand(predSecond);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(countryFilterCommandFirst, countryFilterCommandSecond);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(countryFilterCommandSecond, countryFilterCommandFirst);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_samePred_returnFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country countryFirst \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country countrySecond \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predFirst \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryFirst);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predSecond \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countrySecond);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommandFirst \u003d new CountryFilterCommand(predFirst);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryFilterCommand countryFilterCommandSecond \u003d new CountryFilterCommand(predSecond);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(countryFilterCommandFirst, countryFilterCommandSecond);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(countryFilterCommandSecond, countryFilterCommandFirst);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 89,
      "tankangliang": 1,
      "qwoprocks": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CountryNoteAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteAddCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute_duplicateCountryNote_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote genericNote \u003d new CountryNote(\"generic note\", country);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        model.addCountryNote(genericNote);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommand \u003d new CountryNoteAddCommand(genericNote);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e countryNoteAddCommand.execute(model));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute_notDuplicateCountryNote_successfullyAddsCountryNote() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNote genericNote \u003d new CountryNote(\"generic note\", country);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(model.hasCountryNote(genericNote));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteAddCommand countryNoteAddCommand \u003d new CountryNoteAddCommand(genericNote);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryNoteAddCommand.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(model.hasCountryNote(genericNote));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_basicTests() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommand \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(countryNoteAddCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountryDiffNote_returnFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommandFirst \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommandSecond \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic2\", new Country(\"MY\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteAddCommandFirst.equals(countryNoteAddCommandSecond));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteAddCommandSecond.equals(countryNoteAddCommandFirst));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountrySameNote_returnFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommandFirst \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommandSecond \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic\", new Country(\"MY\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteAddCommandFirst.equals(countryNoteAddCommandSecond));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteAddCommandSecond.equals(countryNoteAddCommandFirst));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountryDiffNote_returnFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommandFirst \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommandSecond \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic2\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteAddCommandFirst.equals(countryNoteAddCommandSecond));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNoteAddCommandSecond.equals(countryNoteAddCommandFirst));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountrySameNote_returnTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommandFirst \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteAddCommand countryNoteAddCommandSecond \u003d new CountryNoteAddCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"generic\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(countryNoteAddCommandFirst.equals(countryNoteAddCommandSecond));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(countryNoteAddCommandSecond.equals(countryNoteAddCommandFirst));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 86,
      "tankangliang": 1,
      "qwoprocks": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CountryNoteDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteDeleteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final CountryNote genericCountryNote \u003d new CountryNote(\"generic note\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_basicTests() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteDeleteCommand countryNoteDeleteCommand \u003d new CountryNoteDeleteCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(countryNoteDeleteCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameIndex_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteDeleteCommand first \u003d new CountryNoteDeleteCommand(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteDeleteCommand second \u003d new CountryNoteDeleteCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(first, second);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffIndex_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Index index2 \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteDeleteCommand first \u003d new CountryNoteDeleteCommand(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteDeleteCommand second \u003d new CountryNoteDeleteCommand(index2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void execute_invalidCountryNoteIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index invalidCountryNoteIndex \u003d Index.fromOneBased(model.getSortedFilteredCountryNoteList().size() + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteDeleteCommand countryNoteDeleteCommand \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new CountryNoteDeleteCommand(invalidCountryNoteIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e countryNoteDeleteCommand.execute(model));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteDeleteCommand countryNoteDeleteCommand \u003d new CountryNoteDeleteCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e countryNoteDeleteCommand.execute(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void execute_validCountryNoteIndex_successfullyDeletesNote() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        model.addCountryNote(genericCountryNote);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteDeleteCommand countryNoteDeleteCommand \u003d new CountryNoteDeleteCommand(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(CountryNoteDeleteCommand.MESSAGE_SUCCESS, index.getOneBased(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                genericCountryNote);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(countryNoteDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 27,
      "tankangliang": 42,
      "qwoprocks": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CountryNoteEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteEditCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_allEqual_equal() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand expected \u003d new CountryNoteEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"abc\", Country.NULL_COUNTRY));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand actual \u003d new CountryNoteEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"abc\", Country.NULL_COUNTRY));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffIndex_notEqual() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand expected \u003d new CountryNoteEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"abc\", Country.NULL_COUNTRY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand actual \u003d new CountryNoteEditCommand(Index.fromOneBased(2),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"abc\", Country.NULL_COUNTRY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(expected, actual);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountryNote_notEqual() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand expected \u003d new CountryNoteEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"abcd\", Country.NULL_COUNTRY));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand actual \u003d new CountryNoteEditCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(\"abc\", Country.NULL_COUNTRY));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(expected, actual);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameTags_equal() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand expected \u003d new CountryNoteEditCommand(Index.fromOneBased(1), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand actual \u003d new CountryNoteEditCommand(Index.fromOneBased(1), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffTags_equal() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tags.add(new Tag(\"a\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand expected \u003d new CountryNoteEditCommand(Index.fromOneBased(1), tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand actual \u003d new CountryNoteEditCommand(Index.fromOneBased(1), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CountryNoteViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteViewCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Model getDefaultModel() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNote countryNote1 \u003d new CountryNote(\"country note 1\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNote countryNote2 \u003d new CountryNote(\"country note 2\", new Country(\"MY\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNote countryNote3 \u003d new CountryNote(\"country note 3\", new Country(\"US\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        model.addCountryNote(countryNote1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        model.addCountryNote(countryNote2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        model.addCountryNote(countryNote3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_basicTests() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteViewCommand countryNoteViewCommand \u003d new CountryNoteViewCommand(new Country(\"SG\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(countryNoteViewCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountry_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteViewCommand first \u003d new CountryNoteViewCommand(country);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteViewCommand second \u003d new CountryNoteViewCommand(country);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(first, second);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountry_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country2 \u003d new Country(\"MY\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteViewCommand first \u003d new CountryNoteViewCommand(country);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteViewCommand second \u003d new CountryNoteViewCommand(country2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(first, second);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteViewCommand countryNoteViewCommand \u003d new CountryNoteViewCommand(Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e countryNoteViewCommand.execute(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void execute_nullCountry_returnsAllCountryNotes() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteViewCommand countryNoteViewCommand \u003d new CountryNoteViewCommand(Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d getDefaultModel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedModel.updateFilteredCountryNoteList(countryNote -\u003e true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(CountryNoteViewCommand.MESSAGE_SUCCESS, \"all countries\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(countryNoteViewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void execute_validCountry_returnsFilteredCountryNotes() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country validCountry \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteViewCommand countryNoteViewCommand \u003d new CountryNoteViewCommand(validCountry);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Model expectedModel \u003d getDefaultModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedModel.updateFilteredCountryNoteList(countryNote -\u003e countryNote.getCountry().equals(validCountry));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(CountryNoteViewCommand.MESSAGE_SUCCESS, validCountry);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCommandSuccess(countryNoteViewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 28,
      "tankangliang": 55,
      "qwoprocks": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class EditClientDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptorWithSameValues \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "qwoprocks": 12,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 4,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 3,
      "qwoprocks": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SuggestCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.SuggestionType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class SuggestCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        model \u003d new ModelManager(getTypicalTbmManager(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SuggestCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SuggestCommand(Collections.emptySet()).execute(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_emptySet_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e beforeClientList \u003d new ArrayList\u003c\u003e(model.getSortedFilteredClientList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(Collections.emptySet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(SuggestCommand.MESSAGE_SUGGEST_SUCCESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(suggestCommand.execute(model), expectedResult);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e afterClientList \u003d new ArrayList\u003c\u003e(model.getSortedFilteredClientList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(beforeClientList, afterClientList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void execute_filterPredicates_correctClientList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Model newModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client1 \u003d new ClientBuilder().withName(\"client1\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withContractExpiryDate(ContractExpiryDate.NULL_DATE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client2 \u003d new ClientBuilder().withName(\"client2\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withContractExpiryDate(\"2-3-2020\").withLastModifiedInstant(\"2020-10-11T15:18:35.617617Z\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client3 \u003d new ClientBuilder().withName(\"client3\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withContractExpiryDate(\"1-3-2020\").withLastModifiedInstant(\"2020-10-10T16:18:35.617617Z\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client4 \u003d new ClientBuilder().withName(\"client4\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withContractExpiryDate(\"10-3-2020\").withLastModifiedInstant(\"2020-10-11T15:18:35.617617Z\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newModel.addClient(client1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newModel.addClient(client2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newModel.addClient(client3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newModel.addClient(client4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(newModel.getSortedFilteredClientList().size(), 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cSuggestionType\u003e suggestionTypes \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        suggestionTypes.add(new SuggestionType(SuggestionType.BY_CONTRACT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestCommand suggestCommand1 \u003d new SuggestCommand(suggestionTypes);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(SuggestCommand.MESSAGE_SUGGEST_SUCCESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(suggestCommand1.execute(newModel), expectedResult);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(newModel.getSortedFilteredClientList().size(), 3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(newModel.getSortedFilteredClientList().get(0), client3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        suggestionTypes \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        suggestionTypes.add(new SuggestionType(SuggestionType.BY_FREQUENCY));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        suggestionTypes.add(new SuggestionType(SuggestionType.BY_CONTRACT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestCommand suggestCommand2 \u003d new SuggestCommand(suggestionTypes);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(suggestCommand2.execute(newModel), expectedResult);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(newModel.getSortedFilteredClientList().size(), 3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(newModel.getSortedFilteredClientList().get(0), client2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cSuggestionType\u003e suggestionTypeSet \u003d Set.of(new SuggestionType(SuggestionType.BY_FREQUENCY),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new SuggestionType(SuggestionType.BY_CONTRACT), new SuggestionType(SuggestionType.BY_AVAILABLE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestCommand suggestCommand \u003d new SuggestCommand(suggestionTypeSet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(suggestCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestCommand suggestCommandCopy \u003d new SuggestCommand(suggestionTypeSet);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(suggestCommand.equals(suggestCommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different suggestion type set -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(suggestCommand.equals(new SuggestCommand(Collections.emptySet())));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "qwoprocks": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(aaa);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 7,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTRACT_EXPIRY_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTRACT_EXPIRY_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTRACT_EXPIRY_DATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COUNTRY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMEZONE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTRACT_EXPIRY_DATE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.CountryCodeVerifier;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientAddCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ClientAddCommandParser parser \u003d new ClientAddCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // multiple countries - last country accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_AMY + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // multiple timezones - last timezone accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_AMY + TIMEZONE_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // multiple contract expiry dates - last date accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_AMY + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientAddCommand(expectedClient));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // no contract expiry date"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client expectedClient2 \u003d new ClientBuilder(AMY).withContractExpiryDate(ContractExpiryDate.NULL_DATE).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                        + COUNTRY_DESC_AMY + TIMEZONE_DESC_AMY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new ClientAddCommand(expectedClient2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // missing country prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + VALID_COUNTRY_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // missing timezone prefix"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + VALID_TIMEZONE_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + VALID_COUNTRY_BOB + VALID_TIMEZONE_BOB + VALID_CONTRACT_EXPIRY_DATE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // invalid country"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + INVALID_COUNTRY_DESC + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                CountryCodeVerifier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // invalid timezone"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + INVALID_TIMEZONE_DESC + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                Timezone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // invalid contract expiry date"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + INVALID_CONTRACT_EXPIRY_DATE_DESC,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                ContractExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + INVALID_COUNTRY_DESC + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_BOB + COUNTRY_DESC_BOB + TIMEZONE_DESC_BOB + CONTRACT_EXPIRY_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "tankangliang": 65,
      "qwoprocks": 36,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * outside of the ClientDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * same path through the ClientDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ClientDeleteCommandParser parser \u003d new ClientDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ClientDeleteCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ClientDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 7,
      "qwoprocks": 3,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COUNTRY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMEZONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.CountryCodeVerifier;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientEditCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ClientEditCommandParser parser \u003d new ClientEditCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"1\", ClientEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COUNTRY_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                CountryCodeVerifier.MESSAGE_CONSTRAINTS); // invalid country"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIMEZONE_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                Timezone.MESSAGE_CONSTRAINTS); // invalid timezone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + VALID_PHONE_AMY + INVALID_COUNTRY_DESC + VALID_TIMEZONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + COUNTRY_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + ADDRESS_DESC_AMY + NAME_DESC_AMY + TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withCountry(VALID_COUNTRY_AMY).withTimezone(VALID_TIMEZONE_AMY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withTimezone(VALID_TIMEZONE_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // country"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withCountry(VALID_COUNTRY_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // timezone"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TIMEZONE_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withTimezone(VALID_TIMEZONE_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + EMAIL_DESC_BOB + COUNTRY_DESC_AMY + COUNTRY_DESC_BOB + TIMEZONE_DESC_AMY + TIMEZONE_DESC_BOB;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withCountry(VALID_COUNTRY_BOB)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withTimezone(VALID_TIMEZONE_BOB).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_COUNTRY_DESC + COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        expectedCommand \u003d new ClientEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "tankangliang": 52,
      "qwoprocks": 23,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ClientFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ClientFindCommandParser parser \u003d new ClientFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ClientFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand expectedClientFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedClientFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedClientFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 8,
      "qwoprocks": 2,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientNoteAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "class ClientNoteAddCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String INDEX_STRING \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_STRING \u003d \"yay this be a note\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String NO_INDEX_NO_NOTE \u003d \"just an empty string here\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String HAS_INDEX_NO_NOTE \u003d INDEX_STRING + \" nope no note here\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String HAS_INDEX_HAS_NOTE \u003d INDEX_STRING + SPACE + PREFIX_NOTE + NOTE_STRING;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String EXPECTED_PARSE_FAILURE_MESSAGE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientNoteAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final TagNoteMap tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ClientNoteAddCommandParser parser \u003d new ClientNoteAddCommandParser(tagNoteMap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Tag testTag \u003d new Tag(\"testTag\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Set\u003cTag\u003e untaggedTags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(testTag);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        untaggedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        untaggedTags.add(Tag.UNTAGGED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientNoteAddCommandParser(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parser.parse(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parse_noIndexNoNote_parseFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, NO_INDEX_NO_NOTE, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parse_hasIndexNoNote_parseFailure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, HAS_INDEX_NO_NOTE, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parse_hasIndexHasNote_equalsExpected() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Note expectedClientNote \u003d new Note(NOTE_STRING);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedClientNote.setTags(untaggedTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteAddCommand expected \u003d new ClientNoteAddCommand(Index.fromOneBased(1), expectedClientNote);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertParseSuccess(parser, HAS_INDEX_HAS_NOTE, expected);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void parse_invalidFormatNoNote_parseFailure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String userInput \u003d INDEX_STRING + SPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteAddCommandParser parser \u003d new ClientNoteAddCommandParser(tagNoteMap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, userInput, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void parse_invalidFormatNoIndex_parseFailure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String userInput \u003d PREFIX_NOTE + NOTE_STRING;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteAddCommandParser parser \u003d new ClientNoteAddCommandParser(tagNoteMap);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, userInput, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    void parse_invalidIndex_parseFailure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String userInput \u003d \"invalid index \" + PREFIX_NOTE + NOTE_STRING;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientNoteAddCommandParser parser \u003d new ClientNoteAddCommandParser(tagNoteMap);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertParseFailure(parser, userInput, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void parse_validFormatUntaggedNote_parseSuccess() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note expectedClientNote \u003d new Note(NOTE_STRING);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedClientNote.setTags(untaggedTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteAddCommand expectedCommand \u003d new ClientNoteAddCommand(Index.fromOneBased(1), expectedClientNote);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String userInput \u003d INDEX_STRING + SPACE + PREFIX_NOTE + NOTE_STRING;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void parse_validFormatTaggedNote_parseSuccess() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note expectedClientNote \u003d new Note(NOTE_STRING);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedClientNote.setTags(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteAddCommand expectedCommand \u003d new ClientNoteAddCommand(Index.fromOneBased(1), expectedClientNote);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String userInput \u003d INDEX_STRING + SPACE + PREFIX_TAG"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                + SPACE + testTag.tagName + SPACE + PREFIX_NOTE + NOTE_STRING;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    void parse_hasTagPrefixNoTagString_parseFailure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note expectedClientNote \u003d new Note(NOTE_STRING);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedClientNote.setTags(untaggedTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String userInput \u003d INDEX_STRING + SPACE + PREFIX_TAG + SPACE + PREFIX_NOTE + NOTE_STRING;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientNoteAddCommandParser parser \u003d new ClientNoteAddCommandParser(tagNoteMap);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, userInput, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 38,
      "tankangliang": 7,
      "qwoprocks": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientNoteDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "class ClientNoteDeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String EXPECTED_PARSE_FAILURE_MESSAGE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientNoteDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final ClientNoteDeleteCommandParser parser \u003d new ClientNoteDeleteCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_emptyRestOfCommand_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertParseFailure(parser, userInput, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_inCorrectlyDelimitedRestOfCommand_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String userInput1 \u003d \"11\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertParseFailure(parser, userInput1, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_correctUserInput_doesNotThrowExceptionParsesSuccessfully() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index expectedClientIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index expectedClientNoteIndex \u003d Index.fromOneBased(12);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                new ClientNoteDeleteCommand(expectedClientIndex, expectedClientNoteIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String restOfCommand \u003d \"1 12\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertParseSuccess(parser, restOfCommand, expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 40,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientNoteEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "class ClientNoteEditCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String CLIENT_INDEX_STRING \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final Index CLIENT_INDEX \u003d Index.fromOneBased(Integer.parseInt(CLIENT_INDEX_STRING));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_INDEX_STRING \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final Index NOTE_INDEX \u003d Index.fromOneBased(Integer.parseInt(NOTE_INDEX_STRING));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_STRING \u003d \"yay this be a note\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NO_CLIENT_INDEX_NO_NOTE_INDEX_NO_NOTE \u003d \"just an empty string here\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String HAS_CLIENT_INDEX_HAS_NOTE_INDEX_NO_NOTE \u003d CLIENT_INDEX_STRING + SPACE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + NOTE_INDEX_STRING + SPACE + \" nope no note here\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String HAS_CLIENT_INDEX_HAS_NOTE_INDEX_HAS_NOTE \u003d CLIENT_INDEX_STRING + SPACE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + NOTE_INDEX_STRING + SPACE + PREFIX_NOTE + NOTE_STRING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String EXPECTED_PARSE_FAILURE_MESSAGE \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ClientNoteEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final TagNoteMap tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final ClientNoteEditCommandParser parser \u003d new ClientNoteEditCommandParser(tagNoteMap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Tag testTag \u003d new Tag(\"testTag\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Set\u003cTag\u003e untaggedTags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tags.add(testTag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        untaggedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        untaggedTags.add(Tag.UNTAGGED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientNoteEditCommandParser(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parser.parse(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_noClientIndexNoNoteIndexNoNote_parseFailure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertParseFailure(parser, NO_CLIENT_INDEX_NO_NOTE_INDEX_NO_NOTE, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_hasClientIndexHasNoteIndexNoNote_parseFailure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertParseFailure(parser, HAS_CLIENT_INDEX_HAS_NOTE_INDEX_NO_NOTE, EXPECTED_PARSE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_hasClientIndexHasNoteIndexHasNote_equalsExpected() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note expectedClientNote \u003d new Note(NOTE_STRING);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedClientNote.setTags(untaggedTags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand expected \u003d new ClientNoteEditCommand(CLIENT_INDEX, NOTE_INDEX, expectedClientNote);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertParseSuccess(parser, HAS_CLIENT_INDEX_HAS_NOTE_INDEX_HAS_NOTE, expected);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parse_validFormatTaggedNote_parseSuccess() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note expectedClientNote \u003d new Note(NOTE_STRING);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedClientNote.setTags(tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand expectedCommand \u003d new ClientNoteEditCommand(CLIENT_INDEX, NOTE_INDEX, expectedClientNote);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String userInput \u003d CLIENT_INDEX_STRING + SPACE + NOTE_INDEX_STRING + SPACE + PREFIX_TAG"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + SPACE + testTag.tagName + SPACE + PREFIX_NOTE + NOTE_STRING;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /* todo: future tests:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *  1. exception throwing tests"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 89,
      "qwoprocks": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClientViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final ClientViewCommandParser parser \u003d new ClientViewCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ClientViewCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                ClientViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 25,
      "qwoprocks": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CountryFilterCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryFilterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryFilterCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryFilterCommandParser parser \u003d new CountryFilterCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_noCountry_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_withPreamable_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string c/SG\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" 123 c/MY\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_invalidCountryCode_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/ZZ\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/123\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/a b\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/c/ \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validCountryCode_returnsExpected() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryFilterCommand expected \u003d new CountryFilterCommand("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    new ClientCountryMatchesInputCountryPredicate(new Country(\"SG\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(expected, parser.parse(\" c/SG\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 47,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CountryNoteAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteAddCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final TagNoteMap tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryNoteAddCommandParser parser \u003d new CountryNoteAddCommandParser(tagNoteMap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_noCountryNoNote_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_withPreamable_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string c/SG nt/abc t/a\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string c/SG nt/ t/\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string c/ nt/abc t\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string c/ nt/ t//\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" 123 c/SG nt/abc\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" 123 c/SG nt/\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" 123 c/ nt/abc\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" 123 c/ nt/\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_hasCountryNoNote_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/SG random string\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/SG t/random string\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/SG t/\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_invalidCountryHasNote_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/Z Z nt/random string\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/Z Z t/a nt/random string\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/RUS t/a nt/random string\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/R t/a nt/random string\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validCountryNoNote_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/MY \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/MY t/a\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" c/MY nt/ t/a\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" nt/ c/MY t/a\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validCountryHasNoteNoUntagged_assertNotEquals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNote countryNote \u003d new CountryNote(\"random string\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteAddCommand wrongCommand \u003d new CountryNoteAddCommand(countryNote);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertNotEquals(wrongCommand, parser.parse(\" c/SG nt/random string\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validCountryHasNoteHasUntagged_equalsExpected() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNote countryNote \u003d new CountryNote(\"random string\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tags.add(Tag.UNTAGGED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryNote.setTags(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteAddCommand expected \u003d new CountryNoteAddCommand(countryNote);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(expected, parser.parse(\" c/SG nt/random string\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CountryNoteDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteDeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteDeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryNoteDeleteCommandParser parser \u003d new CountryNoteDeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_noIndex_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" random string\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" 2123 21string\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"   owej o23r \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validIndex_returnsExpected() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteDeleteCommand expected \u003d new CountryNoteDeleteCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteDeleteCommand actual \u003d parser.parse(\" 1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 33,
      "qwoprocks": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CountryNoteEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteEditCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String INVALID_COMMAND_ERROR \u003d \"Invalid command format! \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"country note edit: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Edits the country note at the given index in the last viewed country note list panel.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Parameters: INDEX (nt/NOTE_STRING ) (t/TAG)...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"Example: country note edit 1 nt/better government stability in recent months\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String INVALID_INDEX_ERROR \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String INVALID_TAG_ERROR \u003d \"Tags names should be alphanumeric \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"and have a maximum of 45 characters\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String INVALID_NOTE_ERROR \u003d \"Notes should not be blank\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final TagNoteMap tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final CountryNoteEditCommandParser parser \u003d new CountryNoteEditCommandParser(tagNoteMap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_withIndexWithNoteWithTag_returnsExpected() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote c \u003d new CountryNote(\"abc\", Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tags.add(new Tag(\"a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        c.setTags(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand expected \u003d new CountryNoteEditCommand(Index.fromOneBased(1), c);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseSuccess(parser, \" 1 nt/abc t/a\", expected);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_noIndexWithNoteNoTag_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseFailure(parser, \" nt/abc\", INVALID_COMMAND_ERROR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseFailure(parser, \" nt/y\", INVALID_COMMAND_ERROR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseFailure(parser, \" abc nt/abc\", INVALID_INDEX_ERROR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseFailure(parser, \" a 1 a nt/abc\", INVALID_INDEX_ERROR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_withIndexNoNoteNoTag_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseFailure(parser, \" 1  \", INVALID_COMMAND_ERROR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseFailure(parser, \" 1 t/\", INVALID_TAG_ERROR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseFailure(parser, \" 1 nt/\", INVALID_NOTE_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertParseFailure(parser, \" 1 nt/ t/\", INVALID_TAG_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CountryNoteViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteViewCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_invalidCountry_throwParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CountryNoteViewCommandParser().parse(\" c/\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CountryNoteViewCommandParser().parse(\" c/   \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CountryNoteViewCommandParser().parse(\" c/   12\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_noCountry_returnsExpected() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteViewCommand expected \u003d new CountryNoteViewCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteViewCommand actual \u003d new CountryNoteViewCommandParser().parse(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_withPreamble_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CountryNoteViewCommandParser().parse(\" abc\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CountryNoteViewCommandParser().parse(\" 12 32 2\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CountryNoteViewCommandParser().parse(\" a 2 3b\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parse_validCountry_returnsExpected() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteViewCommand expected \u003d new CountryNoteViewCommand(country);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNoteViewCommand actual \u003d new CountryNoteViewCommandParser().parse(\" c/SG\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            actual \u003d new CountryNoteViewCommandParser().parse(\" c/   SG\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MainParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUGGEST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientDeleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientFindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientNoteAddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteDeleteCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.commands.ClientNoteEditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.CountryFilterCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteAddCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.CountryNoteDeleteCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteEditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.logic.commands.CountryNoteViewCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.ClientCountryMatchesInputCountryPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.SuggestionType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientUtil;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class MainParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final TagNoteMap tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final MainParser parser \u003d new MainParser(tagNoteMap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientCommands_addClient() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d ClientUtil.getAddCommand(client);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientAddCommand command \u003d (ClientAddCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientAddCommand(client), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientCommands_editClient() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(client).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d ClientEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + ClientUtil.getEditClientDescriptorDetails(descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientEditCommand command \u003d (ClientEditCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientEditCommand(INDEX_FIRST_CLIENT, descriptor), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientCommands_deleteClient() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d ClientDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientDeleteCommand command \u003d (ClientDeleteCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientDeleteCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientCommands_findClient() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d ClientFindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + keywords.stream().collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientFindCommand command \u003d (ClientFindCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientFindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientCommands_viewClient() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d ClientViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientViewCommand command \u003d (ClientViewCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientViewCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientCommands_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"client\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"client \"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientCommands_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                parser.parseCommand(\"client unknownCommand\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                parser.parseCommand(\"client unknownCommand \"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountryCommands_countryFilter() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String countryString \u003d \"SG\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d CountryFilterCommand.COMMAND_WORD + \" \" + PREFIX_COUNTRY + countryString;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryFilterCommand command \u003d (CountryFilterCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final ClientCountryMatchesInputCountryPredicate predicate \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new ClientCountryMatchesInputCountryPredicate(new Country(countryString));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new CountryFilterCommand(predicate), command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountryCommands_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"country\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"country \"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountryCommands_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                parser.parseCommand(\"country unknownCommand\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                parser.parseCommand(\"country unknownCommand \"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountryNoteCommands_addCountryNote() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String countryString \u003d \"SG\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String noteString \u003d \"is hot\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d CountryNoteAddCommand.COMMAND_WORD + \" \" + PREFIX_COUNTRY + countryString"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + \" \" + PREFIX_NOTE + noteString;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tags.add(Tag.UNTAGGED);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote expected \u003d new CountryNote(noteString, new Country(countryString));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        expected.setTags(tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteAddCommand command \u003d (CountryNoteAddCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(new CountryNoteAddCommand(expected), command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountryNoteCommands_countryNoteView() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final String countryString \u003d \"SG\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final String commandString \u003d CountryNoteViewCommand.COMMAND_WORD + \" \" + PREFIX_COUNTRY + countryString;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteViewCommand command \u003d (CountryNoteViewCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(new CountryNoteViewCommand(new Country(countryString)), command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountryNoteCommands_countryNoteDelete() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d CountryNoteDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        CountryNoteDeleteCommand command \u003d (CountryNoteDeleteCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new CountryNoteDeleteCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseCountryNoteCommands_countryNoteEdit() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final String countryString \u003d \"SG\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final String noteString \u003d \"is hot\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        final String commandString \u003d CountryNoteEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                + \" \" + PREFIX_NOTE + noteString;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote expected \u003d new CountryNote(noteString, Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand command \u003d (CountryNoteEditCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNoteEditCommand expectedCmd \u003d new CountryNoteEditCommand(INDEX_FIRST_CLIENT, expected);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(expectedCmd, command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountryNoteCommands_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"country note\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"country note \"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountryNoteCommands_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                parser.parseCommand(\"country note unknownCommand\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                parser.parseCommand(\"country note unknownCommand \"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    //TODO: add tests when country commands are finalized"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parseClientNoteCommands_addValidClientNote() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String noteString \u003d \"likes cats\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d ClientNoteAddCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + \" \" + PREFIX_NOTE + noteString;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TagNoteMap tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Set\u003cTag\u003e tags \u003d tagNoteMap.getUniqueTags(Collections.emptyList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final Note note \u003d new Note(noteString);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        note.setTags(tags);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientNoteAddCommand command \u003d (ClientNoteAddCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new ClientNoteAddCommand(INDEX_FIRST_CLIENT, note), command);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parseClientNoteCommands_editValidClientNote() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        final String noteString \u003d \"likes cats\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        final String commandString \u003d ClientNoteEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" 1\" + \" \" + PREFIX_NOTE + noteString;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TagNoteMap tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e tags \u003d tagNoteMap.getUniqueTags(Collections.emptyList());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        final Note note \u003d new Note(noteString);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        note.setTags(tags);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteEditCommand command \u003d (ClientNoteEditCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(new ClientNoteEditCommand(INDEX_FIRST_CLIENT, Index.fromOneBased(1), note), command);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientNoteCommands_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"client note\"));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"client note \"));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseClientNoteCommands_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                parser.parseCommand(\"client note unknownCommand\"));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                parser.parseCommand(\"client note unknownCommand \"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parseClientNoteCommands_deleteClientNote_returnsTrue() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index validClientIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Index validClientNoteIndex \u003d Index.fromOneBased(12);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d ClientNoteDeleteCommand.COMMAND_WORD + \" \" + validClientIndex.getOneBased()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + \" \" + validClientNoteIndex.getOneBased();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ClientNoteDeleteCommand expectedCommand \u003d new ClientNoteDeleteCommand(validClientIndex, validClientNoteIndex);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientNoteDeleteCommand actualCommand \u003d (ClientNoteDeleteCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCommand_suggest() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        final String commandString \u003d SuggestCommand.COMMAND_WORD + \" \" + PREFIX_SUGGEST + SuggestionType.BY_AVAILABLE;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Set\u003cSuggestionType\u003e suggestionTypeSet \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        suggestionTypeSet.add(new SuggestionType(SuggestionType.BY_AVAILABLE));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        SuggestCommand command \u003d (SuggestCommand) parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new SuggestCommand(suggestionTypeSet), command);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 2,
      "rtshkmr": 28,
      "raysonkoh": 31,
      "tankangliang": 184,
      "qwoprocks": 11,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.SuggestionType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String INVALID_COUNTRY_CODE \u003d \"ZZ\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_TIMEZONE \u003d \"GT+8\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_NOTE_STRING \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_SUGGESTION_TYPE \u003d \"name\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String VALID_COUNTRY_CODE \u003d \"SG\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_TIMEZONE \u003d \"GMT+8\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_NOTE_STRING \u003d \"likes cats\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_SUGGESTION_TYPE_1 \u003d \"available\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_SUGGESTION_TYPE_2 \u003d \"frequency\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_SUGGESTION_TYPE_3 \u003d \"contract\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountry_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCountry((String) null));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountry_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCountry(INVALID_COUNTRY_CODE));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountry_validValueWithoutWhitespace_returnsCountry() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country expectedCountry \u003d new Country(VALID_COUNTRY_CODE);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedCountry, ParserUtil.parseCountry(VALID_COUNTRY_CODE));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseCountry_validValueWithWhitespace_returnsTrimmedCountry() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String countryWithWhitespace \u003d WHITESPACE + VALID_COUNTRY_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Country expectedCountry \u003d new Country(VALID_COUNTRY_CODE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedCountry, ParserUtil.parseCountry(countryWithWhitespace));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTimezone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTimezone((String) null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTimezone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTimezone(INVALID_TIMEZONE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTimezone_validValueWithoutWhitespace_returnsTimezone() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Timezone expectedTimezone \u003d new Timezone(VALID_TIMEZONE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedTimezone, ParserUtil.parseTimezone(VALID_TIMEZONE));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTimezone_validValueWithWhitespace_returnsTrimmedTimezone() throws Exception {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String timezoneWithWhitespace \u003d WHITESPACE + VALID_TIMEZONE + WHITESPACE;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Timezone expectedTimezone \u003d new Timezone(VALID_TIMEZONE);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedTimezone, ParserUtil.parseTimezone(timezoneWithWhitespace));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseNote_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNote((String) null));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseNote_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(INVALID_NOTE_STRING));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseNote_validValueWithoutWhitespace_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE_STRING);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(VALID_NOTE_STRING));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseNote_validValueWithWhitespace_returnsTrimmedNote() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String noteWithWhitespace \u003d WHITESPACE + VALID_NOTE_STRING + WHITESPACE;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE_STRING);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(noteWithWhitespace));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseSuggestionType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSuggestionType((String) null));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseSuggestionType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSuggestionType(INVALID_SUGGESTION_TYPE));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseSuggestionType_validValueWithoutWhitespace_returnsSuggestionType() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        SuggestionType expectedSuggestionType \u003d new SuggestionType(VALID_SUGGESTION_TYPE_1);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedSuggestionType, ParserUtil.parseSuggestionType(VALID_SUGGESTION_TYPE_1));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseSuggestionType_validValueWithWhitespace_returnsTrimmedSuggestionType() throws Exception {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String suggestionTypeWithWhitespace \u003d WHITESPACE + VALID_SUGGESTION_TYPE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        SuggestionType expectedSuggestionType \u003d new SuggestionType(VALID_SUGGESTION_TYPE_1);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedSuggestionType, ParserUtil.parseSuggestionType(suggestionTypeWithWhitespace));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseSuggestionTypes_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSuggestionTypes(null));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseSuggestionTypes_collectionWithInvalidSuggestionTypes_throwsParseException() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSuggestionTypes(Arrays.asList(VALID_SUGGESTION_TYPE_1,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                INVALID_SUGGESTION_TYPE)));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseSuggestionTypes_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(ParserUtil.parseSuggestionTypes(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseSuggestionTypes_collectionWithValidSuggestionTypes_returnsSuggestionTypeSet() throws Exception {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Set\u003cSuggestionType\u003e actualSuggestionTypeSet \u003d ParserUtil.parseSuggestionTypes(Arrays.asList("
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_SUGGESTION_TYPE_1, VALID_SUGGESTION_TYPE_2, VALID_SUGGESTION_TYPE_3));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Set\u003cSuggestionType\u003e expectedSuggestionTypeSet \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new SuggestionType(VALID_SUGGESTION_TYPE_1), new SuggestionType(VALID_SUGGESTION_TYPE_2),"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new SuggestionType((VALID_SUGGESTION_TYPE_3))));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedSuggestionTypeSet, actualSuggestionTypeSet);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parseContractExpiryDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseContractExpiryDate(null));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parseContractExpiryDate_blankString_returnsNullDate() throws ParseException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(ParserUtil.parseContractExpiryDate(\"\"), ContractExpiryDate.NULL_DATE);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(ParserUtil.parseContractExpiryDate(\"  \"), ContractExpiryDate.NULL_DATE);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parseContractExpiryDate_invalidDateString_throwsParseException() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseContractExpiryDate(\"2-2-100\"));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseContractExpiryDate(\"3/2/2020\"));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseContractExpiryDate(\"29/2/2021\"));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseContractExpiryDate(\"20/13/2022\"));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseContractExpiryDate(\"31/1/2025\"));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parseContractExpiryDate_validDateString_returns() throws ParseException {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String validDate1 \u003d \"2-3-2020\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String validDate2 \u003d \"30-10-20\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String minDate \u003d \"1-1-0000\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String maxDate \u003d \"31-12-9999\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(ParserUtil.parseContractExpiryDate(validDate1), new ContractExpiryDate(validDate1));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(ParserUtil.parseContractExpiryDate(validDate2), new ContractExpiryDate(validDate2));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(ParserUtil.parseContractExpiryDate(minDate), new ContractExpiryDate(minDate));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(ParserUtil.parseContractExpiryDate(maxDate), new ContractExpiryDate(maxDate));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 2,
      "raysonkoh": 10,
      "tankangliang": 123,
      "qwoprocks": 42,
      "-": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SuggestCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.SuggestionType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class SuggestCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final SuggestCommandParser parser \u003d new SuggestCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parse_validArgs_returnsSuggestCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cSuggestionType\u003e suggestionTypes \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        suggestionTypes.add(new SuggestionType(SuggestionType.BY_AVAILABLE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseSuccess(parser, \" by/available\", new SuggestCommand(suggestionTypes));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        suggestionTypes.add(new SuggestionType(SuggestionType.BY_CONTRACT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseSuccess(parser, \" by/available by/contract\", new SuggestCommand(suggestionTypes));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        /* TODO: Add this back if frequency gets a predicate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        suggestionTypes.add(new SuggestionType(SuggestionType.BY_FREQUENCY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseSuccess(parser, \" by/available by/contract by/frequency\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "               new SuggestCommand(suggestionTypes));*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, \" by/availability\", SuggestionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, \" by/\", SuggestionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertParseFailure(parser, \" available\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.SuggestionType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.TagNoteMap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.testutil.TbmManagerBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new TbmManager(), new TbmManager(modelManager.getTbmManager()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userPrefs.setTbmManagerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userPrefs.setTbmManagerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void setTbmManagerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTbmManagerFilePath(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void setTbmManagerFilePath_validPath_setsTbmManagerFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        modelManager.setTbmManagerFilePath(path);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(path, modelManager.getTbmManagerFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void deleteClient_deleteExistingClient_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client target \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.addClient(target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.deleteClient(target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(modelManager.hasClient(target));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hasClient_clientNotInTbmManager_returnsFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hasClient_clientInTbmManager_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(modelManager.hasClient(client));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.addClient(client);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(modelManager.hasClient(client));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addAndHasCountryNote_validCountry_updatesCorrectly() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote genericNote \u003d new CountryNote(\"generic note\", country);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(modelManager.hasCountryNote(genericNote));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.addCountryNote(genericNote);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(modelManager.hasCountryNote(genericNote));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getSortedFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getSortedFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void addAndHasClientNote_validSyntax_updatesCorrectly() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"this be a client note\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e modelManager.hasClientNote(client, clientNote));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.addClient(client);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.addClientNote(client, clientNote);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(modelManager.hasClientNote(client, clientNote));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void deleteClientNote_validSyntax_deletesSuccessfully() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager tbmManager \u003d new TbmManagerBuilder().withClient(client).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        modelManager \u003d new ModelManager(tbmManager, userPrefs);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"this be a client note\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.addClientNote(client, clientNote);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(modelManager.hasClientNote(client, clientNote));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.initialiseTagNoteMap();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        modelManager.deleteClientNote(client, clientNote);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(modelManager.hasClientNote(client, clientNote));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void getTagNoteMap_returnUninitialisedTagNoteMap_returnsTrue() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TagNoteMap expected \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(modelManager.getTagNoteMap().equals(expected));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager tbmManager \u003d new TbmManagerBuilder().withClient(ALICE).withClient(BENSON).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager differentTbmManager \u003d new TbmManager();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(modelManager);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        modelManager \u003d new ModelManager(tbmManager, userPrefs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tbmManager, userPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different tbmManager -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTbmManager, userPrefs)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        differentUserPrefs.setTbmManagerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tbmManager, differentUserPrefs)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManager.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tbmManager, userPrefs)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManager.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different sortedList -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        modelManagerCopy \u003d new ModelManager(tbmManager, userPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManagerCopy.updateSortedFilteredClientList((client1, client2) -\u003e 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different tagNoteMap -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        modelManagerCopy \u003d new ModelManager(tbmManager, userPrefs);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManagerCopy.addClientNote(new ClientBuilder().build(), new Note(\"client note\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void initializeTagNoteMap_validInputs_successful() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(new Tag(\"tagName\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note taggedNote \u003d new Note(\"jurong hill was a nice place\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        taggedNote.setTags(tags);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client aliceTagged \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        aliceTagged.addClientNote(taggedNote);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.modelManager.addClient(aliceTagged);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertDoesNotThrow(() -\u003e this.modelManager.initialiseTagNoteMap());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote_validCountryNote_addCountryNote() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(\"some\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(modelManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.addCountryNote(countryNote);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(modelManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void updateFilteredCountryNoteList_truePredicate_showAllCountryNotes() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int initialSize \u003d modelManager.getSortedFilteredCountryNoteList().size();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.updateFilteredCountryNoteList(countryNote -\u003e true);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(initialSize, modelManager.getSortedFilteredCountryNoteList().size());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void updateFilteredCountryNoteList_falsePredicate_showNoneCountryNotes() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.updateFilteredCountryNoteList(countryNote -\u003e false);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(0, modelManager.getSortedFilteredCountryNoteList().size());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void updateFilteredCountryNoteList_countryPredicate_showRelevantCountryNotes() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.addCountryNote(new CountryNote(\"random\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.updateFilteredCountryNoteList(countryNote -\u003e true);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int expect \u003d (int) modelManager.getSortedFilteredCountryNoteList()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .filter(countryNote -\u003e countryNote.getCountry().equals(new Country(\"SG\")))"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.updateFilteredCountryNoteList(countryNote -\u003e countryNote.getCountry().equals(new Country(\"SG\")));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expect, modelManager.getSortedFilteredCountryNoteList().size());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void deleteCountryNote_validCountryNote_updateCountryNoteList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.addCountryNote(new CountryNote(\"random\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        modelManager.updateFilteredCountryNoteList(countryNote -\u003e true);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        int initial \u003d modelManager.getSortedFilteredCountryNoteList().size();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManager.deleteCountryNote(modelManager.getSortedFilteredCountryNoteList().get(0));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(initial - 1, modelManager.getSortedFilteredCountryNoteList().size());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void updateSortedFilteredClientList_zeroComparator_sameOrderOfClients() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager tbmManager \u003d new TbmManagerBuilder().withClient(ALICE).withClient(BENSON).build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tbmManager, new UserPrefs());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManagerCopy.updateSortedFilteredClientList((client1, client2) -\u003e 0);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(modelManagerCopy, new ModelManager(tbmManager, new UserPrefs()));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void updateSortedFilteredClientList_contractComparator_correctOrderOfClients() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client1 \u003d new ClientBuilder().withName(\"client1\").withContractExpiryDate(\"2-3-2020\").build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client2 \u003d new ClientBuilder().withName(\"client2\").withContractExpiryDate(\"1-3-2020\").build();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager tbmManager \u003d new TbmManagerBuilder().withClient(client1).withClient(client2).build();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tbmManager, new UserPrefs());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(modelManagerCopy.getSortedFilteredClientList().get(0), client1);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManagerCopy.updateSortedFilteredClientList("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new SuggestionType(SuggestionType.BY_CONTRACT).getSuggestionComparator());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(modelManagerCopy.getSortedFilteredClientList().get(0), client2);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void updateSortedFilteredClientList_frequencyComparator_correctOrderOfClients() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client1 \u003d new ClientBuilder().withName(\"client1\")"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withLastModifiedInstant(\"2020-01-01T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client2 \u003d new ClientBuilder().withName(\"client2\")"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .withLastModifiedInstant(\"2020-01-02T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager tbmManager \u003d new TbmManagerBuilder().withClient(client1).withClient(client2).build();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tbmManager, new UserPrefs());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(modelManagerCopy.getSortedFilteredClientList().get(0), client1);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        modelManagerCopy.updateSortedFilteredClientList("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                new SuggestionType(SuggestionType.BY_FREQUENCY).getSuggestionComparator());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(modelManagerCopy.getSortedFilteredClientList().get(0), client2);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /* todo future tests:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *  run coverage for model manager test and see what\u0027s missing:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * 1. setClient"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * 2. widgetContent setter and gettter"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * 3. getFilteredClientNotesList"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 60,
      "raysonkoh": 45,
      "tankangliang": 31,
      "qwoprocks": 65,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TbmManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TbmManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final Client CLIENT \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final CountryNote COUNTRY_NOTE \u003d new CountryNote(\"country note\", new Country(\"US\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private TbmManager tbmManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private TbmManager tbmManagerWithClient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private TbmManager tbmManagerWithCountryNote;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tbmManager \u003d new TbmManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tbmManagerWithClient \u003d new TbmManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tbmManagerWithCountryNote \u003d new TbmManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tbmManagerWithClient.addClient(CLIENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tbmManagerWithCountryNote.addCountryNote(COUNTRY_NOTE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(Collections.emptyList(), tbmManager.getClientList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(Collections.emptyList(), tbmManager.getCountryNoteList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        TbmManager newTbmManager \u003d new TbmManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newTbmManager.addCountryNote(COUNTRY_NOTE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newTbmManager.addClient(CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tbmManager \u003d new TbmManager(newTbmManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManager.getCountryNoteList().size(), 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManager.getClientList().size(), 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManager.getCountryNoteList().get(0), COUNTRY_NOTE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManager.getClientList().get(0), CLIENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tbmManager.resetData(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void resetData_withValidReadOnlyTbmManager_replacesData() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager newData \u003d getTypicalTbmManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.resetData(newData);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(newData, tbmManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void resetData_withDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Two clients with the same identity fields"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManagerStub newData \u003d new TbmManagerStub(newClients);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e tbmManager.resetData(newData));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_nullClients_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tbmManager.setClient(null, CLIENT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tbmManager.setClient(CLIENT, null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_clientNotInTbmManager_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e tbmManager.setClient(ALICE, ALICE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_clientInTbmManager_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedClient \u003d new ClientBuilder(ALICE).withName(\"EditedClient\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tbmManagerWithClient.setClient(CLIENT, editedClient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tbmManagerWithClient.hasClient(CLIENT));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(tbmManagerWithClient.hasClient(editedClient));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void removeClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tbmManager.removeClient(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void removeClient_clientNotInTbmManager_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e tbmManager.removeClient(ALICE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void removeClient_clientInTbmManager_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(tbmManagerWithClient.hasClient(CLIENT));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tbmManagerWithClient.removeClient(CLIENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tbmManagerWithClient.hasClient(CLIENT));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tbmManager.hasClient(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hasClient_clientNotInTbmManager_returnsFalse() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(tbmManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hasClient_clientInTbmManager_returnsTrue() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.addClient(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(tbmManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hasClient_clientWithSameIdentityFieldsInTbmManager_returnsTrue() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.addClient(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(tbmManager.hasClient(editedAlice));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tbmManager.getClientList().remove(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote_updateCountryNoteList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(\"random\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(tbmManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.addCountryNote(countryNote);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(tbmManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void deleteCountryNote_updateCountryNoteList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(\"random2\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(tbmManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.addCountryNote(countryNote);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(tbmManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.deleteCountryNote(countryNote);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(tbmManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManager.toString(), \"0 clients\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManagerWithCountryNote.toString(), \"0 clients\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManagerWithClient.toString(), \"1 clients\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(tbmManager);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same clients and country notes -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(tbmManager.equals(new TbmManager()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different clients -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tbmManager.equals(tbmManagerWithClient));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different country notes -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tbmManager.equals(tbmManagerWithCountryNote));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same object -\u003e same hashcode"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManager.hashCode(), tbmManager.hashCode());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same clients and country notes -\u003e same hashcode"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tbmManager.hashCode(), new TbmManager().hashCode());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different clients -\u003e different hashcode"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(tbmManager.hashCode(), tbmManagerWithClient.hashCode());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different country notes -\u003e different hashcode"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(tbmManager.hashCode(), tbmManagerWithCountryNote.hashCode());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * A stub ReadOnlyTbmManager whose clients list can violate interface constraints."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static class TbmManagerStub implements ReadOnlyTbmManager {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManagerStub(Collection\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            this.clients.setAll(clients);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            return clients;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public ObservableList\u003cCountryNote\u003e getCountryNoteList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 23,
      "tankangliang": 33,
      "qwoprocks": 115,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UserPrefs defaultUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final GuiSettings differentGuiSettings \u003d new GuiSettings(1.0, 1.0, 20, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UserPrefs userPrefsDifferentGuiSettings \u003d new UserPrefs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final Path differentFilePath \u003d Path.of(\"different/file/path\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UserPrefs userPrefsDifferentFilePath \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        userPrefsDifferentGuiSettings.setGuiSettings(differentGuiSettings);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        userPrefsDifferentFilePath.setTbmManagerFilePath(differentFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Null user prefs passed in -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UserPrefs newUserPrefs \u003d new UserPrefs(userPrefsDifferentFilePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(newUserPrefs.getTbmManagerFilePath(), differentFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newUserPrefs \u003d new UserPrefs(userPrefsDifferentGuiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(newUserPrefs.getGuiSettings(), differentGuiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e defaultUserPrefs.setGuiSettings(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void setTbmManagerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e defaultUserPrefs.setTbmManagerFilePath(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(defaultUserPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same gui settings and file path -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(defaultUserPrefs.equals(new UserPrefs()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different gui settings -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(defaultUserPrefs.equals(userPrefsDifferentGuiSettings));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different file paths -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(defaultUserPrefs.equals(userPrefsDifferentFilePath));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same object -\u003e returns same hashcode"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(defaultUserPrefs.hashCode(), defaultUserPrefs.hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same gui settings and file path -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(defaultUserPrefs.hashCode(), new UserPrefs().hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different gui settings -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(defaultUserPrefs.hashCode(), userPrefsDifferentGuiSettings.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different file paths -\u003e returns different hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(defaultUserPrefs.hashCode(), userPrefsDifferentFilePath.hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(defaultUserPrefs.toString(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \"Gui Settings : \" + defaultUserPrefs.getGuiSettings().toString()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    + \"\\nLocal data file location : \" + defaultUserPrefs.getTbmManagerFilePath().toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "qwoprocks": 69,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Address address \u003d new Address(\"Blk 456, Den Road, #01-355\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(address);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(address.equals(address));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(new Address(\"-\").equals(new Address(\"-\")));;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Address differentAddress \u003d new Address(\"Blk 456, Den Road, #01-354\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(address.equals(differentAddress));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(new Address(\"-\").equals(new Address(\"+\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Address(\"Blk 456, Den Road, #01-355\").hashCode(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 456, Den Road, #01-355\").hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Address(\"-\").hashCode(), new Address(\"-\").hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Address(\"Blk 456, Den Road, #01-355\").hashCode(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Address(\"Blk 456, Den Road, #01-354\").hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Address(\"-\").hashCode(), new Address(\"+\").hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 13,
      "qwoprocks": 18,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientCountryMatchesInputCountryPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ClientCountryMatchesInputCountryPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void test_matchesCountry_returnTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    country);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(pred.test(new ClientBuilder().withCountry(countryCode).build()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void test_notMatchCountry_returnFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c COUNTRY_CODES.length - 1; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(COUNTRY_CODES[i]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    country);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(pred.test(new ClientBuilder().withCountry(COUNTRY_CODES[i + 1]).build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameObj_returnTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(pred, pred);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_notClientCountryMatchesInputCountryPredicate_returnFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate pred \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Object obj \u003d new Object();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(pred, obj);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_diffCountry_returnFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predFirst \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predSecond \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"MY\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(predFirst, predSecond);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(predSecond, predFirst);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountry_returnTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predFirst \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ClientCountryMatchesInputCountryPredicate predSecond \u003d new ClientCountryMatchesInputCountryPredicate("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(\"SG\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(predFirst, predSecond);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(predSecond, predFirst);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTRACT_EXPIRY_DATE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LAST_MODIFIED_INSTANT_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void isSameClient() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ALICE.isSameClient(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ALICE.isSameClient(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withCountry(VALID_COUNTRY_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .withLastModifiedInstant(VALID_LAST_MODIFIED_INSTANT_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // TODO: Add tests with modified notes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different country -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different contract expiry date -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withContractExpiryDate(VALID_CONTRACT_EXPIRY_DATE_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different last modified instant -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withLastModifiedInstant(VALID_LAST_MODIFIED_INSTANT_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // TODO: Add tests with modified notes"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // same values -\u003e hashCode is same"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(ALICE.hashCode(), aliceCopy.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // same object -\u003e hashCode is same"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(ALICE.hashCode(), ALICE.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different client -\u003e hashCode is different"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(ALICE.hashCode(), BOB.hashCode());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different name -\u003e hashCode is different"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(ALICE.hashCode(), editedAlice.hashCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different phone -\u003e hashCode is different"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(ALICE.hashCode(), editedAlice.hashCode());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different email -\u003e hashCode is different"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(ALICE.hashCode(), editedAlice.hashCode());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different address -\u003e hashCode is different"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(ALICE.hashCode(), editedAlice.hashCode());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different country -\u003e hashCode is different"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(ALICE.hashCode(), editedAlice.hashCode());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different contract expiry date -\u003e hashCode is different"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withContractExpiryDate(VALID_CONTRACT_EXPIRY_DATE_BOB).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(ALICE.hashCode(), editedAlice.hashCode());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different last modified instant -\u003e hashCode is same"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withLastModifiedInstant(VALID_LAST_MODIFIED_INSTANT_BOB).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(ALICE.hashCode(), editedAlice.hashCode());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // TODO: Add tests with modified notes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void getClientNotes_modifyUnmodifiableSet_throwsException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"hell yes\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        client.addClientNote(clientNote);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(client.hasClientNote(clientNote));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cNote\u003e currentNotes \u003d client.getClientNotes();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e currentNotes.add(new Note(\"nice lahh\")));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void getClientNotesAsList_modifyUnmodifiableList_throwsException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        client.addClientNote(new Note(\"hell yes\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cNote\u003e currentNotes \u003d client.getClientNotesAsList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e currentNotes.add(new Note(\"nice lahh\")));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void deleteClientNote_deleteExistingNote_noteIsDeletedWithoutException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"hell yes\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        client.addClientNote(clientNote);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(client.hasClientNote(clientNote));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertDoesNotThrow(() -\u003e client.deleteClientNote(clientNote));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        client.deleteClientNote(clientNote);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(client.hasClientNote(clientNote));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void editClientNote_editExistingNote_noteIsEditedWithoutException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"hell yes\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note newNote \u003d new Note(\"this be a new note\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        client.addClientNote(clientNote);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(client.hasClientNote(clientNote));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(client.hasClientNote(newNote));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertDoesNotThrow(() -\u003e client.editClientNote(clientNote, newNote));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        client.editClientNote(clientNote, newNote);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertFalse(client.hasClientNote(clientNote));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(client.hasClientNote(newNote));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void toString_positiveTest_correctStringDisplayed() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note clientNote \u003d new Note(\"hell yes\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        client.addClientNote(clientNote);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expected \u003d \"Alice Pauline Phone: 94351253 Email: alice@example.com Address: 123, Jurong West Ave 6,\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" #08-111 Country: Singapore (SG) Timezone: GMT+8 Contract Expiry Date: 1-4-2021\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(expected, client.toString());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 61,
      "tankangliang": 67,
      "qwoprocks": 27,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ContractExpiryDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ContractExpiryDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String TEST_DATE_1 \u003d \"11-12-2020\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String TEST_DATE_2 \u003d \"30-1-2019\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ContractExpiryDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ContractExpiryDate contractExpiryDate \u003d new ContractExpiryDate(TEST_DATE_1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(contractExpiryDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Same date, return true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(contractExpiryDate.equals(new ContractExpiryDate(TEST_DATE_1)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Different date, return false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(contractExpiryDate.equals(new ContractExpiryDate(TEST_DATE_2)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Same date, return same hashcode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ContractExpiryDate contractExpiryDate \u003d new ContractExpiryDate(TEST_DATE_1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(contractExpiryDate.hashCode(), new ContractExpiryDate(TEST_DATE_1).hashCode());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Different date, return different hashcode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(contractExpiryDate.hashCode(), new ContractExpiryDate(TEST_DATE_2).hashCode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ContractExpiryDate contractExpiryDate1 \u003d new ContractExpiryDate(TEST_DATE_1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ContractExpiryDate contractExpiryDate2 \u003d new ContractExpiryDate(TEST_DATE_2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(contractExpiryDate1.compareTo(contractExpiryDate2) \u003e 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(contractExpiryDate2.compareTo(contractExpiryDate1) \u003c 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ContractExpiryDate contractExpiryDate \u003d new ContractExpiryDate(TEST_DATE_1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(contractExpiryDate.toString(), TEST_DATE_1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // null dates"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ContractExpiryDate.isValidDate(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"30\")); // number only"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"30-2\")); // 2 numbers only"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"001-2-2049\")); // 3 digit day"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"1-200-2029\")); // 3 digit month"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"1-20-0\")); // 1 digit year"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"1-20-020\")); // 3 digit year"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"1-20-20020\")); // 5 digit year"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"1-0-20\")); // month is 0"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"0-1-20\")); // day is 0"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"32-12-2020\")); // day is 32"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"12-13-2023\")); // month is 13"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"30/1/2021\")); // slashes are used"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"30-2-2021\")); // 30th Feb"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(ContractExpiryDate.isValidDate(\"29-2-2021\")); // 29th Feb on non-leap year"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ContractExpiryDate.isValidDate(\"12-12-20\")); // valid date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ContractExpiryDate.isValidDate(\"29-2-2020\")); // 29th Feb on leap year"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ContractExpiryDate.isValidDate(\"1-1-0000\")); // smallest possible date"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(ContractExpiryDate.isValidDate(\"31-12-9999\")); // largest possible date"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Email(\"PeterJack_1190@example.com\").hashCode(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new Email(\"PeterJack_1190@example.com\").hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Email(\"PeterJack_1190@example.com\").hashCode(), new Email(\"a@bc\").hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 10,
      "qwoprocks": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/LastModifiedInstantTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "class LastModifiedInstantTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_INSTANT_1 \u003d \"2020-10-10T15:18:35.617617Z\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_INSTANT_2 \u003d \"2020-10-11T15:18:35.617617Z\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LastModifiedInstant(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void constructor_invalidInstant_returnsCurrentInstant() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant \u003d new LastModifiedInstant(\"invalid instant\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        LocalDate instantDate \u003d Instant.parse(lastModifiedInstant.toString())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(currentDate.getYear(), instantDate.getYear());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(currentDate.getMonth(), instantDate.getMonth());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(currentDate.getDayOfMonth(), instantDate.getDayOfMonth());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void constructor_noArguments_returnsCurrentInstant() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant \u003d new LastModifiedInstant();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // Test to make sure the generated instant is within 1 second of now."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Instant instantNowMinusOneSecond \u003d Instant.now().minusSeconds(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(instantNowMinusOneSecond.compareTo(lastModifiedInstant.value), -1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        LocalDate instantDate \u003d Instant.parse(lastModifiedInstant.toString())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                .atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(currentDate.getYear(), instantDate.getYear());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(currentDate.getMonth(), instantDate.getMonth());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(currentDate.getDayOfMonth(), instantDate.getDayOfMonth());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void isValidInstant() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // null instant"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e LastModifiedInstant.isValidInstant(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // blank instant"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"\")); // empty string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\" \")); // spaces only"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"-10-10T15:18:35.617617Z\")); // missing year"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10T15:18:35.617617Z\")); // missing month"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10T15:18:35.617617Z\")); // missing day"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-1015:18:35.617617Z\")); // missing T"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10T18:35.617617Z\")); // missing hour"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10T15:35.617617Z\")); // missing minutes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10T15:18.617617Z\")); // missing seconds"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10T15:18:35.617617\")); // missing Z"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"YYYY-10-10T15:18:35.617617Z\")); // invalid year"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-MM-10T15:18:35.617617Z\")); // invalid month"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-DDT15:18:35.617617Z\")); // invalid day"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10THH:18:35.617617Z\")); // invalid hour"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10T15:MM:35.617617Z\")); // invalid minute"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10T15:18:SS.617617Z\")); // invalid second"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10T15:18:35.nanosecondZ\")); // invalid nanoseconds"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10T15:18:35.617617Y\")); // invalid zone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020-10-10Z15:18:35.617617Z\")); // invalid separator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(LastModifiedInstant.isValidInstant(\"2020/10/10T15:18:35.617617Z\")); // \"/\" instead of \"-\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(LastModifiedInstant.isValidInstant(\"2020-10-10T15:18:35.617617Z\")); // valid instant"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(LastModifiedInstant.isValidInstant(\"9999-12-31T23:59:59.999999Z\")); // largest instant"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(LastModifiedInstant.isValidInstant(\"0000-01-01T00:00:00.000000Z\")); // smallest instant"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(LastModifiedInstant.isValidInstant(\"2020-10-10T15:18:35.617Z\")); // 3 digits for nano"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(LastModifiedInstant.isValidInstant(\"2020-10-10T15:18:35Z\")); // no nano"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant1 \u003d new LastModifiedInstant(VALID_INSTANT_1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant2 \u003d new LastModifiedInstant(VALID_INSTANT_2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(lastModifiedInstant1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(lastModifiedInstant1.equals(new LastModifiedInstant(VALID_INSTANT_1))); // same instant"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(lastModifiedInstant1.equals(lastModifiedInstant2)); // different instant"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant1 \u003d new LastModifiedInstant(VALID_INSTANT_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant2 \u003d new LastModifiedInstant(VALID_INSTANT_2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(lastModifiedInstant1.hashCode(), lastModifiedInstant1.hashCode()); // same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(lastModifiedInstant1.hashCode(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new LastModifiedInstant(VALID_INSTANT_1).hashCode()); // same instant"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(lastModifiedInstant1.hashCode(), lastModifiedInstant2.hashCode()); // different instant"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant1 \u003d new LastModifiedInstant(VALID_INSTANT_1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant2 \u003d new LastModifiedInstant(VALID_INSTANT_2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(lastModifiedInstant1.compareTo(lastModifiedInstant2), 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(lastModifiedInstant2.compareTo(lastModifiedInstant1), -1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(lastModifiedInstant1.compareTo(lastModifiedInstant1), 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(lastModifiedInstant1.compareTo(new LastModifiedInstant(VALID_INSTANT_1)), 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LastModifiedInstant lastModifiedInstant1 \u003d new LastModifiedInstant(VALID_INSTANT_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(VALID_INSTANT_1, lastModifiedInstant1.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 118,
      "qwoprocks": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(firstPredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 13,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Name(\"peter jack\").hashCode(), new Name(\"peter jack\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Name(\"12345\").hashCode(), new Name(\"12345\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Name(\"peter jack\").hashCode(), new Name(\"peter jacc\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Name(\"12345\").hashCode(), new Name(\"123456\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 11,
      "qwoprocks": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Phone(\"911\").hashCode(), new Phone(\"911\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Phone(\"93121534\").hashCode(), new Phone(\"93121534\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Phone(\"124293842033123\").hashCode(), new Phone(\"124293842033123\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Phone(\"911\").hashCode(), new Phone(\"912\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Phone(\"911\").hashCode(), new Phone(\"93121534\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Phone(\"911\").hashCode(), new Phone(\"124293842033123\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 13,
      "qwoprocks": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/SuggestAvailabilityPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class SuggestAvailabilityPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void test_clientAt17_false() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TimezoneStub fivePm \u003d new TimezoneStub(\"GMT+8\", 17);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Client client \u003d new ClientBuilder().withTimezone(fivePm).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        SuggestAvailabilityPredicate suggestAvailabilityPredicate \u003d new SuggestAvailabilityPredicate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(suggestAvailabilityPredicate.test(client));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void test_clientAt18_true() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TimezoneStub sixPm \u003d new TimezoneStub(\"GMT+8\", 18);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Client client \u003d new ClientBuilder().withTimezone(sixPm).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        SuggestAvailabilityPredicate suggestAvailabilityPredicate \u003d new SuggestAvailabilityPredicate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(suggestAvailabilityPredicate.test(client));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void test_clientAt21_true() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TimezoneStub tenPm \u003d new TimezoneStub(\"GMT+8\", 21);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Client client \u003d new ClientBuilder().withTimezone(tenPm).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        SuggestAvailabilityPredicate suggestAvailabilityPredicate \u003d new SuggestAvailabilityPredicate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(suggestAvailabilityPredicate.test(client));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void test_clientAt22_false() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TimezoneStub elevenPm \u003d new TimezoneStub(\"GMT+8\", 22);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Client client \u003d new ClientBuilder().withTimezone(elevenPm).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        SuggestAvailabilityPredicate suggestAvailabilityPredicate \u003d new SuggestAvailabilityPredicate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(suggestAvailabilityPredicate.test(client));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        SuggestAvailabilityPredicate suggestAvailabilityPredicate \u003d new SuggestAvailabilityPredicate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(suggestAvailabilityPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // different object, same fields -\u003e true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(suggestAvailabilityPredicate.equals(new SuggestAvailabilityPredicate()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static class TimezoneStub extends Timezone {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        private final int testCurrHour;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TimezoneStub(String val, int testCurrHour) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            super(val);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            this.testCurrHour \u003d testCurrHour;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        public int getCurrHourInTimezone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return testCurrHour;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 58,
      "tankangliang": 7,
      "qwoprocks": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/SuggestContractPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class SuggestContractPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final SuggestContractPredicate predicate \u003d new SuggestContractPredicate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void test_clientWithNullContractExpiryDate_returnsFalse() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d new ClientBuilder().withContractExpiryDate(ContractExpiryDate.NULL_DATE).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(predicate.test(client));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void test_clientWithContractExpiryDate_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client client \u003d new ClientBuilder().withContractExpiryDate(\"9-8-2029\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.test(client));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestContractPredicate predicateCopy \u003d new SuggestContractPredicate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(predicate.equals(predicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(predicate.equals(new SuggestAvailabilityPredicate()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestContractPredicate predicateCopy \u003d new SuggestContractPredicate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same predicate -\u003e same hashCode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(predicate.hashCode(), predicateCopy.hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different predicate -\u003e different hashCode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(predicate.hashCode(), new SuggestAvailabilityPredicate().hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/SuggestionTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class SuggestionTypeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SuggestionType(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SuggestionType(\"availability\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SuggestionType(\"contractor\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SuggestionType(\"by/contract\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SuggestionType(\"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertDoesNotThrow(() -\u003e new SuggestionType(SuggestionType.BY_FREQUENCY));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getSuggestionPredicate_byAvailable_suggestAvailabilityPredicate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        SuggestionType available \u003d new SuggestionType(SuggestionType.BY_AVAILABLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(available.getSuggestionPredicate() instanceof SuggestAvailabilityPredicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void getSuggestionPredicate_byContract_suggestContractPredicate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        SuggestionType contract \u003d new SuggestionType(SuggestionType.BY_CONTRACT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(contract.getSuggestionPredicate() instanceof SuggestContractPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void isValidSuggestionType_validSuggestionType_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(SuggestionType.isValidSuggestionType(SuggestionType.BY_AVAILABLE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(SuggestionType.isValidSuggestionType(SuggestionType.BY_CONTRACT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(SuggestionType.isValidSuggestionType(SuggestionType.BY_FREQUENCY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void isValidSuggestionType_invalidSuggestionType_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(SuggestionType.isValidSuggestionType(\"contractor\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(SuggestionType.isValidSuggestionType(\"availability\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(SuggestionType.isValidSuggestionType(\"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SuggestionType.isValidSuggestionType(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestionType available \u003d new SuggestionType(SuggestionType.BY_AVAILABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(available);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same suggestion type -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(available.equals(new SuggestionType(SuggestionType.BY_AVAILABLE)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different suggestion type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(available.equals(new SuggestionType(SuggestionType.BY_CONTRACT)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        SuggestionType available \u003d new SuggestionType(SuggestionType.BY_AVAILABLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same suggestion type -\u003e returns same hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(available.hashCode(), new SuggestionType(SuggestionType.BY_AVAILABLE).hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different suggestion type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(available.hashCode(), new SuggestionType(SuggestionType.BY_CONTRACT).hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        SuggestionType available \u003d new SuggestionType(SuggestionType.BY_AVAILABLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        SuggestionType contract \u003d new SuggestionType(SuggestionType.BY_CONTRACT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        SuggestionType frequency \u003d new SuggestionType(SuggestionType.BY_FREQUENCY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(available.toString(), \"[available]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(contract.toString(), \"[contract]\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(frequency.toString(), \"[frequency]\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 15,
      "tankangliang": 17,
      "qwoprocks": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/TimezoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TimezoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Timezone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String invalidTimezone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Timezone(invalidTimezone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void isValidTimezone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // null timezone"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Timezone.isValidTimezone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // invalid timezone"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"UTC+8\")); // does not start with GMT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"GM+8\")); // misspelled GMT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"GMT+15\")); // out of range (positive)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"GMT-13\")); // out of range (negative)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(Timezone.isValidTimezone(\"GMT+654657987654456\")); // large number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // valid timezone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(Timezone.isValidTimezone(\"GMT+8\")); // valid timezone"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(Timezone.isValidTimezone(\"GMT-12\")); // smallest negative offset"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertTrue(Timezone.isValidTimezone(\"GMT+14\")); // largest positive offset"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void validTimezones_displayedCorrectly() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"GMT+14\", new Timezone(\"GMT+14\").toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"GMT-12\", new Timezone(\"GMT-12\").toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"GMT+0\", new Timezone(\"GMT-0\").toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"GMT+0\", new Timezone(\"GMT+0\").toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"GMT+0\", new Timezone(\"GMT-00\").toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"GMT+0\", new Timezone(\"GMT+00\").toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getCurrHourInTimezone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // use System clock to test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // adapted from https://www.w3resource.com/java-exercises/datatypes/java-datatype-exercise-5.php"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int timezoneOffset \u003d -1 * Timezone.SMALLEST_NEGATIVE_OFFSET;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                timezoneOffset \u003c\u003d Timezone.LARGEST_POSITIVE_OFFSET; timezoneOffset++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            long totalMilliseconds \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            long totalSeconds \u003d totalMilliseconds / 1000;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            long totalMinutes \u003d totalSeconds / 60;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            long totalHours \u003d totalMinutes / 60;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            long currentHour \u003d ((totalHours + timezoneOffset) % 24);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String value \u003d \"GMT\" + (timezoneOffset \u003e\u003d 0 ? \"+\" : \"\") + timezoneOffset;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(currentHour, new Timezone(value).getCurrHourInTimezone());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Timezone(\"GMT+8\").hashCode(), new Timezone(\"GMT+8\").hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Timezone(\"GMT-8\").hashCode(), new Timezone(\"GMT-8\").hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Timezone(\"GMT-0\").hashCode(), new Timezone(\"GMT-0\").hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(new Timezone(\"GMT+0\").hashCode(), new Timezone(\"GMT+0\").hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Timezone(\"GMT+12\").hashCode(), new Timezone(\"GMT-12\").hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Timezone(\"GMT+5\").hashCode(), new Timezone(\"GMT+10\").hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotEquals(new Timezone(\"GMT-5\").hashCode(), new Timezone(\"GMT-10\").hashCode());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 18,
      "tankangliang": 64,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/UniqueClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class UniqueClientListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UniqueClientList uniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_clientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_clientInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_clientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(uniqueClientList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void add_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void add_duplicateClient_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.add(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_nullTargetClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(null, ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_nullEditedClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(ALICE, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_targetClientNotInList_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.setClient(ALICE, ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_editedClientIsSameClient_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClient(ALICE, ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_editedClientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_editedClientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClient(ALICE, BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClient_editedClientHasNonUniqueIdentity_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClient(ALICE, BOB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void remove_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void remove_clientDoesNotExist_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.remove(ALICE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void remove_existingClient_removesClient() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.remove(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_nullUniqueClientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((UniqueClientList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_uniqueClientList_replacesOwnListWithProvidedUniqueClientList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClients(expectedUniqueClientList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((List\u003cClient\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueClientList.setClients(clientList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setClients_listWithDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClients(listWithDuplicateClients));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                uniqueClientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 2,
      "tankangliang": 2,
      "qwoprocks": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/country/CountryCodeVerifierTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryCodeVerifierTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isValidCode_validCode_returnTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : CountryCodeVerifier.getCountryCodes()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(CountryCodeVerifier.isValidCountryCode(countryCode));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isValidCode_invalidCode_returnFalse() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryCodeVerifier.isValidCountryCode(\"ZZ\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryCodeVerifier.isValidCountryCode(\"12\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryCodeVerifier.isValidCountryCode(\"az\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryCodeVerifier.isValidCountryCode(\"bd\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(CountryCodeVerifier.isValidCountryCode(\"bdc\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getCountryCodes_returnsIsoCountries() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertArrayEquals(Locale.getISOCountries(), CountryCodeVerifier.getCountryCodes());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 25,
      "qwoprocks": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/country/CountryNotesManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNotesManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    //TODO: Add more tests if decide to include checking for 3-letter Country Code"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private CountryNotesManager countryNotesManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNotesManager \u003d new CountryNotesManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void hasCountryNote_duplicateNote_returnTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNote genericNote \u003d new CountryNote(\"generic note\", country);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryNotesManager.addCountryNote(genericNote);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(countryNotesManager.hasCountryNote(genericNote));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void hasCountryNote_notDuplicateNote_returnFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNote genericNote \u003d new CountryNote(\"generic note\", new Country(countryCode));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(countryNotesManager.hasCountryNote(genericNote));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote_validNote_updatesCorrectly() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNote genericNote \u003d new CountryNote(\"generic note\", country);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(countryNotesManager.hasCountryNote(genericNote));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryNotesManager.addCountryNote(genericNote);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(countryNotesManager.hasCountryNote(genericNote));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addCountryNote_countryNoteWithNullCountry_throwsAssertionError() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(\"country note 1\", Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e countryNotesManager.addCountryNote(countryNote));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void addCountryNote_duplicateNote_notAdded() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country country \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            CountryNote genericNote \u003d new CountryNote(\"generic note\", country);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryNotesManager.addCountryNote(genericNote);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(1, countryNotesManager.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    .filter(x -\u003e x.equals(genericNote))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    .count());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            countryNotesManager.addCountryNote(genericNote);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(1, countryNotesManager.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    .filter(x -\u003e x.equals(genericNote))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    .count());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void deleteCountryNote_countryNoteWithNullCountry_throwsAssertionError() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(\"country note 1\", Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e countryNotesManager.deleteCountryNote(countryNote));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void deleteCountryNote_nullCountryNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e countryNotesManager.deleteCountryNote(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void deleteCountryNote_countryNoteNotExist_assertionError() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(\"random\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e countryNotesManager.deleteCountryNote(countryNote));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void deleteCountryNote_countryNoteExists_deletesCountryNote() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(\"random\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesManager.addCountryNote(countryNote);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(countryNotesManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesManager.deleteCountryNote(countryNote);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNotesManager.hasCountryNote(countryNote));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void asUnmodifiableObservableList_editList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(\"random\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                countryNotesManager.asUnmodifiableObservableList().add(countryNote));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(countryNotesManager);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same clients and country notes -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(countryNotesManager.equals(new CountryNotesManager()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different country notes -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNotesManager countryNotesManagerWithCountryNote \u003d new CountryNotesManager();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNotesManagerWithCountryNote.addCountryNote(new CountryNote(\"country note\", new Country(\"AL\")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(countryNotesManager.equals(countryNotesManagerWithCountryNote));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same object -\u003e same hashcode"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(countryNotesManager.hashCode(), countryNotesManager.hashCode());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same clients and country notes -\u003e same hashcode"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(countryNotesManager.hashCode(), new CountryNotesManager().hashCode());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different country notes -\u003e different hashcode"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNotesManager countryNotesManagerWithCountryNote \u003d new CountryNotesManager();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNotesManagerWithCountryNote.addCountryNote(new CountryNote(\"country note\", new Country(\"AL\")));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(countryNotesManager.hashCode(), countryNotesManagerWithCountryNote.hashCode());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setCountryNote_validOldAndNewCountryNote_replacesOldCountryNoteWithNewCountryNote() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote oldCountryNote \u003d new CountryNote(\"random\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote newCountryNote \u003d new CountryNote(\"random2\", new Country(\"MY\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesManager.addCountryNote(oldCountryNote);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(countryNotesManager.hasCountryNote(oldCountryNote));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNotesManager.hasCountryNote(newCountryNote));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        countryNotesManager.setCountryNote(oldCountryNote, newCountryNote);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNotesManager.hasCountryNote(oldCountryNote));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(countryNotesManager.hasCountryNote(newCountryNote));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setCountryNote_notExistsOldCountryNote_throwsAssertError() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote oldCountryNote \u003d new CountryNote(\"random\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote newCountryNote \u003d new CountryNote(\"random2\", new Country(\"MY\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                countryNotesManager.setCountryNote(oldCountryNote, newCountryNote));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 103,
      "qwoprocks": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/country/CountryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final String[] COUNTRY_CODES \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void constructor_validCountryCode_returnCountry() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCodes : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new Country(countryCodes);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            } catch (AssertionError e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void constructor_invalidCountryCode_throwsAssertionError() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Country(\"abc\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Country(\"12\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Country(\"ab\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Country(\"AA\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getCountryName_differentCountry_differentCountryName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (int i \u003d 0; i \u003c COUNTRY_CODES.length - 1; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Country countryFirst \u003d new Country(COUNTRY_CODES[i]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Country countrySecond \u003d new Country(COUNTRY_CODES[i + 1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            assertNotEquals(countryFirst.getCountryName(), countrySecond.getCountryName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getCountryName_sameCountry_sameCountryName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Country countryFirst \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Country countrySecond \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            assertEquals(countryFirst.getCountryName(), countrySecond.getCountryName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_notACountry_returnFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countryFirst \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Object obj \u003d new Object();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertNotEquals(countryFirst, obj);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_differentCountry_returnFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c COUNTRY_CODES.length - 1; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countryFirst \u003d new Country(COUNTRY_CODES[i]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countrySecond \u003d new Country(COUNTRY_CODES[i + 1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertNotEquals(countryFirst, countrySecond);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertNotEquals(countrySecond, countryFirst);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void equals_sameCountry_returnTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countryFirst \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Country countrySecond \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(countryFirst, countrySecond);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(countrySecond, countryFirst);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_differentCountry_differentHashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (int i \u003d 0; i \u003c COUNTRY_CODES.length - 1; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Country countryFirst \u003d new Country(COUNTRY_CODES[i]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Country countrySecond \u003d new Country(COUNTRY_CODES[i + 1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            assertNotEquals(countryFirst.hashCode(), countrySecond.hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_sameCountry_sameHashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (String countryCode : COUNTRY_CODES) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Country countryFirst \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Country countrySecond \u003d new Country(countryCode);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            assertEquals(countryFirst.hashCode(), countrySecond.hashCode());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 62,
      "qwoprocks": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/CountryNoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class CountryNoteTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String COUNTRY_NOTE_CONTENT \u003d \"country note\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final Country COUNTRY \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private CountryNote countryNote;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNote \u003d new CountryNote(COUNTRY_NOTE_CONTENT, COUNTRY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CountryNote(null, COUNTRY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CountryNote(COUNTRY_NOTE_CONTENT, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(COUNTRY, countryNote.getCountry());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(COUNTRY_NOTE_CONTENT, countryNote.getNoteContent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d Set.of(new Tag(\"tag1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNote.setTags(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(countryNote.getTags(), tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isClientNote_returnFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(countryNote.isClientNote());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(countryNote);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same note content same country -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(countryNote.equals(new CountryNote(COUNTRY_NOTE_CONTENT, COUNTRY)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different country -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(countryNote.equals(new CountryNote(COUNTRY_NOTE_CONTENT, new Country(\"AL\"))));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different note content -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(countryNote.equals(new CountryNote(\"new country note\", COUNTRY)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different tags -\u003e return false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNote countryNoteWithTags \u003d new CountryNote(COUNTRY_NOTE_CONTENT, COUNTRY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNoteWithTags.setTags(Set.of(new Tag(\"tag1\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(countryNote.equals(countryNoteWithTags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same note content same country -\u003e same hashcode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(countryNote.hashCode(), new CountryNote(COUNTRY_NOTE_CONTENT, COUNTRY).hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different country -\u003e different hashcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertNotEquals(countryNote.hashCode(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                new CountryNote(COUNTRY_NOTE_CONTENT, new Country(\"AL\")).hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different note content -\u003e different hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(countryNote.hashCode(), new CountryNote(\"new country note\", COUNTRY).hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different tags -\u003e different hashcode"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNote countryNoteWithTags \u003d new CountryNote(COUNTRY_NOTE_CONTENT, COUNTRY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNoteWithTags.setTags(Set.of(new Tag(\"tag1\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(countryNote.hashCode(), countryNoteWithTags.hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void constructor_countryNote_ensureEqualsExpected() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String content \u003d \"content\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tags.add(new Tag(\"t\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        CountryNote c \u003d new CountryNote(content, country, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(content, c.getNoteContent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(country, c.getCountry());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(tags, c.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 38,
      "qwoprocks": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_1 \u003d \"note content 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String NOTE_CONTENT_2 \u003d \"note content 2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final Tag TAG_1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final Tag TAG_2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Note note1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        note1 \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(TAG_1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(TAG_2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_basicTests() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(note1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void equals_sameNoteContents_returnTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Note note1Duplicate \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(note1, note1Duplicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void equals_differentNoteContents_returnFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note note2 \u003d new Note(NOTE_CONTENT_2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(note1, note2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void equals_sameNoteContentSameTags_returnTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note note1Duplicate \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        note1.setTags(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        note1Duplicate.setTags(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(note1, note1Duplicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void equals_sameNoteContentDifferentTags_returnFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note note1Duplicate \u003d new Note(NOTE_CONTENT_1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        note1.setTags(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        note1Duplicate.setTags(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e rougeTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        rougeTags.add(new Tag(\"rogueTag\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        note1Duplicate.setTags(rougeTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(note1, note1Duplicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 34,
      "tankangliang": 3,
      "qwoprocks": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/TagNoteMapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "class TagNoteMapTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final Note TAGGED_NOTE \u003d new Note(\"jurong hill was a nice place\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final Tag TEST_TAG \u003d new Tag(\"tagName\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private TagNoteMap tagNoteMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(TEST_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void initTagNoteMapFromClients_addClientWithTaggedNotes_doesNotThrowException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        TAGGED_NOTE.setTags(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client.addClientNote(TAGGED_NOTE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        clients.add(client);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertDoesNotThrow(() -\u003e tagNoteMap.initTagNoteMapFromClients(clients));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void initTagNoteMapFromCountryNotes_validSetOfTaggedCountryNotes_doesNotThrowException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cNote\u003e inputSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Tag tag \u003d new Tag(\"tagName\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note countryNote1 \u003d new Note(\"this country note will be tagged\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        countryNote1.setTags(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        inputSet.add(countryNote1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertDoesNotThrow(() -\u003e this.tagNoteMap.initTagNoteMapFromCountryNotes(inputSet));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void getNotesForTag_usesInitialisedMap_returnsTrue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        TAGGED_NOTE.setTags(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client.addClientNote(TAGGED_NOTE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        clients.add(client);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tagNoteMap.initTagNoteMapFromClients(clients);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cNote\u003e expectedNotes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedNotes.add(TAGGED_NOTE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tagNoteMap.getNotesForTag(TEST_TAG), expectedNotes);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void getUniqueTags_verifyWithNewTag_doesNotThrowExceptionReturnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e expectedResult \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedResult.add(new Tag(\"unprecedentedTag\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cString\u003e tagNameStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tagNameStrings.add(\"unprecedentedTag\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertDoesNotThrow(() -\u003e this.tagNoteMap.getUniqueTags(tagNameStrings));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e actualResult \u003d this.tagNoteMap.getUniqueTags(tagNameStrings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(expectedResult, actualResult);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // also tests that when a tag doesn\u0027t have associated notes then it is removed from tagToNotesMap and uniqueTagsMap"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void deleteNote_deleteSoleNoteWithSoleTag_clearsTagToNotesMapAndUniqueTagEntriesReturnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        TAGGED_NOTE.setTags(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cNote\u003e expectedNotesSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedNotesSet.add(TAGGED_NOTE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client.addClientNote(TAGGED_NOTE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        clients.add(client);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tagNoteMap.initTagNoteMapFromClients(clients);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(tagNoteMap.getTagsForNote(TAGGED_NOTE).equals(tags));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(tagNoteMap.getNotesForTag(TEST_TAG).equals(expectedNotesSet));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tagNoteMap.deleteNote(TAGGED_NOTE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tagNoteMap.getNotesForTag(TEST_TAG).equals(expectedNotesSet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void editNote_validInputs_replacesExistingNoteWithNewNote() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        TAGGED_NOTE.setTags(tags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note newNote \u003d new Note(\"new content\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e newTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Tag newTag \u003d new Tag(\"unprecedentedTag\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newTagSet.add(newTag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newNote.setTags(newTagSet);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cNote\u003e expectedNotesSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedNotesSet.add(newNote);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client.addClientNote(TAGGED_NOTE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        clients.add(client);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tagNoteMap.initTagNoteMapFromClients(clients);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(tagNoteMap.getTagsForNote(TAGGED_NOTE).equals(tags));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tagNoteMap.editNote(TAGGED_NOTE, newNote);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tagNoteMap.getNotesForTag(TEST_TAG).equals(expectedNotesSet));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(tagNoteMap.getNotesForTag(newTag).equals(expectedNotesSet));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void getTagsForNote_useNoteWithTwoTags_returnsTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(tag2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        TAGGED_NOTE.setTags(tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        client.addClientNote(TAGGED_NOTE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        List\u003cClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        clients.add(client);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        tagNoteMap.initTagNoteMapFromClients(clients);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e expectedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        expectedTags.add(tag2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        expectedTags.add(TEST_TAG);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e actualTags \u003d tagNoteMap.getTagsForNote(TAGGED_NOTE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(expectedTags.equals(actualTags));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(tagNoteMap);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same state -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        TagNoteMap newTagNoteMap \u003d new TagNoteMap();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(newTagNoteMap.equals(this.tagNoteMap));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // after adding a note -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newTagNoteMap.addTagsForNote(tags, new Note(\"note\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tagNoteMap.equals(newTagNoteMap));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 96,
      "qwoprocks": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalArgumentException.class, Tag.MESSAGE_CONSTRAINTS, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String invalidTagName2 \u003d \"pneumonoultramicroscopicsilicovolcanoconiosisk\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalArgumentException.class, Tag.MESSAGE_CONSTRAINTS, () -\u003e new Tag(invalidTagName2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // empty tag name -\u003e invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // non-alphanumeric tag name -\u003e invalid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"hello\u0027\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"hello it me\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // tag name longer than 45 characters -\u003e invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"pneumonoultramicroscopicsilicovolcanoconiosisk\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // tag name exactly 45 characters -\u003e valid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"pneumonoultramicroscopicsilicovolcanoconiosis\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(tag1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same tag name -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(tag1.equals(new Tag(\"tag1\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different tag name -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tag1.equals(tag2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same object -\u003e returns same hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tag1.hashCode(), tag1.hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same tag name -\u003e returns same hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tag1.hashCode(), new Tag(\"tag1\").hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different tag name -\u003e returns different hashcode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(tag1.hashCode(), tag2.hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String tagName \u003d \"thisisatag\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag \u003d new Tag(tagName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(tag.toString(), \"[\" + tagName + \"]\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 56,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UniqueTagSetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class UniqueTagSetTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final UniqueTagSet uniqueTagSet \u003d new UniqueTagSet();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.contains(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_tagNotInSet_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(uniqueTagSet.contains(tag));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void contains_tagInSet_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSet.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(uniqueTagSet.contains(tag));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addAll_nullTagSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.addAll(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void addAll_tagSetWithNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.addAll(tags));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getTags_nullTagSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.getTags(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getTags_tagSetWithNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.getTags(tags));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void getTags_tagSet_getCorrectUniqueTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Add new tags for the very first time"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag meeting \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag business \u003d new Tag(\"business\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e originalTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        originalTags.add(meeting);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        originalTags.add(business);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSet.addAll(originalTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // New set of local tags"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag meeting2 \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag business2 \u003d new Tag(\"business\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e localTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        localTags.add(meeting2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        localTags.add(business2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Get unique tags from the set of local tags, assert that it is equal to both original and local tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e uniqueTags \u003d uniqueTagSet.getTags(localTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(originalTags, uniqueTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(localTags, uniqueTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Assert that unique tags are same objects as original tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Tag originalTag : originalTags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (Tag uniqueTag : uniqueTags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                if (uniqueTag.equals(originalTag)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    assertSame(uniqueTag, originalTag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Assert that unique tags are different objects from local tags"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Tag localTag : localTags) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            for (Tag uniqueTag : uniqueTags) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                if (uniqueTag.equals(localTag)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                    assertNotSame(uniqueTag, localTag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags_nullTagSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.setTags(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags_tagSetWithNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagSet.setTags(tags));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void setTags_tagSet_replacesOwnSetWithProvidedTagSet() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag businessTag \u003d new Tag(\"business\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag meetingTag \u003d new Tag(\"meeting\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        tags.add(businessTag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSet.addAll(tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newTags.add(meetingTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSet.setTags(newTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(uniqueTagSet.asUnmodifiableSet(), newTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void asUnmodifiableSet_modifySet_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueTagSet.asUnmodifiableSet().clear());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueTagSet newUniqueTagSet \u003d new UniqueTagSet();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag1 \u003d new Tag(\"thisisatag\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag tag2 \u003d new Tag(\"thisisanothertag\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        newUniqueTagSet.addAll(Set.of(tag1, tag2));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Iterator\u003cTag\u003e tagIterator \u003d newUniqueTagSet.iterator();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(tagIterator.hasNext());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag firstTag \u003d tagIterator.next();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(firstTag \u003d\u003d tag1 || firstTag \u003d\u003d tag2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Tag secondTag \u003d tagIterator.next();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(!secondTag.equals(firstTag) \u0026\u0026 (secondTag \u003d\u003d tag1 || secondTag \u003d\u003d tag2));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(tagIterator.hasNext());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(uniqueTagSet);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same tag name -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(uniqueTagSet.equals(new UniqueTagSet()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueTagSet uniqueTagSetDifferentTags \u003d new UniqueTagSet();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSetDifferentTags.addAll(Set.of(new Tag(\"thisisatag\")));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(uniqueTagSet.equals(uniqueTagSetDifferentTags));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void hashCode_test() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same object -\u003e returns same hashcode"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(uniqueTagSet.hashCode(), uniqueTagSet.hashCode());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same tag name -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(uniqueTagSet.hashCode(), new UniqueTagSet().hashCode());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        UniqueTagSet uniqueTagSetDifferentTags \u003d new UniqueTagSet();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uniqueTagSetDifferentTags.addAll(Set.of(new Tag(\"thisisatag\")));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(uniqueTagSet.hashCode(), uniqueTagSetDifferentTags.hashCode());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SampleDataUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getSampleClients;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getSampleTbmManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void getSampleTbmManager_getSampleClients_containSameClients() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ReadOnlyTbmManager tbmManager \u003d getSampleTbmManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Client[] sampleClientArray \u003d getSampleClients();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ObservableList\u003cClient\u003e sampleClients \u003d FXCollections.observableList(Arrays.asList(sampleClientArray));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(sampleClients, tbmManager.getClientList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 5,
      "qwoprocks": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/widget/WidgetModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.model.widget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetModelManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals_basicTests() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        basicEqualsTests(WidgetModel.initWidget());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setContent_sameClient_isEqual() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModel widgetModelManager1 \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModel widgetModelManager2 \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // set content with same object -\u003e widget object should be the same"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client bob \u003d new ClientBuilder(BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager1.setWidgetClient(bob);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager2.setWidgetClient(bob);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(widgetModelManager1.getWidgetClient(), widgetModelManager2.getWidgetClient());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // set content to different client objects but of the same fields and values -\u003e meaning same person but"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // duplicate entry"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client bob1 \u003d new ClientBuilder(BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager2.setWidgetClient(bob1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(widgetModelManager1.getWidgetClient(), widgetModelManager2.getWidgetClient());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setContent_diffClient_notEqual() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // diff client should not be the same."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModel widgetModelManager1 \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetModel widgetModelManager2 \u003d WidgetModel.initWidget();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client bob \u003d new ClientBuilder(BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client amy \u003d new ClientBuilder(AMY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager1.setWidgetClient(bob);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        widgetModelManager2.setWidgetClient(amy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertNotEquals(widgetModelManager1.getWidgetClient(), widgetModelManager2.getWidgetClient());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 46,
      "tankangliang": 4,
      "qwoprocks": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.CountryCodeVerifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class JsonAdaptedClientTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_COUNTRY \u003d \"ZZ\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_TIMEZONE \u003d \"GT+8\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String INVALID_CONTRACT_EXPIRY_DATE \u003d \"1,2,2020\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String INVALID_LAST_MODIFIED_INSTANT \u003d \"2020/20/20T12:12:12Z\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String VALID_COUNTRY \u003d BENSON.getCountry().getCountryCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_TIMEZONE \u003d BENSON.getTimezone().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String VALID_CONTRACT_EXPIRY_DATE \u003d BENSON.getContractExpiryDate().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String VALID_LAST_MODIFIED_INSTANT \u003d BENSON.getLastModifiedInstant().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e clientNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_validClientDetails_returnsClient() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(BENSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(BENSON, client.toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void toModelType_validClientWithTaggedClientNote_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client taggedClient \u003d new ClientBuilder(BENSON).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note taggedClientNote \u003d new Note(\"some note\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e associatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        associatedTags.add(new Tag(\"someTag\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taggedClientNote.setTags(associatedTags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taggedClient.addClientNote(taggedClientNote);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(taggedClient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertDoesNotThrow(client::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(taggedClient.equals(client.toModelType()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                VALID_ADDRESS, VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void toModelType_invalidCountry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                INVALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String expectedMessage \u003d CountryCodeVerifier.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void toModelType_nullCountry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT, clientNotes);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Country.class.getSimpleName());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_invalidTimezone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, INVALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String expectedMessage \u003d Timezone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_nullTimezone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, null, VALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Timezone.class.getSimpleName());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_emptyContractExpiryDate_doesNotThrowException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, \"\", VALID_LAST_MODIFIED_INSTANT, clientNotes);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertDoesNotThrow(() -\u003e client.toModelType());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_invalidContractExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, INVALID_CONTRACT_EXPIRY_DATE, VALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        String expectedMessage \u003d ContractExpiryDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_nullContractExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, null, VALID_LAST_MODIFIED_INSTANT, clientNotes);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ContractExpiryDate.class.getSimpleName());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void toModelType_invalidLastModifiedInstant_doesNotThrowException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, INVALID_LAST_MODIFIED_INSTANT,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertDoesNotThrow(client::toModelType);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void toModelType_nullLastModifiedInstant_doesNotThrowException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                VALID_COUNTRY, VALID_TIMEZONE, VALID_CONTRACT_EXPIRY_DATE, null,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                clientNotes);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertDoesNotThrow(client::toModelType);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 53,
      "raysonkoh": 2,
      "tankangliang": 45,
      "qwoprocks": 52,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedNoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class JsonAdaptedNoteTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test public void toModelType_validTaggedClientNote_returnsTaggedClientNote() throws IllegalValueException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note taggedClientNote \u003d new Note(\"some note\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Set\u003cTag\u003e associatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        associatedTags.add(new Tag(\"someTag\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taggedClientNote.setTags(associatedTags);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedNote jsonAdaptedNote \u003d new JsonAdaptedNote(taggedClientNote);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Note deserialisedNote \u003d jsonAdaptedNote.toModelType();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(deserialisedNote.isClientNote());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue(deserialisedNote.getTags().equals(associatedTags));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test public void toModelType_validCountryNote_returnsCountryNote() throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        JsonAdaptedNote jsonAdaptedNote \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                new JsonAdaptedNote(new CountryNote(\"some note\", new Country(\"SG\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(jsonAdaptedNote.toModelType().isClientNote());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /* todo: future tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    *       1. how to test the @JsonCreator annotated constructor? in the first place it\u0027s not used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 21,
      "raysonkoh": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTbmManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.TypicalClients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class JsonSerializableTbmManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTbmManagerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Path TYPICAL_CLIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalClientsTbmManager.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Path INVALID_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidClientTbmManager.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Path DUPLICATE_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateClientTbmManager.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_typicalClientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonSerializableTbmManager dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                JsonSerializableTbmManager.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager tbmManagerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager typicalClientsTbmManager \u003d TypicalClients.getTypicalTbmManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(tbmManagerFromFile, typicalClientsTbmManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_invalidClientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonSerializableTbmManager dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                JsonSerializableTbmManager.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void toModelType_duplicateClients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonSerializableTbmManager dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                JsonSerializableTbmManager.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTbmManager.MESSAGE_DUPLICATE_CLIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 16,
      "qwoprocks": 4,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTbmManagerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class JsonTbmManagerStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTbmManagerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void readTbmManager_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTbmManager(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTbmManager\u003e readTbmManager(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new JsonTbmManagerStorage(Paths.get(filePath)).readTbmManager(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertFalse(readTbmManager(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTbmManager(\"notJsonFormatTbmManager.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void readTbmManager_invalidClientTbmManager_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTbmManager(\"invalidClientTbmManager.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void readTbmManager_invalidAndValidClientTbmManager_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTbmManager(\"invalidAndValidClientTbmManager.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void readAndSaveTbmManager_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTbmManager.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager original \u003d getTypicalTbmManager();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonTbmManagerStorage jsonTbmManagerStorage \u003d new JsonTbmManagerStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        jsonTbmManagerStorage.saveTbmManager(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ReadOnlyTbmManager readBack \u003d jsonTbmManagerStorage.readTbmManager(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(original, new TbmManager(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        original.addClient(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        original.removeClient(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        jsonTbmManagerStorage.saveTbmManager(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        readBack \u003d jsonTbmManagerStorage.readTbmManager(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(original, new TbmManager(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        original.addClient(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        jsonTbmManagerStorage.saveTbmManager(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        readBack \u003d jsonTbmManagerStorage.readTbmManager().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(original, new TbmManager(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void saveTbmManager_nullTbmManager_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTbmManager(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Saves {@code tbmManager} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void saveTbmManager(ReadOnlyTbmManager tbmManager, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            new JsonTbmManagerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    .saveTbmManager(tbmManager, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void saveTbmManager_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTbmManager(new TbmManager(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 110,
      "qwoprocks": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userPrefs.setTbmManagerFilePath(Paths.get(\"tbmManager.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalTbmManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.ReadOnlyTbmManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonTbmManagerStorage tbmManagerStorage \u003d new JsonTbmManagerStorage(getTempFilePath(\"tm\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        storageManager \u003d new StorageManager(tbmManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void tbmManagerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "         * {@link JsonTbmManagerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTbmManagerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager original \u003d getTypicalTbmManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        storageManager.saveTbmManager(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ReadOnlyTbmManager retrieved \u003d storageManager.readTbmManager().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(original, new TbmManager(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void getTbmManagerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertNotNull(storageManager.getTbmManagerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.LastModifiedInstant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String DEFAULT_COUNTRY \u003d \"SG\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static final String DEFAULT_TIMEZONE \u003d \"GMT+8\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final String DEFAULT_CONTRACT_EXPIRY_DATE \u003d \"4-1-2021\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Timezone timezone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private ContractExpiryDate contractExpiryDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private LastModifiedInstant lastModifiedInstant;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Creates a {@code ClientBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        country \u003d new Country(DEFAULT_COUNTRY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        timezone \u003d new Timezone(DEFAULT_TIMEZONE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        contractExpiryDate \u003d new ContractExpiryDate(DEFAULT_CONTRACT_EXPIRY_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        lastModifiedInstant \u003d new LastModifiedInstant();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Initializes the ClientBuilder with the data of {@code clientToCopy}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder(Client clientToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        name \u003d clientToCopy.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        phone \u003d clientToCopy.getPhone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        email \u003d clientToCopy.getEmail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        address \u003d clientToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        country \u003d clientToCopy.getCountry();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        timezone \u003d clientToCopy.getTimezone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        contractExpiryDate \u003d clientToCopy.getContractExpiryDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        lastModifiedInstant \u003d clientToCopy.getLastModifiedInstant();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Name} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withName(String name) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Address} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Phone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Email} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code Country} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientBuilder withCountry(String country) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.country \u003d new Country(country);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code Timezone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientBuilder withTimezone(String timezone) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.timezone \u003d new Timezone(timezone);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Sets the {@code Timezone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ClientBuilder withTimezone(Timezone timezone) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code ContractExpiryDate} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withContractExpiryDate(String contractExpiryDate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.contractExpiryDate \u003d new ContractExpiryDate(contractExpiryDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code ContractExpiryDate} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public ClientBuilder withContractExpiryDate(ContractExpiryDate contractExpiryDate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.contractExpiryDate \u003d contractExpiryDate;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code LastModifiedInstant} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public ClientBuilder withLastModifiedInstant(String lastModifiedInstant) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.lastModifiedInstant \u003d new LastModifiedInstant(lastModifiedInstant);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Builds a client with the specified fields in {@code ClientBuilder}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Client with fields in {@code ClientBuilder}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public Client build() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Client(name, phone, email, address, country, timezone, contractExpiryDate, lastModifiedInstant);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 8,
      "tankangliang": 43,
      "qwoprocks": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTRACT_EXPIRY_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A utility class for Client."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an add command string for adding the {@code client}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static String getAddCommand(Client client) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return ClientAddCommand.COMMAND_WORD + \" \" + getClientDetails(client);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the part of command string for the given {@code client}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static String getClientDetails(Client client) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        sb.append(PREFIX_COUNTRY + client.getCountry().getCountryCode() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        sb.append(PREFIX_TIMEZONE + client.getTimezone().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        sb.append(PREFIX_CONTRACT_EXPIRY_DATE + client.getContractExpiryDate().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the part of command string for the given {@code EditClientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static String getEditClientDescriptorDetails(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.getCountry().ifPresent(country -\u003e sb.append(PREFIX_COUNTRY).append(country.getCountryCode())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.getTimezone().ifPresent(timezone -\u003e sb.append(PREFIX_TIMEZONE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .append(timezone.toString()).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.getContractExpiryDate().ifPresent(contractExpiryDate -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                sb.append(PREFIX_CONTRACT_EXPIRY_DATE).append(contractExpiryDate.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 14,
      "qwoprocks": 16,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditClientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.logic.commands.ClientEditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.ContractExpiryDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Timezone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A utility class to help with building EditClientDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class EditClientDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final EditClientDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        this.descriptor \u003d new EditClientDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns an {@code EditClientDescriptor} with fields containing {@code client}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder(Client client) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setName(client.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setPhone(client.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setEmail(client.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setAddress(client.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.setCountry(client.getCountry());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.setTimezone(client.getTimezone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setContractExpiryDate(client.getContractExpiryDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Name} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Email} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code Address} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code Country} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public EditClientDescriptorBuilder withCountry(String country) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.setCountry(new Country(country));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sets the {@code Timezone} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public EditClientDescriptorBuilder withTimezone(String timezone) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        descriptor.setTimezone(new Timezone(timezone));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Sets the {@code contractExpiryDate} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptorBuilder withContractExpiryDate(String contractExpiryDate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        descriptor.setContractExpiryDate(new ContractExpiryDate(contractExpiryDate));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public EditClientDescriptor build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 21,
      "qwoprocks": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TbmManagerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * A utility class to help with building TbmManager objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " *     {@code TbmManager tm \u003d new TbmManagerBuilder().withClient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TbmManagerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private final TbmManager tbmManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TbmManagerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager \u003d new TbmManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TbmManagerBuilder(TbmManager tbmManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.tbmManager \u003d tbmManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Adds a new {@code Client} to the {@code TbmManager} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TbmManagerBuilder withClient(Client client) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tbmManager.addClient(client);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TbmManager build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tbmManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 33,
      "qwoprocks": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Conducts all basic equals tests."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static \u003cT\u003e void basicEqualsTests(T object) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(object.equals(object));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(object.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different class -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(object.equals(2.0f));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // random object -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        Object randomObject \u003d new Object();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(object.equals(randomObject));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the middle index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Index.fromOneBased(model.getSortedFilteredClientList().size() / 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the last index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return Index.fromOneBased(model.getSortedFilteredClientList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Returns the client in the {@code model}\u0027s client list at {@code index}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static Client getClient(Model model, Index index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        return model.getSortedFilteredClientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 26,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTRACT_EXPIRY_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTRACT_EXPIRY_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMEZONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.model.TbmManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": " * A utility class containing a list of {@code Client} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class TypicalClients {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withPhone(\"94351253\").withCountry(\"SG\").withTimezone(\"GMT+8\").withContractExpiryDate(\"1-4-2021\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withLastModifiedInstant(\"2020-01-01T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withCountry(\"SG\").withTimezone(\"GMT+8\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withContractExpiryDate(\"3-12-2022\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withLastModifiedInstant(\"2020-02-02T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withCountry(\"US\").withTimezone(\"GMT-4\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withContractExpiryDate(\"30-1-2022\").withLastModifiedInstant(\"2020-03-03T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withCountry(\"SG\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withTimezone(\"GMT+8\").withContractExpiryDate(\"28-2-2021\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withLastModifiedInstant(\"2020-04-04T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withCountry(\"GB\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withTimezone(\"GMT+1\").withContractExpiryDate(\"10-10-2024\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withLastModifiedInstant(\"2020-05-05T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withCountry(\"JP\").withTimezone(\"GMT+9\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withContractExpiryDate(\"9-11-2022\").withLastModifiedInstant(\"2020-06-06T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withCountry(\"US\").withTimezone(\"GMT-4\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withContractExpiryDate(\"2-8-2021\").withLastModifiedInstant(\"2020-07-07T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withCountry(\"IN\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withTimezone(\"GMT+5\").withContractExpiryDate(\"23-4-2021\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withLastModifiedInstant(\"2020-08-08T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withCountry(\"US\").withTimezone(\"GMT-4\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withContractExpiryDate(\"31-12-2020\").withLastModifiedInstant(\"2020-09-09T00:00:00.000000Z\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    // Manually added - Client\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCountry(VALID_COUNTRY_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withTimezone(VALID_TIMEZONE_AMY).withContractExpiryDate(VALID_CONTRACT_EXPIRY_DATE_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withCountry(VALID_COUNTRY_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            .withTimezone(VALID_TIMEZONE_BOB).withContractExpiryDate(VALID_CONTRACT_EXPIRY_DATE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private TypicalClients() {} // prevents instantiation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns an {@code TbmManager} with all the typical clients."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static TbmManager getTypicalTbmManager() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        TbmManager tm \u003d new TbmManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            tm.addClient(client);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tm;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static List\u003cClient\u003e getTypicalClients() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client alice \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client benson \u003d new ClientBuilder(BENSON).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client carl \u003d new ClientBuilder(CARL).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client daniel \u003d new ClientBuilder(DANIEL).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client elle \u003d new ClientBuilder(ELLE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client fiona \u003d new ClientBuilder(FIONA).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Client george \u003d new ClientBuilder(GEORGE).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Arrays.asList(alice, benson, carl, daniel, elle, fiona, george);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 8,
      "tankangliang": 30,
      "qwoprocks": 29,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qwoprocks": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ClientListCardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysClient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.ClientCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class ClientListCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client client1 \u003d new ClientBuilder().withName(\"client1\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ClientListCard clientCard \u003d new ClientListCard(client1, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(clientCard);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCardDisplay(clientCard, client1, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Client client2 \u003d new ClientBuilder().withName(\"client2\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        clientCard \u003d new ClientListCard(client2, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(clientCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertCardDisplay(clientCard, client2, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void constructor_badClient_throwsException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // null client"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClientListCard(null, 0),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "                \"Card is being created with a null client\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientListCard amyClientListCard \u003d new ClientListCard(AMY, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(amyClientListCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientListCard copy \u003d new ClientListCard(AMY, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(copy, amyClientListCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(new ClientListCard(BOB, 0), amyClientListCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertNotEquals(new ClientListCard(AMY, 1), amyClientListCard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Asserts that {@code clientListCard} displays the details of {@code expectedClient} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void assertCardDisplay(ClientListCard clientListCard, Client expectedClient, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        ClientCardHandle clientCardHandle \u003d new ClientCardHandle(clientListCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedId + \". \", clientCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCardDisplaysClient(expectedClient, clientCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 49,
      "tankangliang": 6,
      "qwoprocks": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ClientListPanelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalClients;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysClient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.ClientCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.ClientListPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ClientListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final ObservableList\u003cClient\u003e TYPICAL_CLIENTS \u003d FXCollections.observableList(getTypicalClients());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ClientListPanelHandle clientListPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        initUi(TYPICAL_CLIENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CLIENTS.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            clientListPanelHandle.navigateToCard(TYPICAL_CLIENTS.get(i));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Client expectedClient \u003d TYPICAL_CLIENTS.get(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            ClientCardHandle actualCard \u003d clientListPanelHandle.getClientCardHandle(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertCardDisplaysClient(expectedClient, actualCard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * TODO: Update accordingly when the GUI changes to accommodate Notes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * This is probably useless as TBM has almost no significant interaction with the ListView."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * However the this test is a good benchmark should we refactor the ListView. According to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * changes suggested in displaying notes, more performance test may be needed for this specific ListView."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ObservableList\u003cClient\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ObservableList\u003cClient\u003e createBackingList(int clientCount) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ObservableList\u003cClient\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c clientCount; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            Client client \u003d new ClientBuilder().withName(i + \"Kim Lim\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            backingList.add(client);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void initUi(ObservableList\u003cClient\u003e backingList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        ClientListPanel clientListPanel \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                new ClientListPanel(backingList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(clientListPanel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        clientListPanelHandle \u003d new ClientListPanelHandle(getChildNode(clientListPanel.getRoot(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                ClientListPanelHandle.CLIENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 81,
      "qwoprocks": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(commandBox);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void commandBox_handleKeyPush() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 90,
      "qwoprocks": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CountryNoteListPanelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class CountryNoteListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    //TODO: Add more tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final ObservableList\u003cCountryNote\u003e COUNTRY_NOTE_OBSERVABLE_LIST \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * Verifies that creating and deleting large number of notes in {@code CountryNoteListPanel} requires lesser than"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        createBackingList(250);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNoteListPanel countryNoteListPanel \u003d new CountryNoteListPanel(COUNTRY_NOTE_OBSERVABLE_LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        uiPartExtension.setUiPart(countryNoteListPanel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            CountryNote countryNote \u003d new CountryNote(\"final test\", new Country(\"SG\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            guiRobot.interact(() -\u003e COUNTRY_NOTE_OBSERVABLE_LIST.add(countryNote));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void createBackingList(int numCards) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        for (int i \u003d 0; i \u003c numCards; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            CountryNote countryNote \u003d new CountryNote(\"#\" + i, new Country(\"SG\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            COUNTRY_NOTE_OBSERVABLE_LIST.add(countryNote);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 4,
      "qwoprocks": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.extension.RegisterExtension;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.ui.testutil.UiPartExtension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A GUI unit test class for TBM."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * NTS: Either use this or FxRobot and ApplicationTest extension for the testing of GUI."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    // It crashed on my windows with an exact log file, so I\u0027m leaving it here."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    // TODO: Remove this workaround after using JavaFX version 13 or above"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    // This is a workaround to solve headless test failure on Windows OS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    // Refer to https://github.com/javafxports/openjdk-jfx/issues/66 for more details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            System.loadLibrary(\"WindowsCodecs\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @RegisterExtension"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public final UiPartExtension uiPartExtension \u003d new UiPartExtension();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assumptions.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.awt.datatransfer.DataFlavor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow(new MainApp()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(USERGUIDE_URL, helpWindowHandle.getUgUrl());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void pressEscKey_helpWindowIsShowing_returnsFalse() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void copyUrl_userGuideUrl_copiesCorrectly() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // See: https://stackoverflow.com/questions/52812363/getsystemclipboard-failed-on-headless-exception"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assumeFalse(guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        helpWindowHandle.clickOnCopyUrlButton();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String ugUrl \u003d (String) clipboard.getData(DataFlavor.stringFlavor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(USERGUIDE_URL, ugUrl);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void copyUrlByDirectAccess_userGuideUrl_copiesCorrectly() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assumeFalse(guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        helpWindowHandle.accessCopyUrlButton();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String ugUrl \u003d (String) clipboard.getData(DataFlavor.stringFlavor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(USERGUIDE_URL, ugUrl);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        //"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assumeFalse(guiRobot.isHeadlessMode(), \"Test skipped in headless mode\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 110,
      "qwoprocks": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.storage.JsonTbmManagerStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonTbmManagerStorage jsonTbmManagerStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new JsonTbmManagerStorage(temporaryFolder.resolve(\"tbmManager.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonTbmManagerStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager), new MainApp());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "            mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(mainWindowHandle.isShowing());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.clickOn(\"#file\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.clickOn(\"#exit\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.clickOn(\"#help\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.clickOn(\"#helpMenuItem\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // Close the main window"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 58,
      "tankangliang": 4,
      "qwoprocks": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assumptions.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.logic.commands.ClientViewCommand.MESSAGE_VIEW_CLIENT_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.awt.datatransfer.DataFlavor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.ClientViewCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.logic.commands.CountryNoteAddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import seedu.address.storage.JsonTbmManagerStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * This test class does not conduct a unit test."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class MainWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setup() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        JsonTbmManagerStorage jsonTbmManagerStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                new JsonTbmManagerStorage(temporaryFolder.resolve(\"tbmManager.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonTbmManagerStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager), new MainApp());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void main() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(mainWindowHandle.isShowing());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.clickOn(\"#commandTextField\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        InteractionTerminal terminal \u003d new InteractionTerminal(guiRobot.lookup(\"#commandTextField\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                .queryTextInputControl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"clear\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // checks the interaction of copy url and url is correct"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.clickOn(\"#help\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.clickOn(\"#helpMenuItem\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(guiRobot.isWindowShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.clickOn(\"#copyButton\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        if (!guiRobot.isHeadlessMode()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertEquals(USERGUIDE_URL, clipboard.getData(DataFlavor.stringFlavor));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(guiRobot.isWindowShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // command execution by robot"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client add n/Lim p/18002345 e/lim@gmail.com a/Yishun c/SG tz/GMT+8\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client add n/Kim p/18002346 e/kim@gmail.com a/Kishun c/SG tz/GMT+8\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client add n/Sim p/18002347 e/sim@gmail.com a/Sishun c/SG tz/GMT+8\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client edit 1 n/Jim\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client note add 1 t/reminder nt/birthday tmr\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client note add 1 t/reminder nt/party tmr\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client note add 1 t/reminder nt/takeout tmr\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client note add 2 t/reminder nt/homework submission\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"country note add c/SG nt/shamaladingdong\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"country note add c/SG nt/chingchangchongdingdong\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // skips the rest if headless: resultDisplay and view box does not update in headless."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assumeFalse(guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // unknown command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client viewf\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String unknownCommandMessage \u003d getResultMessage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, unknownCommandMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // some invalid command usage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client view\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String resultMessage \u003d getResultMessage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClientViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedMessage, resultMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // some valid command usage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"country note add\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String resultMessage2 \u003d getResultMessage();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String expectedMessage2 \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CountryNoteAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedMessage2, resultMessage2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client view 1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String resultMessage3 \u003d getResultMessage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        String expectedMessage3 \u003d String.format(MESSAGE_VIEW_CLIENT_SUCCESS, \"Lim\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedMessage3, resultMessage3);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // viewing clients"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client view 1\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        checkLabel(\"#name\", \"Jim\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client view 2\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        checkLabel(\"#name\", \"Kim\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"client view 3\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        checkLabel(\"#name\", \"Sim\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // viewing country"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        terminal.inputCommand(\"country note view\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        pauseToEyeball();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void checkLabel(String id, String value) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(value, guiRobot.lookup(id).queryLabeled().getText());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private String getResultMessage() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        return guiRobot.lookup(\"#resultDisplay\").queryTextInputControl().getText();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void pauseToEyeball() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * For gui interaction."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private class InteractionTerminal {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        private TextInputControl textInputControl;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public InteractionTerminal(TextInputControl textInputControl) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            this.textInputControl \u003d textInputControl;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        public void inputCommand(String command) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            textInputControl.setText(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            guiRobot.press(KeyCode.ENTER).release(KeyCode.ENTER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 156,
      "tankangliang": 4,
      "qwoprocks": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/NoteListCardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import guitests.guihandles.NoteListCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.note.CountryNote;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "public class NoteListCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String DUMMY_NOTE_CONTENT \u003d \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \" eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \" exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \" reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            + \" occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private static final String DUMMY_NOTE_CONTENT_2 \u003d \"note content 2 here\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private final Country country \u003d new Country(\"SG\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(DUMMY_NOTE_CONTENT, country);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        NoteListCard countryNoteCard \u003d new NoteListCard(countryNote, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(countryNoteCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertCardDisplay(countryNoteCard, countryNote, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    private void assertCardDisplay(NoteListCard countryNoteCard, CountryNote expectedCard, int expectedId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        NoteListCardHandle noteListCardHandle \u003d new NoteListCardHandle(countryNoteCard.getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(expectedCard.getNoteContent(), noteListCardHandle.getNoteContent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertEquals(\"#\" + expectedId, noteListCardHandle.getNoteId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNote countryNote \u003d new CountryNote(DUMMY_NOTE_CONTENT, country);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        NoteListCard countryNoteCard \u003d new NoteListCard(countryNote, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(countryNoteCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        NoteListCard countryNoteCard2 \u003d new NoteListCard(countryNote, 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(countryNoteCard.equals(countryNoteCard2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different country note -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        CountryNote countryNote2 \u003d new CountryNote(DUMMY_NOTE_CONTENT_2, country);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        NoteListCard countryNoteCard3 \u003d new NoteListCard(countryNote2, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(countryNoteCard.equals(countryNoteCard3));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same id same country note -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        NoteListCard countryNoteCardCopy \u003d new NoteListCard(countryNote, 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(countryNoteCard.equals(countryNoteCardCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 27,
      "qwoprocks": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void display_correctDisplayText() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"Waiting for command...\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Client Client Client\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(\"Client Client Client\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 39,
      "tankangliang": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"/data/stub/TBM.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/WidgetViewBoxTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static org.junit.jupiter.api.Assumptions.assumeFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "import static seedu.address.testutil.TestUtil.basicEqualsTests;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.WidgetViewBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.testutil.TypicalClients;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * GUI unit test for WidgetViewBox. Test done to ensure the integrity of content displayed does not regress in future"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * refactoring."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class WidgetViewBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final Client AMY \u003d TypicalClients.AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetViewBox widgetViewBox \u003d WidgetViewBox.init();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        widgetViewBox.updateClientDisplay(AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        AMY.addClientNote(new Note(\"Birthday TMR\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(widgetViewBox);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertViewBoxDisplay(widgetViewBox, AMY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * This test checks your time, country and timezone."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Since this is a manual eyeballing test. It will be skipped in headless."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void displayDefault() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        * A bug raised here https://bugs.java.com/bugdatabase/view_bug.do?bug_id\u003d7082429."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assumeFalse(guiRobot.isHeadlessMode(), \"Test skipped in headless mode.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetViewBox widgetViewBox \u003d WidgetViewBox.init();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(widgetViewBox);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // check if the country is correct"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void updateContentToEmptyObject_updatesProperly_newObjectIsSuccessfullyUpdated() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // This is primarily testing that the textclock does not show itself during an update."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetViewBox widgetViewBox \u003d WidgetViewBox.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        widgetViewBox.updateClientDisplay(AMY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        Client benson \u003d TypicalClients.BENSON;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        widgetViewBox.updateClientDisplay(benson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        uiPartExtension.setUiPart(widgetViewBox);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertViewBoxDisplay(widgetViewBox, benson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetViewBox obj1 \u003d WidgetViewBox.init();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        obj1.updateClientDisplay(AMY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetViewBox obj2 \u003d WidgetViewBox.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        obj2.updateClientDisplay(AMY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetViewBox obj3 \u003d WidgetViewBox.init();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        obj3.updateClientDisplay(TypicalClients.BENSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // basic equals tests"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        basicEqualsTests(obj1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertTrue(obj1.equals(obj2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": "        assertFalse(obj1.equals(obj3));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private void assertViewBoxDisplay(WidgetViewBox widgetViewBox , Client expectedClient) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        WidgetViewBoxHandle widgetViewBoxHandle \u003d new WidgetViewBoxHandle(widgetViewBox.getRoot());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        // Testing using the equals method of handler."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertTrue(widgetViewBoxHandle.equals(expectedClient));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 72,
      "qwoprocks": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/WidgetViewOptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class WidgetViewOptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void generateClientWidgetOption_isClientTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        WidgetViewOption widgetViewOption \u003d WidgetViewOption.generateClientWidgetOption();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(widgetViewOption.isClient());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(widgetViewOption.isCountryNote());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(Country.NULL_COUNTRY, widgetViewOption.getCountry());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void generateCountryNoteWidgetOption_isCountryNoteTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        WidgetViewOption widgetViewOption \u003d WidgetViewOption.generateCountryNoteWidgetOption(Country.NULL_COUNTRY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(widgetViewOption.isClient());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(widgetViewOption.isCountryNote());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(Country.NULL_COUNTRY, widgetViewOption.getCountry());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        widgetViewOption \u003d WidgetViewOption.generateCountryNoteWidgetOption(new Country(\"SG\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(widgetViewOption.isClient());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(widgetViewOption.isCountryNote());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(new Country(\"SG\"), widgetViewOption.getCountry());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void generateNullWidgetOption_allFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        WidgetViewOption widgetViewOption \u003d WidgetViewOption.generateNullWidgetOption();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(widgetViewOption.isClient());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(widgetViewOption.isCountryNote());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(Country.NULL_COUNTRY, widgetViewOption.getCountry());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qwoprocks"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 39,
      "qwoprocks": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.ClientCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.ClientListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static void assertCardEquals(ClientCardHandle expectedCard, ClientCardHandle actualCard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedClient}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static void assertCardDisplaysClient(Client expectedClient, ClientCardHandle actualCard) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedClient.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedClient.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedClient.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expectedClient.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Asserts that the list in {@code clientListPanelHandle} displays the details of {@code clients} correctly and"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static void assertListMatching(ClientListPanelHandle clientListPanelHandle, Client... clients) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        for (int i \u003d 0; i \u003c clients.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            clientListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            assertCardDisplaysClient(clients[i], clientListPanelHandle.getClientCardHandle(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Asserts that the list in {@code clientListPanelHandle} displays the details of {@code clients} correctly and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static void assertListMatching(ClientListPanelHandle clientListPanelHandle, List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertListMatching(clientListPanelHandle, clients.toArray(new Client[0]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Asserts the size of the list in {@code clientListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static void assertListSize(ClientListPanelHandle clientListPanelHandle, int size) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        int numberOfPeople \u003d clientListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/StageExtension.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.extension.AfterEachCallback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.extension.BeforeEachCallback;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.junit.jupiter.api.extension.ExtensionContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class StageExtension implements BeforeEachCallback, AfterEachCallback {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void beforeEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void afterEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/UiPartExtension.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "public class UiPartExtension extends StageExtension {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeEnHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeEnHao": 29
    }
  }
]
