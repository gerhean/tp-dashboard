[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-3/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "# Baymax"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Baymax is a clinic appointment manager, that helps to make scheduling simple and efficient, designed with optimising"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  user experience in mind. \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Baymax is a desktop application targeted at clinic receptionists who want managing appointments to be more seamless."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Baymax has a Graphic User Interface optimised for healthcare professionals who can work well with the Command Line"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  Interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "# Sitemap"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* User Guide \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Developer Guide \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* About Us \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Contact Us \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "# Acknowledgements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Original source code, AddressBook-Level3, was created by SE-EDU initiative."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Libraries used: JavaFX, Jackson, JUnit5"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "# License: MIT"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 20,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "mainClassName \u003d \u0027team.baymax.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    archiveName \u003d \u0027baymax.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "-": 70
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c!-- Checks that there are no tabId characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 402
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "We are [Team](https://github.com/AY2021S1-CS2103T-W12-3/tp) Baymax."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### Jianhan"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "\u003cimg src\u003d\"images/jianhandev.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "[[github](http://github.com/jianhandev)]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[[portfolio](team/jianhandev.md)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Role: Team Leader"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Responsibilities: Integration, Git Expert"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Features: Calendar"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Components: UI, Logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### Thuta"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "\u003cimg src\u003d\"images/thutahw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "[[github](http://github.com/thutahw)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[[portfolio](team/thutahw.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Responsibilities: Code Quality, UML Expert"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Features: Patient Information Management"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Components: Common, Storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### Kaitlyn"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cimg src\u003d\"images/kaitlynng.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "[[github](http://github.com/kaitlynng)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[[portfolio](team/kaitlynng.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Responsibilities: Testing, Documentation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Features: Calendar"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Components: Common, Storage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### Reuben"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cimg src\u003d\"images/theyellowfellow.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "[[github](http://github.com/theyellowfellow)]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[[portfolio](team/theyellowfellow.md)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Responsibilities: Deliverables \u0026 Deadlines, Scheduling \u0026 Tracking"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Features: Appointment Management"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Components: UI, Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### Hui Ling"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cimg src\u003d\"images/porkeypine.png\" width\u003d\"200px\" style\u003d\"border-radius:50%\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "[[github](http://github.com/porkeypine)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[[portfolio](team/porkeypine.md)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Responsibilities: Documentation, IntelliJ Expert"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* Features: Appointment Management"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Components: Model, Logic"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 13,
      "thutahw": 32,
      "-": 23
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "# Baymax - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[1. Introduction](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[2. Setting up](#2-setting-up-getting-started)\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[3. Design](#3-design)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.1. Architecture](#31-architecture)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2. UI Component](#32-ui-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3. Logic Component](#33-logic-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4. Model Component](#34-model-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.5. Storage Component](#35-storage-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.6. Storage Component](#36-common-classes)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[4. Implementation](#4-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.1 List Managers](#41-list-managers)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.2 Patient Manager](#42-patient-manager)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.3 Apointment Manager](#43-appointment-manager)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[4.4 Calendar Feature](#44-calendar-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[5. Documentation](#5-documentation)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[6. Testing](#6-testing)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[7. Dev Ops](#7-dev-ops)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[Appendix A: Product Scope](#appendix-a-product-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[Appendix B: User Stories](#appendix-b-user-stories)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[Appendix C: Use Cases](#appendix-c-use-cases)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[Appendix D: Non-functional Requirements](#appendix-d-non-functional-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[Appendix E: Glossary](#appendix-e-glossary)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[Appendix F: Instructions for Manual Testing](#appendix-f-instructions-for-manual-testing)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **1. Introduction**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Baymax is a desktop appointment manager made for clinic receptionists. It focuses on the Command Line Interface (CLI) while providing users with a simple and intuitive Graphical User Interface (GUI). Thus, the main interaction with Baymax will be done through user text-based commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Baymax allows receptionists to keep track of patients and appointments in a single, integrated platform."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "The purpose of this Developer Guide is to help you understand the design and implementation of Baymax, so that you can become a contributor to this project as well."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **2. Setting up, getting started**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **3. Design**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "In this section, you will learn about the general design and structure of the Baymax application. This section explains how each component in Baymax works individually. Baymax is created with the Object-Oriented Programming Paradigm in mind, and follows the Facade Pattern and Command Pattern in software design."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### **3.1. Architecture**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 1. Architecture Diagram of Baymax"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "The following table provides a quick overview of each component of Baymax. More details about each individual component can be found in the following subsections."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| Component | Description"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| --------- | ------------------------------------------"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `Main`    | Has two classes called Main and MainApp.\u003cbr\u003e\u003cbr\u003e It is responsible for: \u003cbr\u003e1. At App launch: Initializes the components in the correct sequence, and connects them up with each other. \u003cbr\u003e2. At shut down: Shuts down the components and cleanup resources where necessary."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `Commons` | Represents a collection of classes used by multiple other components. \u003cbr\u003e\u003cbr\u003eIt also contains the LogCenter component. The LogCenter component plays an important role at the architectural level and is used by many classes to write log messages to the App’s log file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `UI`      | Handles the UI of the App."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `Logic`   | Executes commands."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `Model`   | Holds the data of the App in memory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `Storage` | Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 2. Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `deleteappt 1`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 3. Architecture Sequence Diagram\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### 3.2. UI component"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "(Contributed by Li Jianhan)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "This segment will explain the structure and responsibilities of the `UI` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### 3.2.1. Structure"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 4. Structure of the UI component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts such as `PatientListPanel`, `CalendarPage` as shown in the *Class Diagram* above. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "The `Page` is an abstract class that represents a page corresponding to each tab in the GUI. Each tab will display information on different features of Baymax. The following classes inherit from the `Page` abstract class:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- Dashboard"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- PatientInfoPage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- AppointmentInfoPage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- CalendarPage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- InfoPage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### 3.2.2. Responsibilities"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### 3.3. Logic component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 5. Structure of the Logic Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. `Logic` uses the `AppointmentBookParser` class to parse the user command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a patient), which is executed by the `ModelManager` which calls `PatientManager` and `AppointmentManager`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deleteappt 1\")` API call."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "![Interactions Inside the Logic Component for the `deleteappt 1` Command](images/DeleteAppointmentSequenceDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 6. Delete Appointment Sequence Diagram"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### 3.4. Model component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "This segment will explain the structure and responsibilities of the Model component."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "#### 3.4.1. Structure"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 7. Structure of the Model Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "The `Model`component contains `ListManager`s that handle two main types of data in Baymax, `Patient` and `Appointment`. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Each type of data is handled by a separate `ListManager` (to give `PatientManager` and `AppointmentManager`), and a "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "`ModelManager` facade class exposes the methods "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "that enable other components to perform getting, setting, searching and editing functions on the different "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "types of data."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "The `Model` component also contains"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* unmodifiable `ObservableList` objects for each type of data that can be \u0027observed\u0027 e.g. the UI can be bound to this "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  list so that the UI automatically updates when the data in the list change. "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "The `Model` component does not depend on any of the other three components."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "#### 3.4.2. Responsibilities"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "The `Model` component,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* Stores different types of data in memory when Baymax is running"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* Represents data in `ObservableList` to automatically update the GUI when there is a change"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### 3.5. Storage component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "This segment will explain the structure and responsibilities of the Storage component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "#### 3.5.1. Structure"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 8. Structure of the Storage Component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "The `Storage` component contains interfaces for `Patient` data (`PatientManagerStorage`) and "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "`Appointment` data (`AppointmentManagerStorage`) which defines methods for reading and saving the `Model` components"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "to memory. This allows for multiple different implementations of storage to store the data in different formats, e.g. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "json, csv, plaintext. A facade class `StorageManager` is used to expose these reading and writing methods."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "The `JsonPatientManagerStorage` and `JsonAppointmentManagerStorage` are specific implementations of "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "`PatientManagerStorage` and `AppointmentManagerStorage` that saves the `Patient` and `Appointment` data to "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "json files. The path to these files are obtained from the `UserPref` object. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "#### 3.5.2. Responsibilities"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* can save `UserPref` objects in json format."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* can parse a json file in the correct format to get a `UserPref` object.  "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* can save `Patient` and `Appointment` data in json format. "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* can parse a json file in the correct format to get a `PatientManager` or `AppointmentManager` object."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### 3.6. Common classes"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **4. Implementation**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### **4.1 List Managers**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "(Contributed by Kaitlyn Ng)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "List Managers allow the Baymax application to handle lists of the different types of data in the application, "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "namely `Patient` and `Appointment`. `ListManager` defines methods for Create, Read, Update and Delete (CRUD) operations "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "that are common to all the types of data, and needed to manage the lists of data effectively. "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### 4.1.1 Rationale"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "The separation of `Patient` and `Appointment` data into separate ListManagers allow for a common software architecture "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "between data types. Lists of data within the application can thus be handled more efficiently, and other types of data "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "can be added to extend the application with minimal modification to the code."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### 4.1.2. Current Implementation"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Each `ListManager`contains a `UniqueList` which is a generic class that stores all the data items in a list and"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "and maintains the uniqueness of the data objects in the list while doing so. This ensures that in every `UniqueList`, "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "there is only one of each object. The `UniqueList` class is a generic class that can only contain data items that "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "extend the `UniqueListElement` interface, which ensures data items contain the necessary comparison functions for "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "`UniqueList` to maintain uniqueness. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Each ListManager implements the `ReadOnlyListManager` interface. This interface has the `getReadOnlyList()` method "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "which returns an `ObservableList` of data items, to be monitored by the GUI."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### 4.1.3. Design Consideration"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "**Aspect: Separation into distinct list managers for each type of data.**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Option 1: Split into separate lists (Current)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Pros:*"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Increases modularity of the code by separating it into distinct sections to handle data whose operations do not"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "often require interaction between them."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* Allows for more straightforward implementations in other components by ensuring each data type is handled with the"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "class architecture."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Cons:*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* A lot of boilerplate code for implementing the list managers as separate classes but with similar "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  functionalities"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Option 2: Store all the information in a single `DataManager` "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Pros:*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Easier to implement, as only one manager class is needed."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Cons:*"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Violates the Separation of Concerns principle, making it difficult to implement future extensions without"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "significant change to other components."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Reason for choosing Option 1:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Sound design principles are key to ensuring that the program is bug-free, easily testable and easily extendable in the "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "future. Option 1 increases modularity of the code to create more opportunities for module upgrade, reuse and"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "independent development for each data type, limiting the amount of change needed to other components when there are"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "changes in the `Model`. This will save time in the long run and reduce the possibility of introducing breaking bugs due"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "to unnecessary dependencies between data types."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "**Aspect: Extract common CRUD operations with a generic class**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Option 1: Extract common CRUD functionalities of the `ListManager`s into a"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "single `UniqueList` class. The `ListManager`s will store data items in the `UniqueList` generic class and build on top"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "of the generic CRUD operations from the class. "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* Pros: Reduces amount of repeated code as all the lists of data essentially perform the same functions."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* Cons: Generics can be harder to comprehend, thus making it harder for other programmers to understand and"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "use the component. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Option 2: Do not extract any common functionalities"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* Pros: Easier for programmers to work on each code related to each data item completely separately, and implement "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "methods specific to the data item in a more straightforward manner."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "* Cons: Violates the Don\u0027t Repeat Yourself principle as there will be a lot of repeated CRUD operations."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Reason for choosing Option 1:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Following the Don\u0027t Repeat Yourself design principle will allow for more abstraction and less duplication in the code,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "which facilitates future extensions and reduce effort in maintenance and testing by reducing repeated code. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### **4.2 Patient Manager**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "(Contributed by Thuta Htun Wai)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Baymax allows the user to manage patient information. A user can only deal with a single patient at any time. i.e. Only"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thutahw"
        },
        "content": "a single patient\u0027s information can be managed at one time. A user can:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Add a new patient"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Delete an existing patient"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Edit a patient\u0027s details"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* List all the patients in the system"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Find a patient by using a keyword from his/her name"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* List all the appointments of a specific patient"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.2.1 Rationale"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thutahw"
        },
        "content": "The Patient Manager feature is included in Baymax because it is one of the core features of the application."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If the user wants to keep track of the patient\u0027s information, he/she has to record the details"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "thutahw"
        },
        "content": "of the patient and be able to look up a patient in the system easily."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.2.2. Current Implementation"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "thutahw"
        },
        "content": "The `patient` package in the `Model` component contains the necessary information related to a patient. \u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "thutahw"
        },
        "content": "When a user enters a valid command (Let\u0027s say the `addpatient` command), the parser classes parses the command word"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thutahw"
        },
        "content": "and the arguments and then creates an `AddPatientCommand` object. When the `AddPatientCommand` is executed,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "thutahw"
        },
        "content": "the new patient is added into the appointment book and a success message is printed in the results display box. \u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "The following diagram shows what happens when a user enters an `addpatient` command."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "![AddPatientActivityDiagram](images/AddPatientActivityDiagram.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Figure 9. Workflow of an addpatient command"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thutahw"
        },
        "content": "The following table shows the commands related to managing a patient\u0027s details.\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "thutahw"
        },
        "content": "| Command | Purpose"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "thutahw"
        },
        "content": "| --------- | ------------------------------------------"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "thutahw"
        },
        "content": "| `addpatient` | Adds a patient to the appointment book."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "thutahw"
        },
        "content": "| `deletepatient` | Deletes a patient."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "thutahw"
        },
        "content": "| `listpatient` | Lists all patients."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "thutahw"
        },
        "content": "| `editpatient` | Edits a patient\u0027s details."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "thutahw"
        },
        "content": "| `findpatient` | Finds a patient with the given search string (name)."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "thutahw"
        },
        "content": "| `listpatientappts` | Lists all the appointments of a specific patient."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.2.3. Design Consideration"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "thutahw"
        },
        "content": "For all the commands except the `listpatientappts` command, the current implementation is the best we came up with in terms of following good coding principles and"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "thutahw"
        },
        "content": "making the user easily understand the commands. \u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thutahw"
        },
        "content": "As for the `listpatientappts` command, we decided not to continue this functionality from the `listappt` command in the"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "thutahw"
        },
        "content": " `appointment` package. This is because we feel that it is better to have a separate class and a separate command word to list all"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thutahw"
        },
        "content": " the appointments of a specific patient instead of adding a new prefix keyword after `listappt` i.e `listappt by/PATIENT INDEX`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### **4.3 Appointment Manager**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "(Contributed by Shi Hui Ling \u0026 Reuben Teng)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Scheduling, viewing, and otherwise dealing with appointments is a key feature area for Baymax. `AppointmentManager` maintains a `UniqueList` of all `Appointment`s in the app, and executes the logic of most appointment commands. "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`AppointmentManager` contains the methods necessary to operate on the `UniqueList` of `Appointment`s. These include:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " 1. Adding an appointment"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " 2. Editing an appointment"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " 3. Deleting an appointment"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " 4. Finding a specific appointment by `Patient` and `DateTime`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " 5. Sorting the list of appointments"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "These methods are used by the `AppointmentCommand` classes to execute their logic."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.3.1 Rationale"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "The `AppointmentManager` class contains a summary of all the \"back-end\" logic of appointment commands on the app\u0027s `UniqueList` of `Appointment`s. This follows the SRP, as everything related to the execution of appointment commands can be found here. This also forces the customising of code to fit exactly the purposes needed for appointment commands, even if the methods simply call a `UniqueList` method that fulfills the exact purpose."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.3.2. Current Implementation"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Makes use of many methods from `UniqueList`, e.g. `add`, `setElement`, `remove`, `sort`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.3.3. Design Consideration"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Aspect 1: `deleteappt` Command** "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "For this command, we only required the specifying of `DateTime` of the appointment and we allowed specifying the `Patient` by `name`, `nric`, or `index` (in the currently displayed list). This is to ensure that receptionists can opt for either a more intuitive way to specify a `Patient` (by `name` or `index`) or a quicker and more \"guaranteed correct\" way (by `nric`)."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Additionally, we only require matching of `DateTime` and `Patient` of appointment as no two appointments should have those two fields exactly the same. By paring down the command\u0027s arguments to the minimum possible, we make the command more succinct and easy to use for receptionists. It is also easier implementation-wise."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Aspect 2: `nric` field**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "To ensure that `Appointment`s are json serialisable for `Storage` in the same way as `Patient`s, all fields of the `Appointment` class have to be serialisable. To achieve this, an `nric` field is added to each `Patient` to uniquely identify patients currently stored in the system. When serialising an `Appointment`, the patient field stores the `nric` string of the patient instead, and when reading an `Appointment` from memory a lookup is performed on the existing list of patients before a valid `Appointment` object is created containing an existing Patient object."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### **4.3 Appointment Manager**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "(Contributed by Shi Huiling \u0026 Reuben Teng)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Scheduling, viewing, and otherwise dealing with appointments is a key feature area for Baymax. `AppointmentManager` maintains a `UniqueList` of all `Appointment`s in the app, and executes the logic of most appointment commands. "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "`AppointmentManager` contains the methods necessary to operate on the `UniqueList` of `Appointment`s. These include:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " 1. Adding an appointment"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " 2. Editing an appointment"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " 3. Deleting an appointment"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " 4. Finding a specific appointment by `Patient` and `DateTime`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " 5. Sorting the list of appointments"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "These methods are used by the `AppointmentCommand` classes to execute their logic."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### 4.3.1 Rationale"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "The `AppointmentManager` class contains a summary of all the \"back-end\" logic of appointment commands on the app\u0027s `UniqueList` of `Appointment`s. This follows the SRP, as everything related to the execution of appointment commands can be found here. This also forces the customising of code to fit exactly the purposes needed for appointment commands, even if the methods simply call a `UniqueList` method that fulfills the exact purpose."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### 4.3.2. Current Implementation"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Makes use of many methods from `UniqueList`, e.g. `add`, `setElement`, `remove`, `sort`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### 4.3.3. Design Consideration"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Aspect 1: `deleteappt` Command** "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "For this command, we only required the specifying of `DateTime` of the appointment and we allowed specifying the "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "`Patient` by `name`, `nric`, or `index` (in the currently displayed list). This is to ensure that receptionists can opt "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "for either a more intuitive way to specify a `Patient` (by `name` or `index`) or a quicker and more \"guaranteed "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "correct\" way (by `nric`)."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Additionally, we only require matching of `DateTime` and `Patient` of appointment as no two appointments should have "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "those two fields exactly the same. By paring down the command\u0027s arguments to the minimum possible, we make the command "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "more succinct and easy to use for receptionists. It is also easier implementation-wise."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Aspect 2: `nric` field**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "To ensure that `Appointment`s are json serialisable for `Storage` in the same way as `Patient`s, all fields of the "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "`Appointment` class have to be serialisable. To achieve this, an `nric` field is added to each `Patient` to uniquely "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "identify patients currently stored in the system. When serialising an `Appointment`, the patient field stores the "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "`nric` string of the patient instead, and when reading an `Appointment` from memory a lookup is performed on the "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "existing list of patients before a valid `Appointment` object is created containing an existing Patient object."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### **4.4 Calendar Feature**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "(Contributed by Li Jianhan \u0026 Kaitlyn Ng)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Baymax allows the user to manage appointments using a built-in calendar. Baymax is implemented in such a way that the "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "application revolves around one central calendar. In the Calendar Manager, the user can set a particular year and "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "month, following which any calendar-related commands entered will be with respect to that year and month."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.4.1 Rationale"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "The Calendar feature is included in Baymax because it makes displaying appointments by date more intuitive. On top of "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "that, it provides a visual view of appointments in a day relative to time, serving as a tool for helping the "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "receptionist to avoid potential collisions in appointment timings. The calendar\u0027s month view also serves the purpose of "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "giving a broad overview of how busy each day is in a month."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.4.2. Current Implementation"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "The `CalendarManager` class in the `Model` component contains a `AppointmentCalendar` object, storing the currently set "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "`year`, `month` and `day`. Note that the `year`, `month` and `day` attributes may not necessarily be storing the "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "current year, month and day. Rather, it is dependent on what the user set them to. Hence, it follows that there should "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "be setter methods inside the `CalendarManager` class that allow the user to change the value of those fields, so as to "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "view all appointments relative to a particular year or month."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "The following table shows the commands related to managing the appointment calendar:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "|Command    | Purpose"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| --------- | ------------------------------------------"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `year`    | Sets the calendar to a particular year. \u003cbr\u003eThis defaults to the current year."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `month`   | Sets the calendar to a particular month. At the same time, the calendar UI changes to reflect the data in the newly declared month. \u003cbr\u003eThis defaults to the current month."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "| `day`     | Sets the calendar to a particular day. At the same time, the calendar UI changes to reflect a list of appointments on this day. \u003cbr\u003eThis defaults to the current day of the month."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 4.4.3. Design Consideration"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Aspect: the necessity of a day view"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Option 1: Necessary (Current)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- Pros: User is able to see all appointments on a particular day, in chronological order. This gives the receptionist better clarity of which other appointments are booked on that day. Thus, it will lead to better user experience."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- Cons: More difficult to implement as another view needs to be implemented which adds to the complexity of the application."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Option 2: Not necessary"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- Pros: User can simply find appointments by date to list out all appointments on that day. This is much easier to implement, and also means less commands to remember since it can be grouped under a find command."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- Cons: It is less intuitive and requires longer commands."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Reason for choosing Option 1:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- Having a day view in the calendar allows the user to zoom in to a particular day, and hence makes the calendar more complete."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- Having a chronological view of the appointments in a day allows the receptionist to spot timing collisions, and hence schedule appointments more efficiently."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **5. Documentation**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **6. Testing**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **7. Dev Ops**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **Appendix A: Product scope**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "thutahw"
        },
        "content": "(Contributed by Thuta Htun Wai)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* needs to manage significant number of patients and appointments"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* wants to keep track of patients and appointments efficiently"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* wants to look up patients and/or appointments easily by using matching words"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* wants to look at current and past appointments through a calendar view"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* is reasonably comfortable using [CLI](https://en.wikipedia.org/wiki/Command-line_interface) apps"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* A handy tool for clinic staff, especially the receptionists, to deal with a large amount of patient information and their appointments."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Baymax can manage patient information and appointments better than a typical mouse driven medical appointment management app."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **Appendix B: User stories**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "(Contributed by Kaitlyn Ng)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ----------------------------------------------------------- |"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | forgetful receptionist of a clinic         | display all available commands | refer to the list of commands when I forget them            |"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | add a new patient              |                                                             |"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | list out all patients          |                                                             |"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | add a patient\u0027s contact information | contact them if needed                                 |"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | add a patient\u0027s emergency contact information | contact the patient\u0027s family members in times of emergencies |"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | view a patient\u0027s profile       |                                                             |"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | delete a patient profile       |                                                             |"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | add an appointment for a patient |                                                           |"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | list a patient\u0027s appointment history | keep track of it in case of future reference (like to track patient\u0027s medical progress through frequency of appointments) |"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | list a patient\u0027s future appointments | remind them of the appointments that they have made   |"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* * *`  | receptionist of a clinic                   | delete an existing appointment | remove cancelled appointments                               |"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | busy receptionist of a clinic              | find patients by name          | quickly retrieve the patient\u0027s information given just the patient\u0027s name |"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a busy clinic              | find patient by NRIC           | find patients using a unique ID if there are multiple patients with the same name |"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a clinic using the app for the first time | clear all current patient data | get rid of sample/experimental data I used for exploring the app |"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a clinic with busy patients | change a patient\u0027s appointment date | accommodate for last-minute changes in the patient\u0027s schedule |"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a clinic                   | delete all existing appointments of a patient | change all of a patient\u0027s appointments in the case of recovery or a serious change in medical condition |"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a clinic                   | mark an appointment as missed | keep track of which appointments did not occur due to various circumstances, and possibly arrange for other appointments in its place |"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `*`      | receptionist of a patient-centric clinic     | add preferred but currently unavailable slots for patient\u0027s appointments | give patients their more preferred slot if it is becomes available |"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `*`      | careless receptionist in the clinic          | undo appointment deletion       | restore appointments that I accidentally delete           |"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `*`      | careless receptionist in the clinic          | backdate an appointment         | add in appointments that I accidentally missed out        |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a clinic                   | view all the coming appointments in a particular year | have a gauge of the business of the clinic over that year |"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a clinic                   | display daily availability status of a month |                                                |"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a clinic                   | display the coming appointments in the next n days | gauge the business of the clinic in the next few days |"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `* *`    | receptionist of a clinic                   | display all the appointments on a particular day | check the availability of the clinic on that day to arrange for other appointments |"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "| `*`      | receptionist of a clinic using the app for the first time | see sample data in the app | visualise how the app looks like when it is in use and interact with existing data |"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **Appendix C: Use cases**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "(Contributed by Li Jianhan)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "For all use cases below, the **System** is `Baymax` and the **Actor** is the `user`, unless specified otherwise."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### Patient Profile Management"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003e **Use case: Edit a patient’s profile**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. User requests to displays the patient’s profile"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "2. Baymax displays the patient profile"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "3. User requests to edit the patient’s profile"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "4. Baymax saves the changes"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* 1a. Patient does not exist"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\t* 1a1. Baymax displays a not found message"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* 2a. The given user ID is invalid"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\t* 2a1. Baymax displays an error message"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\tUse case ends.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003e **Use case: Delete a patient’s profile**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. User requests to display the patient’s profile"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "2. Baymax displays the patient\u0027s profile"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "3. User requests to delete the patient’s profile"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "4. Baymax deletes the patient profile"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* 1a. Patient does not exist"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\t* 1a1. Baymax displays a not found message"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* 2a. The given user ID is invalid"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\t* 2a1. Baymax displays an error message"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\tUse case ends.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### Appointment Management"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003e **Use case: Change the date of an appointment**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. User requests to display an appointment"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "2. Baymax displays the requested appointment"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "3. User requests to change the date of appointment"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "4. Baymax changes the date of the appointment"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Use case ends. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003e **Use case: Delete an appointment on a particular day**"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. User requests to \u003cins\u003elist out all appointments on a particular day\u003c/ins\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "2. Baymax displays the appointments"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "3. User requests to delete the appointment"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "4. Baymax deletes the appointment"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Use case ends. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#### Calendar"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003e **Use case: List all appointments on a particular day**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. User requests to set the calendar to a particular year"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "2. Baymax calendar switches to the stipulated year"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "3. User requests to set the calendar to a particular month"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "4. Baymax calendar switches to the stipulated month in the given year"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "5. User requests to list all appointments on a given day in that month"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "6. Baymax displays a list of appointments on that given day"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Use case ends. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003e **Use case: List all appointments in the next *n* days**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. User requests to set the calendar to a particular year"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "2. Baymax calendar switches to the stipulated year"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "3. User requests to set the calendar to a particular month"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "4. Baymax calendar switches to the stipulated month in the given year"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "5. User requests to list all appointments in the next 7 days"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "6. Baymax displays a list of appointments in the next 7 days"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Use case ends. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **Appendix D: Non-Functional Requirements**"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "(Contributed by Shi Hui Ling))"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Technical Environment**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should work without requiring an installer."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should not depend on a remote server or other remote resources."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should work without an online connection."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Performance**"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should be able to save and load 200 patients’ worth of data without any noticeable delay in performance."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should respond within 2 seconds to all commands."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Quality**"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* A user with above-average typing speed for regular English text should be able to accomplish most of the tasks faster by typing commands than using the mouse."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should be easy to use for a new user when following the User Guide or `help` instructions."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should have a user-friendly graphical user interface and display."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Data**"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application data should load correctly on any mainstream OS given the data file is transferred properly."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application data should never be lost or removed except when user explicitly deletes something."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Project Scope**"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application is not required to handle detailed medical information about patients."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application is not required to handle the printing of patient profiles or saving them in a user-friendly manner (only displaying)."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application is not required to handle multiple users."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Process**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* The project is expected to adhere to a schedule that delivers a feature set every two weeks."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Extensibility \u0026 Documentation**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should be easily extended by developers looking to improve or expand it."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Application should be well-documented such that new developers can be on-boarded quickly just by reading through documentation."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## **Appendix E: Glossary**"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "(Contributed by Reuben Teng)"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *UI*"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* Abbreviation for User Interface, representing the point of human-computer interaction and communication."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *API*"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* Abbreviation for Application Programming Interface, which defines interactions between multiple software intermediaries."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *OOP*"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* Abbreviation Object-Oriented Programming, in which programmers organise software design around data (objects), rather than functions and logic."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *CLI*"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* Abbreviation for Command Line Interface, referring to an interface which accepts user inputs and commands in the form of text."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *MSS*"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* Abbreviation for Main Success Scenario, describing the most straightforward interaction for a given use case, which assumes that nothing goes wrong."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *OS*"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* Abbreviation Operating System, referring to mainstream Operating Systems Windows, Linux, OS-X."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *Private contact detail*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* A contact detail that is not meant to be shared with others."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *Boilerplate code*"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* Code that is reused without significant changes. Usually a sign of poor coding practices."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "#### *Separation of Concerns principle*"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* Principle of separating code into different sections, with each section handling a different concern. This allows for"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "  a more modular approach to implementation, with changes to one section not affecting another."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "## **Appendix F: Instructions for manual testing**"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### Deleting a patient"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Deleting a patient while all patients are being shown"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "   1. Prerequisites: List all patients using the `listpatients` command. Multiple patients in the list."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "   1. Test case: `deletepatient 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "   1. Test case: `deletepatient 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "thutahw"
        },
        "content": "      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "   1. Other incorrect delete commands to try: `deletepatient`, `deletepatient x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 203,
      "theyellowfellow": 85,
      "porkeypine": 85,
      "thutahw": 44,
      "-": 244,
      "kaitlynng": 92
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "   1. Run the `Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "   e.g. `StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "   e.g. `LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 34
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "title: Baymax - User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. [**Introduction**](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. [**Quick Start**](#2-quick-start)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "3. [**About**](#3-about)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    3.1. [Structure of this Document](#31-structure-of-this-document)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    3.2. [Reading this Document](#32-reading-this-document)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.1. [GUI Terminology](#321-gui-terminology)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.2. [General Symbols](#322-general-symbols)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.3. [Command Format \u0026 Syntax](#323-command-format--syntax)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "4. [**Navigating Between Tabs**](#4-navigating-between-tabs)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "5. [**Features**](#5-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    5.1. [Patient Information Management](#51-patient-information-management)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.1. [Add a new patient: `addpatient`](#511-add-a-new-patient-addpatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.2. [List all patients: `listpatients`](#512-list-all-patients-listpatients)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.3. [Delete a patient profile: `deletepatient`](#513-delete-a-patient-deletepatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.4. [Edit a patient profile: `editpatient`](#514-edit-a-patients-information-editpatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.5. [Find patient by name: `findpatient`](#515-find-patient-by-name-findpatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.6. [Add a remark to a patient: `remark`](#516-add-a-remark-to-a-patient-remark)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    5.2. [Appointment Management](#52-appointment-management)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.2.1. [Add a new appointment: `addappt`](#521-add-a-new-appointment-addappt)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.2.2. [List all appointments of a patient: `listapptof`](#522-list-all-appointments-of-a-patient-listapptof)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.2.3. [List all appointments: `listappts`](#523-list-all-appointments-listappts)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.2.4. [Edit an appointment: `editappt`](#524-edit-an-appointment-editappt)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.2.5. [Cancel an appointment: `cancel`](#525-cancel-an-appointment-cancel)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.2.6. [Mark an appointment as done: `done`](#526-mark-an-appointment-as-done-done)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.2.7. [Mark an appointment as missed: `missed`](#527-mark-an-appointment-as-missed-missed)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.2.8. [Find appointment by keyword: `findappt`](#528-find-appointment-by-keyword-findappt)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    5.3. [Calendar](#53-calendar)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.3.1. [Switch to a particular year: `year`](#531-switch-to-a-particular-year-year)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.3.2. [Switch to a particular month: `month`](#532-switch-to-a-particular-month-month)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.3.3. [Switch to a particular day: `day`](#533-switch-to-a-particular-day-day)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    5.4. [Utilities](#54-utilities)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.4.1. [View help : `help`](#541-view-help-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.4.2. [Exit the program: `exit`](#542-exit-the-program--exit)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.4.3. [Clear all data: `clear`](#543-clear-all-data-in-baymax-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    5.5. [Features coming soon in Version 2.0](#55-features-coming-in-version-20)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.5.1. [Undo/Redo v2.0](#551-undoredo-v20)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.5.2. [Display appointments within a period v2.0](#552-display-appointments-within-a-period-v20)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "6. [**FAQ**](#6-faq)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "7. [**Command Summary**](#7-command-summary)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    7.1. [Patient Information Management Commands](#71-patient-information-management-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    7.2. [Appointment Management Commands](#72-appointment-management-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    7.3. [Calendar Commands](#73-calendar-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    7.4. [Utility Commands](#74-utility-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "(Contributed by Li Jianhan \u0026 Shi Hui Ling)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Welcome to Baymax! Are you a healthcare professional looking for a reliable app to keep track of patients and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "appointments? You have come to the right place!"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Baymax is a Command Line Interface (CLI) focused desktop application that helps you to manage patient appointments using just"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "the keyboard itself, no fiddling with the mouse needed! The main features include:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Managing appointments - scheduling new appointments, changing appointments, cancelling appointments,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "   marking appointments as done etc."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Managing patient information - phone number, special remarks etc. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "3. Viewing appointments in a calendar format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": "All of these can be done easily with just a few keystrokes! Baymax\u0027s distinguishing feature is our special built-in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "calendar view -- it shows you how busy a particular day or week is at a glance, so that you can help patients make "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": "quick decisions on the ground! What are you waiting for? Head on to Section 2, “Quick Start”!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Download the latest version of `baymax.jar` from [here](https://github.com/AY2021S1-CS2103T-W12-3/tp/releases)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your Baymax application."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "   Note how the app contains some sample data."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "   "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thutahw"
        },
        "content": "   ![Ui](images/Ui.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "   *Figure 2a. Baymax Graphical User Interface*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "5. At the top of the screen, type in your commands in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "   e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thutahw"
        },
        "content": "6. Refer to the [Features](#5-features) below for details of each command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## 3. About"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "(Contributed by Li Jianhan, Thuta Htun Wai, Kaitlyn Ng, Reuben \u0026 Shi Hui Ling)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### 3.1. Structure of this Document"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "To give you the most amount of flexibility over what you can do with Baymax, we have provided a large set of features."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "We have structured this User Guide in such a way that you can easily find what you need. In the next subsection,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Section 3.2 Reading this Document*, you will find useful tips on using this document. All of Baymax\u0027s features and "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thutahw"
        },
        "content": "commands are documented in the following section, *Section 5 Features*. You can sift through these features"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "and commands easily by referring to the Table of Contents at the top of this User Guide, or to "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thutahw"
        },
        "content": "*Section 7 Summary of Commands*."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "### 3.2. Reading this Document"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "This subsection familiarises you with all the technical terms, symbols and syntax that are used throughout this "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thutahw"
        },
        "content": "document, in order to make it easier for you to read the rest of the document. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 3.2.1. GUI Terminology"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "![addpatient](images/gui.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thutahw"
        },
        "content": "*Figure 3.2.1a. GUI Components*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "GUI Component | Description"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "--------------|--------------"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Command Box   | Commands are entered here."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Command Result Box | Success and error messages of command executions are displayed here."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Tabs | Dashboard, Calendar, Schedule, Patient, Appointment, and Additional Information tabs can be accessed here. Note that the tabs are **not** clickable. See [here](#4-navigating-between-tabs) to find out how to navigate between tabs."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Main Display | Calendar views, Patient lists and Appointment lists are displayed here in their respective tabs."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 3.2.2. General Symbols"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "#### 3.2.3. Command Format \u0026 Syntax"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You enter specific commands into the *Command box* of the GUI to use Baymax\u0027s features and perform tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Commands all take the following format: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`command_word prefix/PARAMETER`, e.g. `addpatient name/Alex Yeoh nric/S1234567A phone/98765432 gender/M`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* **Command_word:** word that specifies the task being performed, e.g. `addpatient`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* **Prefix:** word that specifies the parameter type being supplied, e.g. `name`, `nric`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **PARAMETER:** information and details about various patients and appointments specified by you, e.g Alex Yeoh"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be **supplied** by you."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "  E.g. `addpatient name/NAME`: can be used as `addpatient name/Alice Tan`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* When the command requires time in HH:MM format, it follows the **24 Hour** System. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thutahw"
        },
        "content": " "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  E.g. 01:00 means 1 a.m. and 13:00 means 1 p.m."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Items in square brackets are **optional**."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  E.g. `name/NAME [remark/REMARK]`: can be used as `name/Alice Tan remark/No drug allergy` or as `name/Alice Tan`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Items with `…`​ after them can be used **multiple** times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "  E.g. `[tag/TAG]…​`: can be used as ` ` (i.e. 0 times), `tag/braces`, `tag/braces tag/cleaning` etc."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* Parameters can be supplied in **any order**."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "  E.g. `name/NAME phone/PHONE_NUMBER`: can also be used as `phone/PHONE_NUMBER name/NAME`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* Compulsory parameters supplied more than once will be deemed **invalid**."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  E.g. Entering `addpatient name/John name/Jane nric/S1234567G phone/12345678 gender/F` where `name` is a compulsory field will give:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thutahw"
        },
        "content": "   "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  ![invalidparams](images/multipleparamsnotaccepted.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  *Figure 3.2.3a. Multiple compulsory details are not accepted*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thutahw"
        },
        "content": "------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## 4. Navigating Between Tabs"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to switch between tabs by specifying the tab name."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`TAB_NAME`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thutahw"
        },
        "content": "TAB_NAME     | The name of the tab you want to switch to. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thutahw"
        },
        "content": "TAB_NAME   | Tab that Baymax will switch to"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thutahw"
        },
        "content": "-----------|----------------------------"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thutahw"
        },
        "content": "dashboard  | Dashboard"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thutahw"
        },
        "content": "calendar   | Calendar"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thutahw"
        },
        "content": "schedule   | Schedule"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thutahw"
        },
        "content": "patient    | Patients"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thutahw"
        },
        "content": "appt       | Appointments"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thutahw"
        },
        "content": "help       | Help/Additional Information"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `calendar` into the command box."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Outcome:**\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. The second tab, featuring the calendar page, will be displayed as shown in the image below.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![editappt](images/tabToCalendar.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 4a. Changing to calendar tab*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "-----------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## 5. Features"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "(Contributed by Thuta and Reuben)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 5.1. Patient Information Management"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "This feature allows you to manage patient information. You can:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. Add a new patient"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "2. List all patients"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "3. Delete a patient "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "4. Edit a patient\u0027s details"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "5. Add a remark to a patient"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "6. Find a patient by his name"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.1.1. Add a new patient: `addpatient`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to add a new patient who has not yet been registered."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`addpatient nric/NRIC name/NAME phone/PHONE gender/GENDER [r/REMARK] [tag/TAG]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:** "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thutahw"
        },
        "content": "NRIC          | The nric of the patient. It must \u003cins\u003estart with either \u0027S\u0027, \u0027T\u0027, \u0027F\u0027 or \u0027G\u0027 (all case-insensitive) and end with an alphabet (case-insensitive)\u003c/ins\u003e and contain 7 numbers in between them. E.g. S1234567A, s1234567a"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thutahw"
        },
        "content": "NAME          | The name of the patient. It must consist \u003cins\u003esolely\u003c/ins\u003e of alphabets (case-insensitive). E.g. Alice Tan"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thutahw"
        },
        "content": "PHONE         | The hand phone number that the patient wishes to be contacted by and it must be at least 3 digits long. It must consist \u003cins\u003esolely\u003c/ins\u003e of numbers. E.g. 91234567"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thutahw"
        },
        "content": "GENDER        | The gender of the patient. In short, female is indicated by the letter ‘F’ and male is indicated by the letter ‘M’ (both case-insensitive). E.g M, m, F, f"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "REMARK        | Any remarks about the patient. It can be any text -- alphanumerical, special characters etc. are allowed. E.g. Only available on Mon / Tues"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thutahw"
        },
        "content": "TAG           | The tag for the patient. It must only be \u003cins\u003ealphanumerical\u003c/ins\u003e and must not contain spaces or special characters. Can have multiple tags. E.g. Diabetic, Asthmatic"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "1. Type `addpatient nric/S9772234F name/Jason Tan phone/98765432 gender/M` into the command box."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If the command is valid (i.e. the user keyed in the valid fields):"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. A success message will be displayed in the *Command Result* box as shown in Figure 5.1.1a. \u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. The patient with the information supplied by the parameters will be created and added to the system."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    ![addpatient](images/addpatient.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.1a. Adding a patient - success*"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "thutahw"
        },
        "content": "When the patient is added successfully, the main display only shows the newly added patient so that you do not need to scroll down all the way to the bottom of the patient list to ensure that the new patient is added.    "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If you wish to view the whole patient list again, you can use the `listpatients` command from section 5.1.2."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "thutahw"
        },
        "content": "In the case where the command entered is invalid (e.g `NRIC` has 8 numbers in the middle):"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. An invalid command message will be displayed in the *Command Result* box, specifying which field was entered incorrectly. \u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![invalidnric](images/invalidNRIC.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.1b. Adding a patient - failure*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.1.2. List all patients: `listpatients`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You can use this command to list all the patients in the system. The *Main Display* of the GUI will show"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "the list of patients with all their information: name, nric, contact number, gender, remark, tags, and appointments."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`listpatients`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `listpatients` into the command box."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. All the patients in the system will be listed as shown below."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![listpatients](images/listpatients.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.2a. Listing all patients*"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.1.3. Delete a patient: `deletepatient`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to delete a patient’s profile by his or her `INDEX`. However, you will first need to use the `listpatients` command"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "to get the patient\u0027s `INDEX`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "This extra step helps you to confirm the profile to be deleted, and prevents accidental deletes."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**: "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "thutahw"
        },
        "content": "When you delete a patient, all the appointments associated with that patient will also be deleted."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`deletepatient INDEX`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX     | The index of the patient in the most recently displayed list. It must be a \u003cins\u003epositive\u003c/ins\u003e integer."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `deletepatient 1` into the command box."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If the `INDEX` (i.e 1) is valid:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. A success message will be displayed as shown below."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. The patient at index 1 in the previously displayed list will be deleted."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![deletepatient](images/deletepatientsuccess.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.3a. Deleting a patient - success*"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "thutahw"
        },
        "content": "In the case where the `INDEX` is invalid (E.g `deletepatient 11` is entered, but there are only 8 patients):"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. \"**Invalid patient index**\" message will be displayed as shown below."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![invaliddelete](images/invaliddeletepatient.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.3b. Deleting a patient - failure*"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.1.4. Edit a patient\u0027s information: `editpatient`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You can use this command to edit a patient’s profile information. You can edit any field of a patient in any order. "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "thutahw"
        },
        "content": "However, you will first need to use the `listpatients` command to find out the "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "patient’s `INDEX` within the displayed list. This extra step helps you to confirm the profile "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "to be edited, and prevents accidental edits. "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`editpatient INDEX \u003cat least 1 patient information parameter\u003e`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Listed below are some examples of valid `editpatient` commands:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* `editpatient INDEX tag/TAG`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* `editpatient INDEX name/NAME`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* `editpatient INDEX nric/NRIC`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* `editpatient INDEX gender/GENDER`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* `editpatient INDEX phone/PHONE`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* `editpatient INDEX r/REMARK`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* You can also supply multiple parameters, e.g. `editpatient INDEX gender/GENDER name/NAME phone/PHONE`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* The parameter(s) supplied will directly replace the original one(s)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX     | The index of the patient in the most recently displayed list. It must be a \u003cins\u003epositive\u003c/ins\u003e integer."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thutahw"
        },
        "content": "NRIC    | The nric of the patient. It must \u003cins\u003estart with either \u0027S\u0027, \u0027T\u0027, \u0027F\u0027 or \u0027G\u0027 (all case-insensitive) and end with an alphabet (case-insensitive)\u003c/ins\u003e and contain 7 numbers in between them. E.g. S1234567A, s1234567a"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "thutahw"
        },
        "content": "NAME    | The name of the patient. It must consist \u003cins\u003esolely\u003c/ins\u003e of alphabets. E.g. Alice Tan"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thutahw"
        },
        "content": "PHONE   | The hand phone number which the patient wishes to be contacted by. It must consist \u003cins\u003esolely\u003c/ins\u003e of numbers and it must be at least 3 digits long. E.g. 91710012"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "thutahw"
        },
        "content": "GENDER  | The gender of the patient. In short, female is indicated by the letter ‘F’ and male is indicated by the letter ‘M’ (both case-insensitive)."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "REMARK  | Any remarks about the patient. It can be any text -- alphanumerical, special characters etc. are allowed. E.g. Only available on Mon / Tues"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "TAG     | The tag for the patient. It must only be alphanumerical and must not contain spaces or special characters. Can have multiple tags. E.g. Diabetic"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. Type `editpatient 2 tag/Asthmatic` into the command box."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "If the `INDEX` (i.e 2) is valid:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. A success message will be displayed as shown below."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. The tag of the patient at index 2 in the recent list will be edited."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![editpatient](images/editpatientsuccess.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.4a. Editing a patient\u0027s information - success*"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "thutahw"
        },
        "content": "When the patient\u0027s information is edited successfully, the main display only shows the recently edited patient so that you do not need to scroll through the patient list to ensure that the patient\u0027s details are edited.    "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If you wish to view the whole patient list again, you can use the `listpatients` command from section 5.1.2."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "thutahw"
        },
        "content": "In the case where the field to edit is absent (E.g `editpatient 3` is entered):"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. A message prompting the user to provide at least 1 field to edit will be displayed as shown below."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![editfailure](images/editpatientmissingfield.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.4b. Editing a patient\u0027s information - failure*"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**: "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can clear all the tags of the patient by entering ` editpatient INDEX tag/ `"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.1.5. Find patient by name: `findpatient`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You can use this command to find a patient by entering a part of his name (or his full name). "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "The search string for the name is case-insensitive."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`findpatient NAME_KEYWORD`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "NAME_KEYWORD   | The name or keyword by which to search for the patient. It can be an incomplete part of the patient\u0027s name you are searching for. E.g. Alice"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. Type `findpatient Alex` into the command box."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. If the patient is found, a success message will be displayed as shown below."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![findpatient](images/findpatientsuccess.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.5a. Finding a patient by name - success*"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "2. If patient is not found, then none will be displayed as shown below."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    ![findpatient](images/findPatientFailure.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.5b. Finding a patient by name - failure*"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.1.6. Add a remark to a patient: `remark`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You can use this command to add or replace a remark to a patient using their `INDEX` in the most recently displayed list."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**: "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Each patient can only have one remark. Using this command when a patient already has a remark will"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*replace* the existing remark with the new one entered."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`remark INDEX r/REMARK`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX     | The index of the patient in the most recently displayed list. It must be a \u003cins\u003epositive\u003c/ins\u003e integer."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "REMARK         | The remark to be added to the patient."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "1. Type `remark 2 r/Allergic to penicillin` into the command box."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. If the INDEX entered is valid, a success message will be displayed as shown below."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    ![remark](images/remarkSuccessOutput.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.6a. Adding a remark to a patient - success*"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "2. If the INDEX entered is invalid (either beyond the list or negative), an error message will be displayed as shown below."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    ![remark](images/remarkFailureOutput.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.1.6b. Adding a remark to a patient - failure*"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "thutahw"
        },
        "content": "When a remark is added to a patient successfully, the main display only shows the patient with the edited remark so that you do not need to scroll through the patient list to ensure that the new remark is added to that patient.    "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If you wish to view the whole patient list again, you can use the `listpatients` command from section 5.1.2."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "----------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 5.2. Appointment Management"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "thutahw"
        },
        "content": "This feature allows you to manage the appointments of all patients. You can:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Add a new appointment"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. List all the appointments"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "thutahw"
        },
        "content": "3. List all the appointments of a specific patient"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "thutahw"
        },
        "content": "4. Cancel an appointment"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "thutahw"
        },
        "content": "5. Edit an appointment\u0027s details"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "thutahw"
        },
        "content": "6. Mark an appointment as done"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "thutahw"
        },
        "content": "7. Mark an appointment as missed"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "thutahw"
        },
        "content": "8. Find an appointment by keyword"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "thutahw"
        },
        "content": "The current version of Baymax does **not** allow undoing/redoing. The next version (v2.0) will support undoing so that users"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "thutahw"
        },
        "content": "can recover from accidentally marking an appointment as missed/done."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.2.1. Add a new appointment: `addappt`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to add a new appointment for a patient."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX     | The index of the patient in the most recently displayed list. It must be a \u003cins\u003epositive\u003c/ins\u003e integer."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "DATETIME       | The date followed by the time of the appointment. It must be in \u003cins\u003eDD-MM-YYYY HH:MM\u003c/ins\u003e format. E.g. 20-01-2020 15:00"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "thutahw"
        },
        "content": "TIME           | The time of the appointment. It must be in \u003cins\u003eHH:MM\u003c/ins\u003e format. E.g. 15:00. The date will be referenced from the date set in the calendar (see Section 5.3)."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "DESCRIPTION    | The description of the appointment. It can be \u003cins\u003eany text\u003c/ins\u003e -- alphanumerical, special characters etc. are allowed. E.g. Wrist fracture check-up #3"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "TAG            | The tag related to the appointment. It must only be \u003cins\u003ealphanumerical\u003c/ins\u003e and must not contain spaces or special characters. Can have multiple tags. E.g. Xray"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "thutahw"
        },
        "content": "NRIC           | The nric of the patient. It must \u003cins\u003estart with either \u0027S\u0027, \u0027T\u0027, \u0027F\u0027 or \u0027G\u0027 (all case-insensitive) and end with an alphabet (case-insensitive)\u003c/ins\u003e and contain 7 numbers in between them. E.g. S1234567A, s1234567a"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "thutahw"
        },
        "content": "DURATION       | The duration of the appointment in minutes, not spanning more than one day."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`addappt INDEX on/DATETIME dur/DURATION desc/DESCRIPTION [tag/TAG]`\u003cbr\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`addappt nric/NRIC on/DATETIME dur/DURATION desc/DESCRIPTION [tag/TAG]`\u003cbr\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`addappt INDEX at/TIME dur/DURATION desc/DESCRIPTION [tag/TAG]`\u003cbr\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`addappt nric/NRIC at/TIME dur/DURATION desc/DESCRIPTION [tag/TAG]`\u003cbr\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**: "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Either `INDEX` or `NRIC` should be provided. If both are provided, only the `INDEX` will be accepted."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Either `DATETIME` or `TIME` should be provided. If both are provided, only the `DATETIME` will be accepted."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `addappt 1 on/11-10-2020 12:30 dur/60 desc/Removal of braces. tag/DrGoh` into the command box."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If the command is valid (i.e. the user keyed in the valid fields):"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. A success message will be displayed as shown below. \u003cbr\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    ![addappt](images/addappt.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.1a. Scheduling a new appointment for a patient*"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.2.2. List all appointments of a patient: `listapptof`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You can use this command to list all the appointments belonging to a certain patient."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "thutahw"
        },
        "content": "However, you will first need to use the `listpatients` command to "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "find out the patient’s `INDEX`. "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`listapptof INDEX`\u003cbr\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`listapptof nric/NRIC`\u003cbr\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`listapptof name/NAME`\u003cbr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX     | The index of the patient in the most recently displayed list. It must be a \u003cins\u003epositive\u003c/ins\u003e integer."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "thutahw"
        },
        "content": "NRIC           | The nric of the patient."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "NAME           | The name by which to search for the patient. It can be an incomplete part of the patient\u0027s name. E.g. Alice"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. Type `listapptof 1` into the command box."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "1. All appointments associated with the patient will be displayed as shown below."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    ![listapptof](images/listApptOf.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.2a. Listing the appointments of a patient*"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.2.3. List all appointments: `listappts`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You can use this command to list all the appointments in the system, which belong to any patient."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`listappts`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `listappts` into the command box."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. All the appointments in the system will be listed as shown below."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![listappts](images/listappts.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.3a. Listing all appointments*"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.2.4. Edit an appointment: `editappt`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You can use this command to edit an appointment. You can edit any field of an appointment in any order. "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "thutahw"
        },
        "content": "However, you will first need to use the `listappts` command to find out the appointment index `INDEX` first. "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "This extra step helps you to confirm the appointment to be edited, and prevents accidental edits."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`editappt INDEX \u003cat least 1 appointment information parameter\u003e`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Listed below are some examples of valid `editappt` commands:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "* `editappt INDEX on/DATETIME`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* `editappt INDEX desc/DESC`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* `editappt INDEX tag/TAG`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* You can also supply multiple parameters, e.g. `editappt INDEX tag/TAG desc/DESC on/DATETIME`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* The parameter(s) supplied will directly replace the original one(s)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX          | The index of the target appointment in the most recently displayed list. It must be a \u003cins\u003epositive\u003c/ins\u003e integer."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "DATETIME       | The date followed by the time of the appointment. It must be in \u003cins\u003eDD-MM-YYYY HH:MM\u003c/ins\u003e format. E.g. 20-01-2020 15:00"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "DESCRIPTION    | The description of the appointment. It can be \u003cins\u003eany text\u003c/ins\u003e -- alphanumerical, special characters etc. are allowed. E.g. Wrist fracture check-up #3"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "TAG            | The tag related to the appointment. It must only be \u003cins\u003ealphanumerical\u003c/ins\u003e and must not contain spaces or special characters. Can have multiple tags. E.g. Xray"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `editappt 6 on/12-10-2020 12:00` into the command box."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If the INDEX (i.e 6) is valid:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. A success message will be displayed as shown below."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. The `DATETIME` of the appointment at index 6 in the recent list will be edited."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    ![editappt](images/editappt.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.4a. Editing an appointment*"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**:"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "thutahw"
        },
        "content": "When an appointment is edited successfully, the main display only shows the recently edited appointment so that you do not need to scroll through the appointment list to ensure that the appointment is edited.    "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If you wish to view the whole appointment list again, you can use the `listappts` command from section 5.2.3."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.2.5. Cancel an appointment: `cancel`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to cancel an appointment within the system either by specifying the `INDEX` of the appointment "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "thutahw"
        },
        "content": "or the `DATETIME` of the appointment with the `NAME` of the patient."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`cancel INDEX` \u003cbr\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`cancel on/DATETIME name/NAME`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX          | The index of the target appointment in the most recently displayed list. It must be a \u003cins\u003epositive\u003c/ins\u003e integer."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "NAME           | The name by which to search for the patient. It can be an incomplete part of the patient\u0027s name. E.g. Alice"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "DATETIME       | The date followed by the time of the appointment. It must be in \u003cins\u003eDD-MM-YYYY HH:MM\u003c/ins\u003e format. E.g. 20-01-2020 15:00"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Method 1:"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `cancel 1` into the command box. (Currently, the appointment at Index 1 is Chin\u0027s appointment)."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Method 2:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `cancel on/12-10-2020 12:00 name/Chin` into the command box."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Warning: Method 2 is for convenience only. Use this method only if you are sure that there is only one patient with the name that you are going to enter, in order to prevent accidental deletes."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "If the command is valid (i.e. the specified appointment exists):"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. A success message will be displayed as shown below."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "2. The appointment specified will be removed."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![cancelappt](images/cancelAppt.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.5a. Cancelling an appointment*"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.2.6. Mark an appointment as done: `done`"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to mark an appointment within the system as done either by specifying `INDEX` of the appointment, or the `DATETIME` of the appointment with the `NAME` of the patient."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`done INDEX`\u003cbr\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`done on/DATETIME name/NAME`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX          | The index of the target appointment in the most recently displayed list. It must be a \u003cins\u003epositive integer\u003c/ins\u003e."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "NAME           | The name by which to search for the patient. It can be an incomplete part of the patient\u0027s name. E.g. Alice"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DATETIME       | The date followed by the time of the appointment. It must be in \u003cins\u003eDD-MM-YYYY HH:MM\u003c/ins\u003e format. E.g. 20-01-2020 15:00"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Method 1:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `done 2` into the command box. (Currently, the appointment at Index 2 is Irfan\u0027s appointment)."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Method 2:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `done on/04-11-2020 20:00 name/Irfan` into the command box."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Warning: Method 2 is for convenience only. Use this method only if you are sure there is only one patient with the name that you are going to enter, in order to prevent accidental edits."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "If the command is valid (i.e. the specified appointment exists):"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "1. A success message will be displayed as shown below."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "2. The appointment specified will be marked as done."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![markapptdone](images/markApptDone.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.6a. Marking an appointment as done*"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "thutahw"
        },
        "content": "   "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "thutahw"
        },
        "content": "When an appointment is marked as `done` successfully, the main display only shows that appointment so that you do not need to scroll through the appointment list to ensure that the appointment is marked as `done`.    "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If you wish to view the whole appointment list again, you can use the `listappts` command from section 5.2.3.   "
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.2.7. Mark an appointment as missed: `missed`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "You can use this command to mark an appointment within the system as missed by specifying the patient it belongs to "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "and the `DATETIME` of the appointment."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`missed INDEX` \u003cbr\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`missed on/DATETIME name/NAME`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "thutahw"
        },
        "content": "INDEX          | The index of the target appointment in the most recently displayed list. It must be a \u003cins\u003epositive\u003c/ins\u003e integer."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "NAME           | The name by which to search for the patient. It can be an incomplete part of the patient\u0027s name. E.g. Alice"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DATETIME       | The date followed by the time of the appointment. It must be in \u003cins\u003eDD-MM-YYYY HH:MM\u003c/ins\u003e format. E.g. 20-01-2020 15:00"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Method 1:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `missed 1` into the command box. (Currently, the appointment at Index 1 is Calvini\u0027s appointment)."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Method 2:"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `missed on/31-10-2020 13:30 name/Calvini` into the command box."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Warning: Method 2 is for convenience only. Use this method only if you are sure that there is only one patient with the name that you are going to enter, in order to prevent accidental edits."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "If the command is valid (i.e. the specified appointment exists):"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "1. A success message will be displayed as shown below."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. The appointment specified will be marked as missed."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![markapptmissed](images/markapptmissed.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.7a. Marking an appointment as missed*"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**:"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "thutahw"
        },
        "content": "When an appointment is marked as `missed` successfully, the main display only shows that appointment so that you do not need to scroll through the appointment list to ensure that the appointment is marked as `missed`.    "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "thutahw"
        },
        "content": "If you wish to view the whole appointment list again, you can use the `listappts` command from section 5.2.3.   "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.2.8. Find appointment by keyword: `findappt`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to find an appointment or appointments by entering a part of the appointment description, or a part of the tag name. "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "thutahw"
        },
        "content": "The search string for the keyword entered is case-insensitive."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`findappt DESCRIPTION_KEYWORD` \u003cbr\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`findappt TAG_KEYWORD`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "thutahw"
        },
        "content": "DESCRIPTION_KEYWORD   | The keyword by which to search for the appointment. It can be an incomplete part of the \u003cins\u003edescription\u003c/ins\u003e of the appointment you are searching for. E.g. Removal"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "thutahw"
        },
        "content": "TAG_KEYWORD           | The keyword by which to search for the appointment. It can be an incomplete part of the \u003cins\u003etag\u003c/ins\u003e of the appointment you are searching for. E.g DrG, Dr"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `findappt check` into the command box."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. If the appointment is found, a success message will be displayed as shown below."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![findappt](images/findapptbydesc.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.8a. Finding an appointment by description*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `findappt dr` into the command box."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard. "
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Outcome:**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "thutahw"
        },
        "content": "   "
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. If appointment is found, a succcess message will be displayed as shown below."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![findappt](images/findapptbytag.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.2.8b. Finding an appointment by tag*"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    "
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 5.3. Calendar "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "This feature allows you to view the availability status of each day in a month, as well as the appointment schedule"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "for a period of time or within a particular day / week. The following subsections will guide you through the commands to"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "set the calendar view to a particular year and month."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**:"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "thutahw"
        },
        "content": "The dates in the calendar view are **not** clickable."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.3.1. Switch to a particular year: `year`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "You can use this command to switch to a particular year. The default is the current year. Suppose there are appointments"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "scheduled one year in advance, you can use this function to switch to the following year. The year set by this command"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "thutahw"
        },
        "content": "will affect the command we will discuss in Section 5.3.2 (Switching to a particular month)."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "`year YEAR`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "thutahw"
        },
        "content": "YEAR          | The year you want to switch to. It must be a \u003cins\u003e4-digit positive\u003c/ins\u003e number and start from the year 2000. E.g. 2020"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "1. Type `year 2019` into the command box."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "2. Press enter on your keyboard."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Outcome:**\u003cbr\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. Baymax will switch to the calendar tab."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "2. The year 2019 will be displayed on the top of the window together with the currently selected month."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    ![changeyear](images/changeYear.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.3.1a Changing the year to 2019*"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.3.2. Switch to a particular month: `month`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to switch to a particular month based on the year you set in Section 5.3.1. The default is the"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "current month. For example, if today is 3rd January 2020, then the calendar will display the year 2020 and the month"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "January by default."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`month MONTH`"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Parameters:**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "thutahw"
        },
        "content": "MONTH          | The month you want to switch to. It must be a \u003cins\u003epositive\u003c/ins\u003e number from 1 (January) to 12 (December)."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. Type `year 2020` into the command box and press Enter to switch to the year 2020."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "2. Type `month 9` into the command box."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "3. Press Enter on your keyboard."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Outcome:**\u003cbr\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. The month will be set to September."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    ![changemonth](images/changeMonth.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.3.2a. Changing the month to September*"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.3.3. Switch to a particular day: `day`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "You can use this command to select a particular day, and display its schedule (with all appointments within the day)."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "---------------|------------"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "thutahw"
        },
        "content": "DAY            | The day of the month you want to switch to. It must be a \u003cins\u003epositive\u003c/ins\u003e number from 1 to the last day of the month. E.g. if the month is January (which has 31 days), the range of numbers you can enter is 1 to 31 (inclusive)."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "`day DAY`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. Type `year 2020` into the command box and press Enter to switch to the year 2020."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Type `month 11` into the command box and press enter to switch to the month October."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "thutahw"
        },
        "content": "3. Type `day 4` into the command box."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "4. Press Enter on your keyboard."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Outcome:**\u003cbr\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. The day 04-11-2020 will be selected."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![changeday](images/scheduleview.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.3.3a. Viewing the schedule on the 4th November 2020*"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    "
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "----------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 5.4. Utilities"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.4.1. View help: `help`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to view the URL link to the full *User Guide* (this document) for more details about the commands."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "1. Type `help` into the command box."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "**Outcome:**\u003cbr\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. A link directing the user to the help page will be displayed as shown below, together with a summarised list of commands."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![help](images/help.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.4.1a. Executing `help` command*"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.4.2. Exit the program : `exit`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You can use this command to exit the program."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Format:** `exit`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. Type `exit` into the command box."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Outcome:**\u003cbr\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. The application window will close,and it will stop running. "
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.4.3. Clear all data in Baymax: `clear`"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Note**: This is a command to be used with **caution**. "
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "thutahw"
        },
        "content": "You can use this command to clear all the patient and appointment information. Once cleared, it cannot be undone."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Format:** `clear`"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Example:**\u003cbr\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. Type `clear` into the command box."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "thutahw"
        },
        "content": "2. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "thutahw"
        },
        "content": "**Outcome:**\u003cbr\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "thutahw"
        },
        "content": "1. The patients and appointments in the system will be cleared as shown below."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![clear](images/clearcommand.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.4.3a. Executing `clear` command*"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![emptypatients](images/listemptypatients.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.4.3b. Patient List when `listpatients` is entered*"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    ![emptyappts](images/listemptyappts.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    *Figure 5.4.3c. Appointment List when `listappts` is entered*"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    "
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 5.5. Features coming in Version 2.0"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.5.1. Undo/Redo `v2.0`"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "thutahw"
        },
        "content": "This feature will allow you to undo/redo certain commands."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "thutahw"
        },
        "content": "#### 5.5.2. Display appointments within a period `v2.0`"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "thutahw"
        },
        "content": "This feature will allow you to view all the appointments within a specified period, defined by a start `day` and an end"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "thutahw"
        },
        "content": "`day`. "
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "(Contributed by Hui Ling)"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Q:** Do I have to manually save any data? "
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**A:** No. Baymax saves your data to the hard disk automatically after any command that changes data. "
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "---------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## 7. Command Summary"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "(Contributed by Hui Ling and Reuben)"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 7.1. Patient Information Management Commands"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Command**             | **Example**"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "------------------------|--------------------"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Add a Patient: `addpatient nric/NRIC name/NAME phone/PHONE gender/GENDER [r/REMARK] [tag/TAG]` | `addpatient nric/S9772234F name/Jason Tan phone/98765432 gender/M` "
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "thutahw"
        },
        "content": "List All Patients: `listpatients` | `listpatients`"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Delete a Patient: `deletepatient INDEX` | `deletepatient 4`"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Edit a Patient\u0027s Information: `editpatient INDEX \u003cat least 1 patient information parameter\u003e` | `editpatient INDEX phone/82345678`"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Find a Patient: `findpatient NAME_KEYWORD` | `findpatient Alex`"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Add a Remark: `remark INDEX r/REMARK` | `remark 2 r/Not free on Fridays`"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 7.2. Appointment Management Commands"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Command**             | **Example**"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "------------------------|--------------------"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Add an Appointment: `addappt INDEX on/DATETIME dur/DURATION desc/DESCRIPTION [tag/TAG]` OR `addappt nric/NRIC on/DATETIME dur/DURATION desc/DESCRIPTION [tag/TAG]` | `addappt nric/S1234567C on/11-10-2020 12:30 dur/60 desc/Removal of braces. tag/DrGoh tag/1HR`"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "List Appointments of a Patient: `listapptof INDEX` | `listapptof 1`"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "thutahw"
        },
        "content": "List all Appointments: `listappts` | `listappts`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Edit an Appointment: `editappt INDEX \u003cat least 1 appointment information parameter\u003e` | `editappt 1 on/12-10-2020 12:00`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Cancel an Appointment: `cancel INDEX` OR `cancel on/DATETIME name/NAME` | `cancel on/20-01-2020 15:00 name/Alex `"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Mark an Appointment as done: `done INDEX` OR `done on/DATETIME name/NAME` | `done on/20-01-2020 15:00 name/Charlotte`"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Mark an Appointment as missed: `missed INDEX` OR `missed on/DATETIME name/NAME` | `missed 1`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Find an Appointment: `findappt DESCRIPTION_KEYWORD` OR `findappt TAG_KEYWORD` | `findappt eye`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 7.3. Calendar Commands"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Command**             | **Example**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "------------------------|--------------------"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Switch to a particular year: `year YEAR` | `year 2021`"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Switch to a particular month: `month MONTH` | `month 11`"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Switch to a particular day: `day DAY` | `day 15`"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "thutahw"
        },
        "content": "### 7.4. Utility Commands"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Command**             | **Example**"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "------------------------|--------------------"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "View help: `help` | `help`"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Switch between tabs: `TAB_NAME` | `calendar`"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Exit the program : `exit` | `exit`"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Clear all data: `clear`   | `clear`"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 41,
      "theyellowfellow": 86,
      "porkeypine": 238,
      "thutahw": 476,
      "-": 103
    }
  },
  {
    "path": "docs/assets/css/style.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Only the main Sass file needs front matter (the dashes are enough)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@import"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/skins/{{ site.minima.skin | default: \u0027classic\u0027 }}\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/initialize\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ".icon {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 21px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 21px"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ".img {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    width: 50%;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ".img, em {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    font-size: 0.8em;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 9,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/AddPatientActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": ":Receives an addpatient command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "if () then ([valid command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    :Parses the addpatient command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    and keywords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    :Executes the addpatient command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    :Shows a success message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    :Shows invalid command error message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "thutahw": 13
    }
  },
  {
    "path": "docs/diagrams/AppointmentManagerObjectDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 13
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"deletepatient 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"deletepatient 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePatient(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAppointmentBook"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 34,
      "kaitlynng": 1
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniquePatientList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "UniqueTagList -[hidden]down- UniquePatientList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "UniqueTagList -[hidden]down- UniquePatientList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "UniquePatientList o-right-\u003e Patient"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Patient -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Patient *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Patient *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "Patient *--\u003e Gender"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "kaitlynng": 8
    }
  },
  {
    "path": "docs/diagrams/DeleteAppointmentSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "participant \":AppointmentBookParser\" as AppointmentBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "participant \":DeleteAppointmentCommandParser\" as DeleteAppointmentCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "participant \"d:DeleteAppointmentCommand\" as DeleteAppointmentCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "participant \"r:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "[-\u003e LogicManager : execute(\"deleteappt 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "LogicManager -\u003e AppointmentBookParser : parseCommand(\"deleteappt 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "activate AppointmentBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "create DeleteAppointmentCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "AppointmentBookParser -\u003e DeleteAppointmentCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "activate DeleteAppointmentCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DeleteAppointmentCommandParser --\u003e AppointmentBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "deactivate DeleteAppointmentCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "AppointmentBookParser -\u003e DeleteAppointmentCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "activate DeleteAppointmentCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "create DeleteAppointmentCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DeleteAppointmentCommandParser -\u003e DeleteAppointmentCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "activate DeleteAppointmentCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DeleteAppointmentCommand --\u003e DeleteAppointmentCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "deactivate DeleteAppointmentCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DeleteAppointmentCommandParser --\u003e AppointmentBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "deactivate DeleteAppointmentCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DeleteAppointmentCommandParser -[hidden]-\u003e AppointmentBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "destroy DeleteAppointmentCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "AppointmentBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "deactivate AppointmentBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "LogicManager -\u003e DeleteAppointmentCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "activate DeleteAppointmentCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DeleteAppointmentCommand -\u003e Model : deleteAppointment(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Model --\u003e DeleteAppointmentCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "DeleteAppointmentCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "CommandResult --\u003e DeleteAppointmentCommand : \"\"r\"\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "DeleteAppointmentCommand --\u003e LogicManager : \"\"r\"\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "destroy DeleteAppointmentCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "[\u003c--LogicManager : \"\"r\"\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "theyellowfellow": 58,
      "jianhandev": 12
    }
  },
  {
    "path": "docs/diagrams/FindPatientActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ":Receives a findpatient command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "if () then ([valid command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    :Parses the findpatient command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    and keywords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    :Searches for all patients whose"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    names contain the keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    :Displays all found patients"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    to the user;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    :Displays a success message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    :Shows invalid command error message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 18
    }
  },
  {
    "path": "docs/diagrams/FindPatientSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "participant \":**FindPatientCommand**\" as FindPatientCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "participant \"**r:CommandResult**\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "participant \"**m:ModelManager**\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "participant \"**:PatientManager**\" as PatientManager MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "[-\u003e FindPatientCommand : \"\"execute(m)\"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "activate FindPatientCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "FindPatientCommand -\u003e ModelManager : \"\"updateFilteredPatientList(p)\"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "note right"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "\"\"p\"\" is the Predicate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "which checks if the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "given \"\"Patient\"\"\u0027s"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "name has the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "user input keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "end note"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "ModelManager -\u003e PatientManager : \"\"updateFiltered\"\"\\n\"\"PatientList(p)\"\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "activate PatientManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "PatientManager --\u003e ModelManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "deactivate PatientManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "ModelManager --\u003e FindPatientCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "deactivate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "FindPatientCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "CommandResult --\u003e FindPatientCommand : \"\"r\"\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "[\u003c-- FindPatientCommand : \"\"r\"\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "deactivate FindPatientCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "FindPatientCommand -[hidden]\u003e CommandResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "destroy FindPatientCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "thutahw": 50
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor LOGIC_COLOR_T3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor LOGIC_COLOR_T3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class AppointmentBookParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "LogicManager --\u003e\"1\" AppointmentBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentBookParser ..\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddPatientCommand, \\nEditAppointmentCommand, etc"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 14,
      "-": 55
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor MODEL_COLOR_T3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface ReadOnlyListManager\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface Model\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class PatientManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class AppointmentManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class CalendarManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "Model \u003c|.. ModelManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "ModelManager ..\u003e UserPrefs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "ModelManager ..\u003e PatientManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "ModelManager ..\u003e AppointmentManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "ModelManager ..\u003e CalendarManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentManager ..|\u003e ReadOnlyListManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientManager ..|\u003e ReadOnlyListManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027Patient \u003c-r- ModelManager: filtered list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027Appointment \u003c-l- ModelManager: filtered list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027Patient \u003c-- Appointment: \u003c has a list of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027Appointment \u003c-- Patient: \u003c contains"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027Appointment -- Description"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027Appointment -- AppointmentStatus"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027ReadOnlyListManager \u003c|.. PatientManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027PatientManager \u003c.. ModelManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027UniqueListElement \u003c|.. Patient"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027UniqueListElement \u003c|.. Appointment"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027ReadOnlyListManager \u003c|.. AppointmentManager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u0027AppointmentManager \u003c.. ModelManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 36,
      "theyellowfellow": 1,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/PatientManagerClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "class PatientManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ addPatient(p : Patient)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ setPatient(target : Patient, editedPatient : Patient)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ removePatient(key : Patient)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ hasPatient(patient : Patient) : boolean"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ hasPatient(nric : Nric) : boolean"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getPatient(name : Name) : Patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getPatient(nric : Nric) : Patient"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "class UniqueList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- internalList : ObservableList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- internalUnmodifiableList : ObservableList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ contains(toCheck : UniqueListElement) : boolean"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ add(toAdd : UniqueListElement)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ sort(cmp : Comparator)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ setElement(target : UniqueListElement, edited : UniqueListElement)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ remove(toRemove : UniqueListElement)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface UniqueListElement \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ isSame(other : UniqueListElement) : boolean"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface ReadOnlyListManager \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getReadOnlyList() : ObservableList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class Patient {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- nric : Nric"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- name : Name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- phone : Phone"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- gender : Gender"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- remark : Remark"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "- tags : Set"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getNric() : Nric"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getName() : Name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getPhone() : Phone"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getGender() : Gender"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getRemark() : Remark"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "+ getTags() : Set"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "ReadOnlyListManager \u003c|.. PatientManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "UniqueListElement \u003c|.. Patient"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientManager --\u003e\"1\" UniqueList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "UniqueList --\u003e\"*\" UniqueListElement"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 59
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor STORAGE_COLOR_T3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Storage \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface Storage\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface PatientManagerStorage\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface AppointmentManagerStorage\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface UserPrefsStorage\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class JsonAppointmentManagerStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class JsonPatientManagerStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientManagerStorage \u003c|-- Storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientManagerStorage \u003c|.up. JsonPatientManagerStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentManagerStorage \u003c|-- Storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentManagerStorage \u003c|.up. JsonAppointmentManagerStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "UserPrefsStorage \u003c|-- Storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "UserPrefsStorage \u003c|.up. JsonUserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 21,
      "theyellowfellow": 2,
      "-": 7
    }
  },
  {
    "path": "docs/diagrams/UiAppointmentClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor UI_COLOR_T3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor UI_COLOR_T3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Ui \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Appointment \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class AppointmentInfoPage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class AppointmentListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class AppointmentCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "HiddenOutside .left.\u003e AppointmentInfoPage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentInfoPage -down-\u003e AppointmentListPanel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentListPanel -down-\u003e AppointmentCard"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentCard .right.\u003e Appointment"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentInfoPage --|\u003e UiPart"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentListPanel -left-|\u003e UiPart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentCard --|\u003e UiPart"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 36
    }
  },
  {
    "path": "docs/diagrams/UiCalendarClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor UI_COLOR_T3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor UI_COLOR_T3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Ui \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Calendar \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Interface PropertyChangeListener\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class CalendarPage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class CalendarViewCell"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class SchedulePage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class SchedulePanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class ScheduleViewCell"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class Button"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class AppointmentCalendar"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "HiddenOutside ..\u003e CalendarPage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "CalendarPage --\u003e CalendarViewCell"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "CalendarPage --|\u003e UiPart"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "CalendarPage ..|\u003e PropertyChangeListener"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "CalendarViewCell --|\u003e Button"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "SchedulePage --\u003e SchedulePanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "SchedulePage --|\u003e UiPart"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "SchedulePanel --\u003e ScheduleViewCell"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "SchedulePanel --|\u003e UiPart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "SchedulePanel ..|\u003e PropertyChangeListener"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "ScheduleViewCell --|\u003e Button"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "CalendarPage -left-\u003e AppointmentCalendar"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "SchedulePanel -left-\u003e AppointmentCalendar"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 50
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor UI_COLOR_T3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor UI_COLOR_T3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class SideTabPane"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class XYZPage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Ui \u003c|-- UiManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "UiManager --\u003e MainWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "MainWindow *--\u003e SideTabPane"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "SideTabPane --\u003e XYZPage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "MainWindow *-right-\u003e ResultDisplay"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "MainWindow *--\u003e CommandBox"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "MainWindow *-left-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "SideTabPane --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "HelpWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "MainWindow ---\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "XYZPage .up.\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "note bottom of XYZPage: XYZPage \u003d PatientInfoPage, AppointmentInfoPage, \\nSchedulePage, CalendarPage, InfoPage etc"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 23,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/UiDashboardClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor UI_COLOR_T3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor UI_COLOR_T3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Ui \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Dashboard \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class Dashboard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class DigitalClock"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class AppointmentListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class AppointmentCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "HiddenOutside ..\u003e Dashboard"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Dashboard --\u003e DigitalClock"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Dashboard --\u003e AppointmentListPanel"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentListPanel --\u003e AppointmentCard"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Dashboard --|\u003e UiPart"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentCard --|\u003e UiPart"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AppointmentCard ..\u003e Appointment"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 37
    }
  },
  {
    "path": "docs/diagrams/UiPatientClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    FontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor UI_COLOR_T3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor BACKGROUND_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam ArrowColor UI_COLOR_T3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Ui \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package PatientTab \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class PatientInfoPage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class PatientListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class PatientCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Class Patient"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "HiddenOutside .left.\u003e PatientInfoPage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientInfoPage -down-\u003e PatientListPanel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientListPanel -down-\u003e PatientCard"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientCard .right.\u003e Patient"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientInfoPage --|\u003e UiPart"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientListPanel -left-|\u003e UiPart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "PatientCard --|\u003e UiPart"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 36
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        BorderColor MAIN_DARK_COLOR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        BackgroundColor MAIN_MEDIUM_COLOR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AttributeFontColor MAIN_MEDIUM_DARK_COLOR"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AttributeIconSize 0"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        StereotypeFontColor MAIN_DARK_COLOR"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        StereotypeFontStyle normal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        FontName Arial"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "skinparam Object {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderThickness 2"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BorderColor MAIN_DARK_COLOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    BackgroundColor MAIN_LIGHT_COLOR"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    AttributeFontColor MAIN_MEDIUM_DARK_COLOR"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    AttributeIconSize 0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontColor MAIN_DARK_COLOR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    StereotypeFontStyle normal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 17,
      "-": 71
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "ecp -\u003e ec ++: index, editPatientDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "kaitlynng": 1
    }
  },
  {
    "path": "docs/team/jianhandev.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "title: Li Jianhan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 45,
      "thutahw": 1
    }
  },
  {
    "path": "docs/team/kaitlynng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "title: Kaitlyn Ng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "thutahw": 46
    }
  },
  {
    "path": "docs/team/porkeypine.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "title: Shi Hui Ling\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "thutahw": 46
    }
  },
  {
    "path": "docs/team/theyellowfellow.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "title: Reuben Teng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "thutahw": 46
    }
  },
  {
    "path": "docs/team/thutahw.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "title: Thuta Htun Wai\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "thutahw": 46
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Changes the remark of an existing patient in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the patient identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            + \"by the index number used in the last patient listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * @param remark of the patient to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of patient data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the patient’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a patient."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Create a new `Remark` in `seedu.address.model.patient`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thutahw"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each patient."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "Simply add the following to [`PatientCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "**`PatientCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "**`PatientListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public PersonCard(Person patient, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    remark.setText(patient.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Person patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Person editedPatient \u003d new Person(patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                patientToEdit.getAddress(), remark, patientToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        model.setPerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPatient));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * {@code patientToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private String generateSuccessMessage(Person patientToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        return String.format(message, patientToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "thutahw": 18,
      "-": 371,
      "kaitlynng": 2
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.patient.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "**`PatientCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "**`PatientCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thutahw"
        },
        "content": "\u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"name\": \"Patient with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    \"gender\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "thutahw": 4,
      "-": 96,
      "kaitlynng": 3
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thutahw"
        },
        "content": "       Person patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "       Person editedPatient \u003d createEditedPerson(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thutahw"
        },
        "content": "       if (!patientToEdit.isSamePerson(editedPatient) \u0026\u0026 model.hasPerson(editedPatient)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thutahw"
        },
        "content": "       model.setPerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thutahw"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thutahw"
        },
        "content": "       patients.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "thutahw": 5,
      "-": 243,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/team/baymax/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/team/baymax/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentMatchesDatePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.storage.appointment.AppointmentManagerStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.storage.appointment.JsonAppointmentManagerStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.JsonPatientManagerStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.PatientManagerStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.Ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Baymax ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManagerStorage patientManagerStorage \u003d new JsonPatientManagerStorage("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                userPrefs.getPatientStorageFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        AppointmentManagerStorage appointmentManagerStorage \u003d new JsonAppointmentManagerStorage("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                userPrefs.getAppointmentStorageFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        storage \u003d new StorageManager(patientManagerStorage, appointmentManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        initDashboard(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private void initDashboard(Model model) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date today \u003d new Date("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Day(AppointmentCalendar.getCurrentDay()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Month(AppointmentCalendar.getCurrentMonth()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Year(AppointmentCalendar.getCurrentYear()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(today));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage} files and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The data from the sample Baymax will be used instead if {@code storage} files are not"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * found, or an empty Baymax app will be used instead if errors occur when reading {@code storage} files."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ReadOnlyListManager\u003cPatient\u003e patientManager \u003d initPatientManager(storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ReadOnlyListManager\u003cAppointment\u003e appointmentManager \u003d initAppointmentManager(patientManager, storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CalendarManager calendarManager \u003d new CalendarManager();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new ModelManager(patientManager, appointmentManager, userPrefs, calendarManager);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a {@code ReadOnlyListManager\u003cPatient\u003e} with the data from {@code storage}\u0027s patients file. The data from"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * the sample patients file will be used instead if {@code storage}\u0027s patient manager is not found, or an empty"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * patient manager will be used isntead of errors occur when reading {@code storage}\u0027s patient manager."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ReadOnlyListManager\u003cPatient\u003e initPatientManager(Storage storage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e patientManagerOptional;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ReadOnlyListManager\u003cPatient\u003e initialPatientManager;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            patientManagerOptional \u003d storage.readPatients();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (!patientManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample patient manager\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            initialPatientManager \u003d patientManagerOptional.orElseGet(SampleDataUtil::getSamplePatientManager);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PatientManager\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            initialPatientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PatientManager\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            initialPatientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return initialPatientManager;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a {@code ReadOnlyListManager\u003cAppointment\u003e} with the data from {@code storage}\u0027s appointments file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The data from the sample appointments file will be used instead if {@code storage}\u0027s appointment manager is"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * not found, or an empty appointment manager will be used isntead of errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * appointment manager."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ReadOnlyListManager\u003cAppointment\u003e initAppointmentManager("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            ReadOnlyListManager\u003cPatient\u003e patientManager, Storage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e appointmentManagerOptional;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ReadOnlyListManager\u003cAppointment\u003e initialAppointmentManager;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            appointmentManagerOptional \u003d storage.readAppointments(new PatientManager(patientManager));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (!appointmentManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample appointment manager\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            initialAppointmentManager \u003d appointmentManagerOptional"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    .orElseGet(SampleDataUtil::getSampleAppointmentManager);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AppointmentManager\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            initialAppointmentManager \u003d new AppointmentManager();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AppointmentManager\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            initialAppointmentManager \u003d new AppointmentManager();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return initialAppointmentManager;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty UserPrefs\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        logger.info(\"Starting Baymax \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Baymax ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 49,
      "thutahw": 1,
      "-": 139,
      "kaitlynng": 64
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private static final String LOG_FILE \u003d \"appointmentbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "thutahw": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d \"The appointment index provided \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_APPOINTMENT_NOT_FOUND \u003d \"No such appointment exists.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"No such patient exists.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARAM \u003d \"There can only be one %s !\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5,
      "porkeypine": 2,
      "-": 8,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return String.valueOf(getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "-": 53
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/team/baymax/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence).map(String::toLowerCase)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .anyMatch(x -\u003e x.contains(preppedWord));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a string left padded to the specified width with the supplied padding character."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param width      the length of the padded string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param padChar    a character to use for padding the string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param str          the string to be padded."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @return the padded string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static String pad(int width, char padChar, String str) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        for (int i \u003d str.length(); i \u003c width; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            sb.append(padChar);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        sb.append(str);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 22,
      "-": 62,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the PatientManager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @see Model#getPatientManager() ()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    ReadOnlyListManager\u003cPatient\u003e getPatientManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the AppointmentManager."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @see Model#getAppointmentManager() ()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    ReadOnlyListManager\u003cAppointment\u003e getAppointmentManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of patients */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of appointments */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    AppointmentCalendar getAppointmentCalendar();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the user prefs\u0027 patient manager file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getPatientStorageFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the user prefs\u0027 appointment manager file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getAppointmentStorageFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 12,
      "-": 36,
      "kaitlynng": 22
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.AppointmentBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final AppointmentBookParser appointmentBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentBookParser \u003d new AppointmentBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Command command \u003d appointmentBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            storage.savePatients(model.getPatientManager());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            storage.saveAppointments(model.getAppointmentManager());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ReadOnlyListManager\u003cPatient\u003e getPatientManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return model.getPatientManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ReadOnlyListManager\u003cAppointment\u003e getAppointmentManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return model.getAppointmentManager();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentCalendar getAppointmentCalendar() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return model.getAppointmentCalendar();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getPatientStorageFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return model.getPatientStorageFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getAppointmentStorageFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return model.getAppointmentStorageFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 22,
      "-": 59,
      "kaitlynng": 23
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public abstract TabId getTabId();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /** Switch to the tab indicated by tab identifier */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final TabId tabId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, TabId tabId) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.tabId \u003d tabId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult(String feedbackToUser, TabId tabId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this(feedbackToUser, false, false, tabId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return tabId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 tabId.equals(otherCommandResult.getTabId());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, tabId);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 18,
      "-": 65
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/AddAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.AppointmentMatchesDatePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AddAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addappt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.SCHEDULE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the appointment book.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: PATIENT_INDEX (or \" + PREFIX_NRIC + \"NRIC) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"(\" + \"or \" + PREFIX_TIME + \"TIME \" + \") \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            + PREFIX_DURATION + \"DURATION \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"For example, \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DATETIME + \"11-10-2020 12:30 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DURATION + \"60 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Monthly health checkup. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_TAG + \"DrGoh\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Alternatively, \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_NRIC + \"S0123456A \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_TIME + \"12:30 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DURATION + \"60 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Monthly health checkup. \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_TAG + \"DrGoh\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"appointment book\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_CLASH_APPOINTMENT \u003d \"This appointment clashes with an existing appointment\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"The patient at the specified index does not exist.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_INVALID_NRIC \u003d \"The patient with the specified nric does not exist.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_INDEX_AND_NRIC_BOTH_EMPTY \u003d \"The patient index and NRIC should not \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"be both empty.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_DATETIME_AND_TIME_BOTH_EMPTY \u003d \"The datetime and time should not \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"be both empty.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"The appointment cannot last to the next day.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Optional\u003cIndex\u003e patientIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Optional\u003cNric\u003e patientNric;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Optional\u003cDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Optional\u003cTime\u003e time;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates an @{code AddAppointmentCommand} to add the specified {@code Appointment} to the appointment book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Note that this constructor takes in either a {@code DateTime} or {@code Time}, the {@code DateTime} will be"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * taken if both values are present."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AddAppointmentCommand(Optional\u003cIndex\u003e patientIndex, Optional\u003cNric\u003e patientNric, Optional\u003cDateTime\u003e dateTime,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                                 Optional\u003cTime\u003e time, Duration duration,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                                 Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireAllNonNull(patientIndex, duration, description, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient patient;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DateTime dt;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assert patientIndex.isPresent() || patientNric.isPresent() : \"Patient index or NRIC should not be both empty.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assert dateTime.isPresent() || time.isPresent() : \"Datetime or time should not be both empty.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (patientIndex.isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            if (patientIndex.get().getZeroBased() \u003e\u003d model.getFilteredPatientList().size()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            patient \u003d model.getFilteredPatientList().get(patientIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                patient \u003d model.getPatient(patientNric.get());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (ElementNotFoundException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_NRIC);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // dateTime takes precedence if both dateTime and time are non-null"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (dateTime.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            dt \u003d dateTime.get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            Date date \u003d Date.fromCalendar(model.getAppointmentCalendar());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            dt \u003d DateTime.from(date, time.get());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        //check if duration extends appointment to the next day"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!(dt.getDate().equals(dt.plusMinutes(duration).getDate()))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Appointment toAdd \u003d new Appointment(patient, dt, duration, description, tags,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                AppointmentStatus.UPCOMING);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (model.hasAppointment(toAdd)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (model.doesAppointmentClash(toAdd)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new CommandException(MESSAGE_CLASH_APPOINTMENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.addAppointment(toAdd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // switches calendar to the day of the appointment"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setDay(dt.getDay());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setMonth(dt.getMonth());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setYear(dt.getYear());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(dt.getDate()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), getTabId());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof AddAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 patientIndex.equals(((AddAppointmentCommand) other).patientIndex)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 patientNric.equals(((AddAppointmentCommand) other).patientNric)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 dateTime.equals(((AddAppointmentCommand) other).dateTime)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 time.equals(((AddAppointmentCommand) other).time)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 description.equals(((AddAppointmentCommand) other).description)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 tags.equals(((AddAppointmentCommand) other).tags));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 150,
      "porkeypine": 6,
      "kaitlynng": 18
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/DeleteAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.SameDatetimeAndPatientPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DeleteAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels the appointment identified by the \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"appointment\u0027s index displayed in the list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: INDEX or (\" + PREFIX_DATETIME + \"DATETIME \" + PREFIX_NAME + \"NAME\" + \")\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"For example, \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Alternatively, \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DATETIME + \"11-10-2020 12:30 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_NAME + \"Alex\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final TabId TAB_ID \u003d TabId.NONE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Optional\u003cIndex\u003e targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Optional\u003cDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Optional\u003cName\u003e name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a {@code DeleteAppointmentCommand} which deletes an appointment by its displayed list index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DeleteAppointmentCommand(Optional\u003cIndex\u003e targetIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.dateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.name \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a {@code DeleteAppointmentCommand} which deletes an appointment by {@code dateTime} and {@code name}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DeleteAppointmentCommand(Optional\u003cDateTime\u003e dateTime, Optional\u003cName\u003e name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireAllNonNull(dateTime, name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.targetIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Appointment toDelete;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assert targetIndex.isPresent() || (dateTime.isPresent() \u0026\u0026 name.isPresent())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                : \"target index and (datetime and name) should not be both empty\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (targetIndex.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            if (targetIndex.get().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            toDelete \u003d model.getFilteredAppointmentList().get(targetIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else if (targetIndex.isEmpty() \u0026\u0026 !dateTime.isEmpty() \u0026\u0026 !name.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Patient patientOfAppointment \u003d model.getPatient(name.get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                SameDatetimeAndPatientPredicate predicate \u003d new SameDatetimeAndPatientPredicate(dateTime.get(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        patientOfAppointment);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                toDelete \u003d model.findAppointmentByPredicate(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            } catch (ElementNotFoundException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            Patient patient \u003d model.getPatient(name.get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            SameDatetimeAndPatientPredicate predicate \u003d new SameDatetimeAndPatientPredicate(dateTime.get(), patient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            toDelete \u003d model.findAppointmentByPredicate(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.deleteAppointment(toDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, toDelete), getTabId());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (other instanceof DeleteAppointmentCommand) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            DeleteAppointmentCommand otherCommand \u003d (DeleteAppointmentCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (targetIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return dateTime.equals(otherCommand.dateTime) \u0026\u0026 name.equals(otherCommand.name);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return targetIndex.equals(otherCommand.targetIndex);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 52,
      "porkeypine": 55,
      "thutahw": 6,
      "kaitlynng": 14
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/EditAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.AppointmentIdenticalPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Edits the details (date-and-time, description, tags) of an existing appointment in the appointment book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editappt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.APPOINTMENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"by the index number used in the displayed appointment list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DATETIME + \"24-10-2020 11:00 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"appointment book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final EditAppointmentDescriptor editAppointmentDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param index of the appointment in the filtered appointment list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param editAppointmentDescriptor details to edit the appointment with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireAllNonNull(index, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Appointment appointmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!appointmentToEdit.isSame(editedAppointment) \u0026\u0026 model.hasAppointment(editedAppointment)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredAppointmentList(new AppointmentIdenticalPredicate(editedAppointment));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment), getTabId());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * edited with {@code editAppointmentDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static Appointment createEditedAppointment(Appointment appointmentToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                                                       EditAppointmentDescriptor editAppointmentDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assert appointmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient unchangedPatient \u003d appointmentToEdit.getPatient();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime updatedDateTime \u003d editAppointmentDescriptor.getDateTime()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .orElse(appointmentToEdit.getDateTime());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Duration updatedDuration \u003d editAppointmentDescriptor.getDuration()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .orElse(appointmentToEdit.getDuration());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editAppointmentDescriptor.getTags()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .orElse(appointmentToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Description updatedDescription \u003d editAppointmentDescriptor.getDescription()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .orElse(appointmentToEdit.getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AppointmentStatus unchangedStatus \u003d appointmentToEdit.getStatus();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Appointment(unchangedPatient, updatedDateTime, updatedDuration, updatedDescription,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                updatedTags, unchangedStatus);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!(other instanceof EditAppointmentCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 126,
      "kaitlynng": 6
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/EditAppointmentDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Stores the details to edit the appointment with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * corresponding field value of the appointment."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditAppointmentDescriptor {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private AppointmentStatus status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptor() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        setStatus(toCopy.status);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        setDescription(toCopy.description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return CollectionUtil.isAnyNonNull(dateTime, status, tags, description, duration);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setDateTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setStatus(AppointmentStatus status) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Optional\u003cAppointmentStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setDescription(Description description) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!(other instanceof EditAppointmentDescriptor)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 getDuration().equals(e.getDuration())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 getStatus().equals(e.getStatus())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 102,
      "kaitlynng": 15
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/FindAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.AppointmentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Lists all appointments containing a keyword in its description or tags"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class FindAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findappt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.APPOINTMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_APPOINTMENTS_LISTED_SUCCESS \u003d \"%1$d appointments listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all appointments whose description or tags \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"contain the given keyword.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"For example, \" + COMMAND_WORD + \" xray\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final AppointmentContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public FindAppointmentCommand(AppointmentContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        model.updateFilteredAppointmentList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                String.format(MESSAGE_APPOINTMENTS_LISTED_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        model.getFilteredAppointmentList().size()), getTabId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                || (other instanceof FindAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindAppointmentCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 12,
      "porkeypine": 34,
      "kaitlynng": 6
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/ListAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Lists all appointments in the appointment book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class ListAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listappts\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.APPOINTMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, getTabId());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof ListAppointmentCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 35,
      "thutahw": 4,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/ListPatientAppointmentsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.patient.PatientHasAppointmentPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Lists all the appointments of the chosen patient to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class ListPatientAppointmentsCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listapptof\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.APPOINTMENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all the appointments of the patient\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            + \": Lists all the appointments of the patient identified by the index number \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + \"used in the displayed patient list, a name or an nric number.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + \"(OR \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + PREFIX_NRIC + \"PATIENT_NRIC \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + \"OR \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + PREFIX_NAME + \"PATIENT_NAME) \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            + PREFIX_NAME + \"Alex Yeoh\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Creates a ListPatientAppointmentsCommand with the specified {@code Index}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public ListPatientAppointmentsCommand (Index targetIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.nric \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.name \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Creates a ListPatientAppointmentsCommand with the specified {@code Nric}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public ListPatientAppointmentsCommand (Nric nric) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.name \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Creates a ListPatientAppointmentsCommand with the specified {@code Name}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public ListPatientAppointmentsCommand (Name name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.nric \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Patient patientChosen;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (targetIndex !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            patientChosen \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else if (nric !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            PatientManager patientManager \u003d (PatientManager) model.getPatientManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            patientChosen \u003d patientManager.getPatient(nric);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else if (name !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            PatientManager patientManager \u003d (PatientManager) model.getPatientManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            patientChosen \u003d patientManager.getPatient(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        model.updateFilteredAppointmentList(new PatientHasAppointmentPredicate(patientChosen));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, getTabId());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                || (other instanceof ListPatientAppointmentsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ListPatientAppointmentsCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 10,
      "porkeypine": 50,
      "thutahw": 56
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/MarkAppointmentDoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentIdenticalPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.SameDatetimeAndPatientPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class MarkAppointmentDoneCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks an appointment as done by either \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"the displayed index of the appointment \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"OR the datetime of the appointment and the name of the patient.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: INDEX (or \" + PREFIX_DATETIME + \"DATETIME \" + PREFIX_NAME + \"NAME)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"For example, \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Alternatively, \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DATETIME + \"10-11-2020 12:30 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_NAME + \"Alex\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_MARK_AS_DONE_SUCCESS \u003d \"Appointment marked as done: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.NONE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Name patientName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a MarkAppointmentDoneCommand to mark the {@code Appointment} at {@code Index index} in the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * displayed appointment list as done"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public MarkAppointmentDoneCommand(Index index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.dateTime \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.patientName \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Creates a MarkAppointmentDoneCommand to mark the {@code Appointment} with the specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * {@code dateTime} and {@code Patient} identified by {@code patientName}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public MarkAppointmentDoneCommand(DateTime dateTime, Name patientName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireAllNonNull(dateTime, patientName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private boolean isFindByIndex() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return index !\u003d null \u0026\u0026 dateTime \u003d\u003d null \u0026\u0026 patientName \u003d\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private boolean isFindByNameAndTime() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return dateTime !\u003d null \u0026\u0026 patientName !\u003d null \u0026\u0026 index \u003d\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient patient;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Appointment appointmentToEdit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (isFindByIndex()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            appointmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else if (isFindByNameAndTime()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            patient \u003d model.getPatient(patientName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            SameDatetimeAndPatientPredicate predicate \u003d new SameDatetimeAndPatientPredicate(dateTime, patient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                appointmentToEdit \u003d model.findAppointmentByPredicate(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (ElementNotFoundException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Appointment markedAsDoneAppointment \u003d new Appointment(appointmentToEdit.getPatient(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                appointmentToEdit.getDateTime(), appointmentToEdit.getDuration(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                appointmentToEdit.getDescription(), appointmentToEdit.getTags(), AppointmentStatus.DONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        model.setAppointment(appointmentToEdit, markedAsDoneAppointment);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredAppointmentList(new AppointmentIdenticalPredicate(markedAsDoneAppointment));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_AS_DONE_SUCCESS, markedAsDoneAppointment), getTabId());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!(other instanceof MarkAppointmentDoneCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        MarkAppointmentDoneCommand m \u003d (MarkAppointmentDoneCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return index.equals(m.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                \u0026\u0026 dateTime.equals(m.dateTime)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 patientName.equals(m.patientName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 50,
      "porkeypine": 86
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/appointment/MarkAppointmentMissedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentIdenticalPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.SameDatetimeAndPatientPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class MarkAppointmentMissedCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"missed\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.NONE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks an appointment as missed by either \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"the displayed index of the appointment \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"OR the datetime of the appointment plus the name of the patient.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: INDEX (or \" + PREFIX_DATETIME + \"DATETIME \" + PREFIX_NAME + \"NAME)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"For example, \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Alternatively, \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_DATETIME + \"10-11-2020 12:30 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_NAME + \"Alex\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_MARK_AS_MISSED_SUCCESS \u003d \"Appointment marked as missed: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final Name patientName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Creates a MarkAppointmentMissedCommand to mark the {@code Appointment} at {@code Index index} in the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * displayed appointment list as missed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public MarkAppointmentMissedCommand(Index index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.dateTime \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.patientName \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Creates a MarkAppointmentMissedCommand to mark the {@code Appointment} with the specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * {@code dateTime} and {@code Patient} identified by {@code patientName} as missed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public MarkAppointmentMissedCommand(DateTime dateTime, Name patientName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireAllNonNull(dateTime, patientName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private boolean isFindByIndex() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return index !\u003d null \u0026\u0026 dateTime \u003d\u003d null \u0026\u0026 patientName \u003d\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private boolean isFindByNameAndTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return dateTime !\u003d null \u0026\u0026 patientName !\u003d null \u0026\u0026 index \u003d\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Patient patient;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Appointment appointmentToEdit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (isFindByIndex()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            appointmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else if (isFindByNameAndTime()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            patient \u003d model.getPatient(patientName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            SameDatetimeAndPatientPredicate predicate \u003d new SameDatetimeAndPatientPredicate(dateTime, patient);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                appointmentToEdit \u003d model.findAppointmentByPredicate(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (ElementNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Appointment markedAsMissedAppointment \u003d new Appointment(appointmentToEdit.getPatient(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                appointmentToEdit.getDateTime(), appointmentToEdit.getDuration(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                appointmentToEdit.getDescription(), appointmentToEdit.getTags(), AppointmentStatus.MISSED);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        model.setAppointment(appointmentToEdit, markedAsMissedAppointment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredAppointmentList(new AppointmentIdenticalPredicate(markedAsMissedAppointment));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_AS_MISSED_SUCCESS, markedAsMissedAppointment), getTabId());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!(other instanceof MarkAppointmentMissedCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        MarkAppointmentMissedCommand m \u003d (MarkAppointmentMissedCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return index.equals(m.index)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                \u0026\u0026 dateTime.equals(m.dateTime)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                \u0026\u0026 patientName.equals(m.patientName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 10,
      "porkeypine": 123,
      "thutahw": 2
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/calendar/DayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentMatchesDatePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DayCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"day\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing appointment schedule on %1$s.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the appointment schedule on the chosen day.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: DAY (must be a positive number between the first and last day of the month).\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 21 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.SCHEDULE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DayCommand(Day day) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            model.setDay(day);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new CommandException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date date \u003d Date.fromCalendar(model.getAppointmentCalendar());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(date));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, date.toString()), getTabId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof DayCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 day.equals(((DayCommand) other).day));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 61,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/calendar/MonthCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class MonthCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"month\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing the month %1$s in %2$s.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \": Switches to a particular month and updates the calendar.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: MONTH (must be a positive number from 1 to 12 ).\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 12 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.CALENDAR;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public MonthCommand(Month month) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            model.setDay(new Day((1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            model.setMonth(month);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new CommandException(Date.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Year year \u003d model.getAppointmentCalendar().getYear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, month, year), getTabId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof MonthCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 month.equals(((MonthCommand) other).month));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 63,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/calendar/YearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class YearCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"year\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to %1$s in %2$s.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \": Switches to a particular year and updates the calendar.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: YEAR (must be a positive number from year 2000 onwards).\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2020 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.CALENDAR;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public YearCommand(Year year) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            model.setMonth(new Month(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            model.setYear(year);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new CommandException(Date.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Month month \u003d model.getAppointmentCalendar().getMonth();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, month, year), getTabId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof YearCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 year.equals(((YearCommand) other).year));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 63,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/general/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Clears the patient manager and appointment manager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Patients and appointments have been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.DASHBOARD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.setPatientManager(new PatientManager());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.setAppointmentManager(new AppointmentManager());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, getTabId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 16,
      "-": 14,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/general/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Baymax as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.DASHBOARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, getTabId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 15,
      "thutahw": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/general/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"Enter \u0027%s\u0027 to see our User Guide.\", COMMAND_WORD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.INFO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, getTabId());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 16,
      "-": 14
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/general/TabCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentMatchesDatePredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class TabCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD_DASHBOARD \u003d \"dashboard\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD_CALENDAR \u003d \"calendar\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD_SCHEDULE \u003d \"schedule\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD_PATIENT \u003d \"patient\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD_APPOINTMENT \u003d \"appt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to %1$s tab\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB \u003d \"This tab does not exist.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Index tabNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@code TabCommand} given a {@code tabNumber}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabCommand(Index tabNumber) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(tabNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.tabNumber \u003d tabNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        TabId tabId \u003d TabId.valueOf(tabNumber.getOneBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date today \u003d new Date("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Day(AppointmentCalendar.getCurrentDay()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Month(AppointmentCalendar.getCurrentMonth()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Year(AppointmentCalendar.getCurrentYear()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (tabId \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (tabId \u003d\u003d TabId.DASHBOARD || tabId \u003d\u003d TabId.SCHEDULE) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            model.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(today));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tabId), getTabId());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TabId.valueOf(tabNumber.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof TabCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 tabNumber.equals(((TabCommand) other).tabNumber));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 76
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/patient/AddPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.PatientIdenticalPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Adds a patient to the appointment book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AddPatientCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpatient\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.PATIENT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the appointment book. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            + PREFIX_NRIC + \"Nric \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_NRIC + \"S9771234F \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_TAG + \"asthmatic \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + PREFIX_TAG + \"LTP\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: \\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"A patient with this NRIC already exists in the \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            + \"appointment book\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates an AddPatientCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AddPatientCommand(Patient patient) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredPatientList(new PatientIdenticalPredicate(toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), getTabId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Patient getToAdd() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof AddPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 39,
      "porkeypine": 1,
      "thutahw": 5,
      "-": 36,
      "kaitlynng": 5
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/patient/DeletePatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the appointment book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DeletePatientCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepatient\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"The following patient is deleted:\\n %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.PATIENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DeletePatientCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assert targetIndex !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        model.clearAllAppointmentsOfPatient(patientToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete), getTabId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof DeletePatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePatientCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 25,
      "porkeypine": 1,
      "thutahw": 4,
      "-": 33,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/patient/EditPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.PatientIdenticalPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Edits the details of an existing patient in the appointment book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditPatientCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpatient\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            + \"by the index number used in the displayed patient list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + CliSyntax.PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: \\n%1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the appointment book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.PATIENT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public EditPatientCommand(Index index, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(editPatientDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!patientToEdit.isSame(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredPatientList(new PatientIdenticalPredicate(editedPatient));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient), getTabId());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assert patientToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Nric updateNric \u003d editPatientDescriptor.getNric().orElse(patientToEdit.getNric());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Gender updatedGender \u003d editPatientDescriptor.getGender().orElse(patientToEdit.getGender());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPatientDescriptor.getTags().orElse(patientToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Remark updatedRemark \u003d editPatientDescriptor.getRemark().orElse(patientToEdit.getRemark());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new Patient(updateNric, updatedName, updatedPhone, updatedGender, updatedTags, updatedRemark);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!(other instanceof EditPatientCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand e \u003d (EditPatientCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, gender, tags, remark, nric);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 54,
      "theyellowfellow": 2,
      "porkeypine": 1,
      "thutahw": 6,
      "-": 140,
      "kaitlynng": 42
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/patient/FindPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Finds and lists all patients in the appointment book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class FindPatientCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findpatient\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"For example, \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_PATIENTS_LISTED_SUCCESS \u003d \"%1$d patient(s) listed!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.PATIENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public FindPatientCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_PATIENTS_LISTED_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model.getFilteredPatientList().size()), getTabId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof FindPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPatientCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 25,
      "thutahw": 1,
      "-": 25,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/patient/ListPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Lists all patients in the appointment book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class ListPatientCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listpatients\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.PATIENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, getTabId());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || other instanceof ListPatientCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 21,
      "thutahw": 1,
      "-": 13,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/commands/patient/RemarkPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.PatientIdenticalPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Changes the remark of an existing patient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class RemarkPatientCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Patient: \\n%1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Patient: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            + \": Edits the remark of the patient identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            + \"by the index number used in the last patient listing. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final TabId TAB_ID \u003d TabId.PATIENT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit the remark"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param remark of the patient to be updated to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public RemarkPatientCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assert index !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient editedPatient \u003d new Patient(patientToEdit.getNric(), patientToEdit.getName(), patientToEdit.getPhone(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                patientToEdit.getGender(), patientToEdit.getTags(), remark);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredPatientList(new PatientIdenticalPredicate(editedPatient));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPatient), getTabId());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public TabId getTabId() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return TAB_ID;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code patientToEdit}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private String generateSuccessMessage(Patient patientToEdit) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String message \u003d !remark.getValue().isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return String.format(message, patientToEdit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!(other instanceof RemarkPatientCommand)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        RemarkPatientCommand e \u003d (RemarkPatientCommand) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 64,
      "theyellowfellow": 19,
      "porkeypine": 1,
      "thutahw": 11,
      "kaitlynng": 9
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/AppointmentBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.logic.commands.appointment.FindAppointmentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.ListAppointmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.ListPatientAppointmentsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.MarkAppointmentDoneCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.appointment.MarkAppointmentMissedCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.calendar.DayCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.logic.commands.calendar.MonthCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.logic.commands.calendar.YearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.logic.commands.general.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.TabCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.FindPatientCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.RemarkPatientCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.appointment.AddAppointmentCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.appointment.DeleteAppointmentCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.appointment.EditAppointmentCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.appointment.FindAppointmentByKeywordCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.parser.appointment.ListPatientAppointmentsCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.appointment.MarkAppointmentDoneCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.appointment.MarkAppointmentMissedCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.calendar.DayCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.calendar.MonthCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.calendar.YearCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.patient.AddPatientCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.patient.DeletePatientCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.patient.EditPatientCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.patient.FindPatientCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.patient.RemarkPatientCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AppointmentBookParser {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case AddPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new AddPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case EditPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new EditPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case DeletePatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new DeletePatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case FindPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new FindPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case ListPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new ListPatientCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        case ListPatientAppointmentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            return new ListPatientAppointmentsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case RemarkPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new RemarkPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case AddAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new AddAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case ListAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new ListAppointmentCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case EditAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new EditAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case DeleteAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new DeleteAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case MarkAppointmentDoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new MarkAppointmentDoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case MarkAppointmentMissedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new MarkAppointmentMissedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case FindAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new FindAppointmentByKeywordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case DayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new DayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case MonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new MonthCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case YearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new YearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case TabCommand.COMMAND_WORD_DASHBOARD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new TabCommand(Index.fromOneBased(TabId.DASHBOARD.getTabNumber()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case TabCommand.COMMAND_WORD_CALENDAR:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new TabCommand(Index.fromOneBased(TabId.CALENDAR.getTabNumber()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case TabCommand.COMMAND_WORD_SCHEDULE:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new TabCommand(Index.fromOneBased(TabId.SCHEDULE.getTabNumber()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case TabCommand.COMMAND_WORD_APPOINTMENT:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new TabCommand(Index.fromOneBased(TabId.APPOINTMENT.getTabNumber()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case TabCommand.COMMAND_WORD_PATIENT:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new TabCommand(Index.fromOneBased(TabId.PATIENT.getTabNumber()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 85,
      "theyellowfellow": 2,
      "porkeypine": 17,
      "thutahw": 4,
      "-": 42,
      "kaitlynng": 7
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_DUPLICATE_PARAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void put(Prefix prefix, String argValue) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        if (!prefix.equals(PREFIX_TAG) \u0026\u0026 argValues.size() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_PARAM, prefix.getType()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5,
      "theyellowfellow": 4,
      "-": 59
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "theyellowfellow": 3,
      "-": 145
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"nric/\", \"NRIC\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"name/\", \"name\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"phone/\", \"phone number\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"gender/\", \"gender\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\", \"tag\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\", \"remark\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"id/\", \"index\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"on/\", \"date and time\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"at/\", \"time\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"dur/\", \"duration\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\", \"description\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 11,
      "theyellowfellow": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"The index you have entered is invalid!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses {@code day} into a {@code Day} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Day parseDayOfMonth(String day) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String trimmedDayOfMonth \u003d day.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        boolean invalidNumber \u003d !StringUtil.isNonZeroUnsignedInteger(trimmedDayOfMonth);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (invalidNumber || !Day.isValidDay(Integer.parseInt(trimmedDayOfMonth))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Day(Integer.parseInt(trimmedDayOfMonth));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses {@code month} into a {@code Month} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        boolean invalidNumber \u003d !StringUtil.isNonZeroUnsignedInteger(trimmedMonth);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (invalidNumber || !Month.isValidMonth(Integer.parseInt(trimmedMonth))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Month(Integer.parseInt(trimmedMonth));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses {@code year} into a {@code Year} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        boolean invalidNumber \u003d !StringUtil.isNonZeroUnsignedInteger(trimmedYear);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (invalidNumber || !Year.isValidYear(Integer.parseInt(trimmedYear))) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Year(Integer.parseInt(trimmedYear));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses a {@code String nric} into an {@code Nric}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Nric(trimmedNric.toUpperCase());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Gender(trimmedGender.toUpperCase());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Remark parseRemark(String remark) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses {@code String dateTime} (e.g. \"2020-10-12 23:39PM\") into a {@code DateTime}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DateTime dateTimeObj;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            dateTimeObj \u003d DateTime.fromString(trimmedDateTime);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(ex.getMessage());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new ParseException(ex.getMessage());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return dateTimeObj;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses {@code String time} (e.g. \"23:39PM\") into a {@code Time}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Time timeObj;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            timeObj \u003d Time.fromString(trimmedTime);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(ex.getMessage());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new ParseException(ex.getMessage());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return timeObj;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses {@code String duration} (e.g. \"60\") into a {@code Duration}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        boolean invalidNumber \u003d !StringUtil.isNonZeroUnsignedInteger(trimmedDuration);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (invalidNumber || !Duration.isValidDuration(Integer.parseInt(trimmedDuration))) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new Duration(Integer.parseInt(trimmedDuration));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Optional.of(parseTags(tagSet));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 127,
      "porkeypine": 13,
      "thutahw": 7,
      "-": 91,
      "kaitlynng": 41
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Constructor for Prefix"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @param prefix String to be matched with for prefix (e.g. \"tag/\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Constructor for Prefix"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @param prefix String to be matched with for prefix (e.g. \"tag/\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @param type String describing type of prefix (e.g. \"Tag\" for tag/ prefix)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public Prefix(String prefix, String type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "theyellowfellow": 20,
      "-": 38
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/appointment/AddAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Parses input arguments and creates a new AddAppointmentCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AddAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NRIC, PREFIX_DATETIME, PREFIX_TIME, PREFIX_DURATION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_DURATION)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Optional\u003cIndex\u003e patientIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Optional\u003cNric\u003e patientNric;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Optional\u003cDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Optional\u003cTime\u003e time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            patientIndex \u003d Optional.ofNullable(ParserUtil.parseIndex(argMultimap.getPreamble()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            patientNric \u003d Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            patientIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            patientNric \u003d Optional.ofNullable(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).orElse(\"\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_INDEX_AND_NRIC_BOTH_EMPTY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            dateTime \u003d Optional.ofNullable("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).orElse(\"\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            time \u003d Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            dateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            time \u003d Optional.ofNullable("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).orElse(\"\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_DATETIME_AND_TIME_BOTH_EMPTY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new AddAppointmentCommand(patientIndex, patientNric, dateTime, time, duration, description, tagList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 66,
      "porkeypine": 13,
      "kaitlynng": 5
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/appointment/DeleteAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DeleteAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Index targetIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                return new DeleteAppointmentCommand(Optional.of(targetIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        DeleteAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATETIME)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new DeleteAppointmentCommand(Optional.of(dateTime), Optional.of(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                DeleteAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 19,
      "porkeypine": 28,
      "thutahw": 5
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/appointment/EditAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.parseTagsForEdit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.EditAppointmentDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAppointmentCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * and returns an EditAppointmentCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_DESCRIPTION, PREFIX_TAG, PREFIX_DURATION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    EditAppointmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            editAppointmentDescriptor.setDateTime(ParserUtil.parseDateTime("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            editAppointmentDescriptor.setDuration(ParserUtil.parseDuration("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    argMultimap.getValue(PREFIX_DURATION).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            editAppointmentDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editAppointmentDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!editAppointmentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new EditAppointmentCommand(index, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 62,
      "porkeypine": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/appointment/FindAppointmentByKeywordCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.logic.commands.appointment.FindAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.AppointmentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Parses input arguments and creates a new FindAppointmentCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class FindAppointmentByKeywordCommandParser implements Parser\u003cFindAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAppointmentCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * and returns a FindAppointmentCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public FindAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new FindAppointmentCommand(new AppointmentContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 23,
      "kaitlynng": 9
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/appointment/ListPatientAppointmentsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.appointment.ListPatientAppointmentsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Parses input arguments and creates a new ListPatientAppointmentsCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class ListPatientAppointmentsCommandParser implements Parser\u003cListPatientAppointmentsCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListPatientAppointmentsCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * and returns a ListPatientAppointmentsCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public ListPatientAppointmentsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            return new ListPatientAppointmentsCommand(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new ListPatientAppointmentsCommand(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new ListPatientAppointmentsCommand(nric);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListPatientAppointmentsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "porkeypine": 21,
      "thutahw": 26
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/appointment/MarkAppointmentDoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.appointment.MarkAppointmentDoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class MarkAppointmentDoneCommandParser implements Parser\u003cMarkAppointmentDoneCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkAppointmentDoneCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and returns a MarkAppointmentDoneCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public MarkAppointmentDoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATETIME, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            DateTime dateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAppointmentDoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new MarkAppointmentDoneCommand(dateTime, name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAppointmentDoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return new MarkAppointmentDoneCommand(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 16,
      "porkeypine": 36
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/appointment/MarkAppointmentMissedCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.commands.appointment.MarkAppointmentMissedCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class MarkAppointmentMissedCommandParser implements Parser\u003cMarkAppointmentMissedCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkAppointmentMissedCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and returns a MarkAppointmentMissedCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public MarkAppointmentMissedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATETIME, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            DateTime dateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAppointmentMissedCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new MarkAppointmentMissedCommand(dateTime, name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAppointmentMissedCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new MarkAppointmentMissedCommand(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "porkeypine": 50,
      "thutahw": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/calendar/DayCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.calendar.DayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DayCommandParser implements Parser\u003cDayCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Day day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        day \u003d ParserUtil.parseDayOfMonth(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new DayCommand(day);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 22,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/calendar/MonthCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.calendar.MonthCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class MonthCommandParser implements Parser\u003cMonthCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public MonthCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Month month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        month \u003d ParserUtil.parseMonth(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new MonthCommand(month);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 22,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/calendar/YearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.calendar.YearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class YearCommandParser implements Parser\u003cYearCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public YearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Year year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        year \u003d ParserUtil.parseYear(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new YearCommand(year);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 22,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/patient/AddPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Parses input arguments and creates a new AddPatientCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AddPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NRIC, PREFIX_NAME, PREFIX_PHONE, PREFIX_GENDER, PREFIX_TAG,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        PREFIX_REMARK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_NAME, PREFIX_PHONE, PREFIX_GENDER)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patient \u003d new Patient(nric, name, phone, gender, tagList, remark);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new AddPatientCommand(patient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 29,
      "thutahw": 1,
      "-": 26,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/patient/DeletePatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DeletePatientCommandParser implements Parser\u003cDeletePatientCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePatientCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and returns a DeletePatientCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DeletePatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new DeletePatientCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9,
      "porkeypine": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/patient/EditPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.parseTagsForEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditPatientCommandParser implements Parser\u003cEditPatientCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPatientCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * and returns an EditPatientCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_GENDER, PREFIX_TAG,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        PREFIX_REMARK, PREFIX_NRIC);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    EditPatientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor editPatientDescriptor \u003d new EditPatientCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // edit nric"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            editPatientDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // edit name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // edit phone number"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // edit gender"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            editPatientDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // edit remark"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            editPatientDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // edit tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPatientDescriptor::setTags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(EditPatientCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new EditPatientCommand(index, editPatientDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 42,
      "thutahw": 1,
      "-": 32,
      "kaitlynng": 8
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/patient/FindPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.FindPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class FindPatientCommandParser implements Parser\u003cFindPatientCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public FindPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new FindPatientCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 10,
      "-": 24
    }
  },
  {
    "path": "src/main/java/team/baymax/logic/parser/patient/RemarkPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.RemarkPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class RemarkPatientCommandParser implements Parser\u003cRemarkPatientCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemarkCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * and returns a RemarkCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public RemarkPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "            System.out.println(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    RemarkPatientCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        Remark remark \u003d new Remark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new RemarkPatientCommand(index, remark);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 36,
      "theyellowfellow": 2,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/main/java/team/baymax/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the user prefs\u0027 patient storage file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getPatientStorageFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the user prefs\u0027 appointment storage file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getAppointmentStorageFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the user prefs\u0027 appointment book file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void setPatientStorageFilePath(Path patientStorageFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void setAppointmentStorageFilePath(Path appointmentStorageFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the PatientManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    ReadOnlyListManager\u003cPatient\u003e getPatientManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Replaces PatientManager data with the data in {@code patientManager}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void setPatientManager(ReadOnlyListManager\u003cPatient\u003e patientManager);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the appointment book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The patient must exist in the appointment book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code patient} must not already exist in the appointment book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code target} must exist in the appointment book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * appointment book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Patient getPatient(Nric nric);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    Patient getPatient(Name name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered patient list */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns the AppointmentManager"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    ReadOnlyListManager\u003cAppointment\u003e getAppointmentManager();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Replaces AppointmentManager data with the data in {@code AppointmentManager}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void setAppointmentManager(ReadOnlyListManager\u003cAppointment\u003e appointmentmanager);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if an appointment with the same identity as {@code appointment} exists in the appointment book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    boolean hasAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if there is an appointment existing in the manager that clashes with"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code appointment} in time."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    boolean doesAppointmentClash(Appointment appointment);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Deletes the given appointment."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The appointment must exist in the appointment book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void deleteAppointment(Appointment target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Deletes all appointments belonging to the specified patient."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * {@code patient} must exist in the appointment book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void clearAllAppointmentsOfPatient(Patient patient);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds the given appointment."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code appointment} must not already exist in the appointment book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void addAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Replaces the given appointment {@code target} with {@code editedAppointment}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * {@code target} must exist in the appointment book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another existing patient in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * appointment book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    void setAppointment(Appointment target, Appointment editedAppointment);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /** Returns an unmodifiable view of the filtered appointment list */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    CalendarManager getCalendarManager();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    AppointmentCalendar getAppointmentCalendar();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    void setDay(Day day);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    void setMonth(Month month);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    void setYear(Year year);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    void resetCalendar();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    Appointment findAppointmentByPredicate(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d utils \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void resetAllListManagers();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 56,
      "porkeypine": 10,
      "-": 56,
      "kaitlynng": 74
    }
  },
  {
    "path": "src/main/java/team/baymax/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Represents the in-memory model of the appointment book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Contains a filtered list of unique patients."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Contains a filtered list of unique appointments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final PatientManager patientManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final AppointmentManager appointmentManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final CalendarManager calendarManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatientsList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointmentsList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Initializes a ModelManager with the given appointmentBook and userPrefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ModelManager(ReadOnlyListManager\u003cPatient\u003e patientManager,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        ReadOnlyListManager\u003cAppointment\u003e appointmentManager,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        CalendarManager calendarManager) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(patientManager, appointmentManager, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        logger.fine(\"Initializing with Baymax: \" + patientManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.patientManager \u003d new PatientManager(patientManager);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointmentManager \u003d new AppointmentManager(appointmentManager);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.calendarManager \u003d calendarManager;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        filteredPatientsList \u003d new FilteredList\u003c\u003e(this.patientManager.getReadOnlyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        filteredAppointmentsList \u003d new FilteredList\u003c\u003e(this.appointmentManager.getReadOnlyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this(new PatientManager(), new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getPatientStorageFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return userPrefs.getPatientStorageFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getAppointmentStorageFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return userPrefs.getAppointmentStorageFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatientStorageFilePath(Path patientStorageFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(patientStorageFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        userPrefs.setPatientStorageFilePath(patientStorageFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setAppointmentStorageFilePath(Path appointmentStorageFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(appointmentStorageFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        userPrefs.setAppointmentStorageFilePath(appointmentStorageFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatientManager(ReadOnlyListManager\u003cPatient\u003e patientManager) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.patientManager.resetData(patientManager);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ReadOnlyListManager\u003cPatient\u003e getPatientManager() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patientManager;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patientManager.hasPatient(patient);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManager.removePatient(target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManager.addPatient(patient);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManager.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Patient getPatient(Nric nric) throws ElementNotFoundException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return patientManager.getPatient(nric);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Patient getPatient(Name name) throws ElementNotFoundException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return patientManager.getPatient(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code versionedAppointmentBook}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return filteredPatientsList;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        filteredPatientsList.setPredicate(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setAppointmentManager(ReadOnlyListManager\u003cAppointment\u003e appointmentManager) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointmentManager.resetData(appointmentManager);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ReadOnlyListManager\u003cAppointment\u003e getAppointmentManager() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointmentManager;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointmentManager.hasAppointment(appointment);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean doesAppointmentClash(Appointment appointment) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointmentManager.doesAppointmentClash(appointment);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointmentManager.removeAppointment(target);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void clearAllAppointmentsOfPatient(Patient patient) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        appointmentManager.clearAllAppointmentsOfPatient(patient);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointmentManager.addAppointment(appointment);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointmentManager.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Appointment findAppointmentByPredicate(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return appointmentManager.getApptByPred(predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * {@code versionedAppointmentBook}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        System.out.println(\"In model.getFilteredAppointmentlist()\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.println(filteredAppointmentsList);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return filteredAppointmentsList;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        filteredAppointmentsList.setPredicate(predicate);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CalendarManager getCalendarManager() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return calendarManager;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentCalendar getAppointmentCalendar() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return calendarManager.getAppointmentCalendar();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setDay(Day day) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarManager.setDay(day);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setMonth(Month month) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarManager.setMonth(month);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setYear(Year year) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarManager.setYear(year);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void resetCalendar() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarManager.resetCalendar(new CalendarManager());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d utils \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void resetAllListManagers() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        patientManager.resetData(new PatientManager());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentManager.resetData(new AppointmentManager());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 patientManager.equals(other.patientManager)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 appointmentManager.equals(other.appointmentManager)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 calendarManager.equals(other.calendarManager)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 filteredPatientsList.equals(other.filteredPatientsList)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 filteredAppointmentsList.equals(other.filteredAppointmentsList);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 96,
      "porkeypine": 14,
      "thutahw": 1,
      "-": 101,
      "kaitlynng": 107
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.UniqueListElement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Represents an Appointment in the appointment book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Appointment implements UniqueListElement {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private final Patient patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private final AppointmentStatus status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Appointment(Patient patient, DateTime dateTime, Duration duration, Description description,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                       Set\u003cTag\u003e tags, AppointmentStatus status) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(patient, dateTime, tags, description, duration);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return dateTime.getDate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return dateTime.getTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.dateTime.plusMinutes(this.duration);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public AppointmentStatus getStatus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /** Returns true if both appointments have the same date and time."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * This defines a weaker notion of equality between two appointments."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean isSame(UniqueListElement other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return otherAppointment !\u003d null"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 otherAppointment.getDateTime().equals(dateTime)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 otherAppointment.getPatient().equals(patient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public int compare(Appointment a1, Appointment a2) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return a2.getDateTime().compareTo(a1.getDateTime());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return getPatient().equals(otherAppointment.getPatient())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 getDateTime().equals(otherAppointment.getDateTime())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 getDuration().equals(otherAppointment.getDuration())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 getDescription().equals(otherAppointment.getDescription())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 getStatus().equals(otherAppointment.getStatus())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 getTags().equals(otherAppointment.getTags());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Objects.hash(patient, dateTime, status, tags, description);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        builder.append(\"\\nPatient \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(getPatient())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(\"\\nDate-time: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .append(getDateTime())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (getTags().size() \u003e 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            builder.append(\"\\nTags: \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 45,
      "theyellowfellow": 61,
      "porkeypine": 8,
      "kaitlynng": 36
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/AppointmentClashPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class AppointmentClashPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final Appointment appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public AppointmentClashPredicate(Appointment appointment) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean test(Appointment other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patient \u003d appointment.getPatient();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime startDateTime \u003d appointment.getDateTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime endDateTime \u003d appointment.getEndDateTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patient.equals(other.getPatient())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 !(endDateTime.isEqual(other.getDateTime())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    || endDateTime.isBefore(other.getDateTime())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    || startDateTime.isEqual(other.getEndDateTime())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    || startDateTime.isAfter(other.getEndDateTime()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 28
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/AppointmentContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Tests that an {@code Appointment}\u0027s {@code Description} or {@code Tags} contain any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class AppointmentContainsKeywordsPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public AppointmentContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // iterate through set of tags"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String tagSet \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        for (Tag temp : appointment.getTags()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            tagSet +\u003d temp.getTagname() + \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String toMatch \u003d tagSet + appointment.getDescription().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        toMatch, keyword));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same objectF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                || (other instanceof AppointmentContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 keywords.equals(((AppointmentContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 38,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/AppointmentIdenticalPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AppointmentIdenticalPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Appointment appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentIdenticalPredicate(Appointment appointment) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return appointment.equals(this.appointment);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 17
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/AppointmentMatchesDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AppointmentMatchesDatePredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentMatchesDatePredicate(Date date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return date.equals(appointment.getDate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 18,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/AppointmentStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "public enum AppointmentStatus {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    DONE(\"done\", \"#3e9149\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    MISSED(\"missed\", \"#ac4848\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    UPCOMING(\"upcoming\", \"#4d66bc\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private String colorCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    AppointmentStatus(String status, String color) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.colorCode \u003d color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String getColorCode() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return colorCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String text() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 20,
      "theyellowfellow": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/BelongsToPatientPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Tests that an {@code Appointment}\u0027s {@code Patient} matches the one given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class BelongsToPatientPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final Patient patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Constructor taking in a Patient object to match Appointments with"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param patient   Patient object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public BelongsToPatientPredicate(Patient patient) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return appointment.getPatient().equals(patient);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                || (other instanceof BelongsToPatientPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                \u0026\u0026 patient.equals(((BelongsToPatientPredicate) other).patient)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 32
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointment descriptions can take any values, \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        if (isValidDescription(description)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            value \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return test.trim().length() !\u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 34,
      "theyellowfellow": 14
    }
  },
  {
    "path": "src/main/java/team/baymax/model/appointment/SameDatetimeAndPatientPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Tests that an {@code Appointment}\u0027s {@code DateTime} and {@code Patient} matches the ones given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class SameDatetimeAndPatientPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final Patient patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Constructor taking in a dateTime and Patient object to match Appointments with"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param dateTime  DateTime object in the format DD-MM-YYYY HH:MM"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param patient   Patient object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public SameDatetimeAndPatientPredicate(DateTime dateTime, Patient patient) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return (appointment.getDateTime().equals(dateTime))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                \u0026\u0026 (appointment.getPatient().equals(patient));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                || (other instanceof SameDatetimeAndPatientPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 dateTime.equals(((SameDatetimeAndPatientPredicate) other).dateTime)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 patient.equals(((SameDatetimeAndPatientPredicate) other).patient)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 8,
      "porkeypine": 30
    }
  },
  {
    "path": "src/main/java/team/baymax/model/calendar/AppointmentCalendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.beans.PropertyChangeSupport;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.DateTimeUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "// make AppointmentCalendar a java bean class to support property change listeners"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AppointmentCalendar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected final SimpleStringProperty dayProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected final SimpleStringProperty monthProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected final SimpleStringProperty yearProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected final SimpleStringProperty dateProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private PropertyChangeSupport pcs \u003d new PropertyChangeSupport(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentCalendar() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this(new Day(getCurrentDay()), new Month(getCurrentMonth()), new Year(getCurrentYear()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs an {@code AppointmentCalendar} given the {@code day}, {@code month} and {@code year}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentCalendar(Day day, Month month, Year year) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireAllNonNull(day, month, year);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.dayProperty \u003d new SimpleStringProperty(day.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.monthProperty \u003d new SimpleStringProperty(month.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.yearProperty \u003d new SimpleStringProperty(year.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.dateProperty \u003d new SimpleStringProperty(new Date(day, month, year).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static int getCurrentDay() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Calendar.getInstance().get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static int getCurrentMonth() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Calendar.getInstance().get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static int getCurrentYear() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Updates the value of the {@code day} attribute stored in the {@code AppointmentCalendar}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void updateDay() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        int maxNumOfDays \u003d DateTimeUtil.getNumOfDays(this.month, this.year);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (day.getValue() \u003e maxNumOfDays) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            setDay(new Day(maxNumOfDays));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setDay(Day day) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Day prev \u003d this.day;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date newDate \u003d new Date(day, month, year);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        updateDateProperty(newDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        pcs.firePropertyChange(\"day\", prev, day);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setMonth(Month month) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Month prev \u003d this.month;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date newDate \u003d new Date(day, month, year);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        updateDateProperty(newDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        pcs.firePropertyChange(\"month\", prev, month);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        updateDay();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setYear(Year year) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Year prev \u003d this.year;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date newDate \u003d new Date(day, month, year);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        updateDateProperty(newDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        pcs.firePropertyChange(\"year\", prev, year);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        updateDay();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Updates the date property of the {@code AppointmentCalendar}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void updateDateProperty(Date date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        dateProperty.set(date.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        dayProperty.set(date.getDay().toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        monthProperty.set(date.getMonth().toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        yearProperty.set(date.getYear().toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public SimpleStringProperty getDayProperty() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return dayProperty;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public SimpleStringProperty getMonthProperty() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return monthProperty;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public SimpleStringProperty getYearProperty() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return yearProperty;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public SimpleStringProperty getDateProperty() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return dateProperty;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void addPropertyChangeListener(PropertyChangeListener listener) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        pcs.addPropertyChangeListener(listener);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void removePropertyChangeListener(PropertyChangeListener listener) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        pcs.removePropertyChangeListener(listener);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof AppointmentCalendar // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 day.equals(((AppointmentCalendar) other).day)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 month.equals(((AppointmentCalendar) other).month)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 year.equals(((AppointmentCalendar) other).year));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 118,
      "kaitlynng": 37
    }
  },
  {
    "path": "src/main/java/team/baymax/model/modelmanagers/AppointmentManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.modelmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.AppointmentClashPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.appointment.BelongsToPatientPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Wraps all data at the AppointmentManager level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Duplicates are not allowed (by.equals comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class AppointmentManager implements ReadOnlyListManager\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final UniqueList\u003cAppointment\u003e appointments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointments \u003d new UniqueList\u003cAppointment\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public AppointmentManager() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates an AppointmentManager using the Appointments in {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public AppointmentManager(ReadOnlyListManager\u003cAppointment\u003e toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Replaces the contents of the appointments list with {@code appointments}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code appointments} must not contain duplicate appointments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointments.setElements(appointments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Resets the existing data of this {@code AppointmentManager} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void resetData(ReadOnlyListManager\u003cAppointment\u003e newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        setAppointments(newData.getReadOnlyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sorts the appointments list with the specified comparator."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void sortAppointmentList(Comparator\u003cAppointment\u003e cmp) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointments.sort(cmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // appointment-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if an appointment with the same identity as {@code appointment}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * exists in the appointments list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointments.contains(appointment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if there is an appointment existing in the manager that clashes with"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code appointment} in time."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean doesAppointmentClash(Appointment appointment) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointments.contains(new AppointmentClashPredicate(appointment));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds a appointment to the AppointmentManager."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The appointment must not already exist in the AppointmentManager."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void addAppointment(Appointment p) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointments.add(p);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code target} must exist in the AppointmentManager."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * existing appointment in the appointment manager."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(editedAppointment);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointments.setElement(target, editedAppointment);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Removes {@code key} from this {@code AppointmentManager}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code key} must exist in the appointment manager."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void removeAppointment(Appointment key) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointments.remove(key);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Clears all the appointments belonging to {@code patient} from this {@code AppointmentManager}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void clearAllAppointmentsOfPatient(Patient patient) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        BelongsToPatientPredicate predicate \u003d new BelongsToPatientPredicate(patient);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        while (appointments.contains(predicate)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Appointment toRemove \u003d appointments.getByPredicate(predicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            appointments.remove(toRemove);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns the Appointment matching the given predicate. If no Appointment matches the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * predicate given, an {@code ElementNotFoundException} is thrown."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Appointment getApptByPred(Predicate\u003cAppointment\u003e pred) throws ElementNotFoundException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return appointments.getByPredicate(pred);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"AppointmentManager:\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + appointments.stream().map(Appointment::toString).collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + \"\\nTotal number of appointments: \" + appointments.size();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Modifies appointments list to mark all appointments that have passed as DONE if they"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * are not explicitly marked as MISSING"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private void markAllPastAppointmentsAsDone() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Predicate\u003cAppointment\u003e apptPastButMarkedAsUpcoming \u003d new Predicate\u003cAppointment\u003e() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return appointment.getDateTime().compareTo(DateTime.current()) \u003c 0"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        \u0026\u0026 appointment.getStatus() \u003d\u003d AppointmentStatus.UPCOMING;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        };"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        while (appointments.contains(apptPastButMarkedAsUpcoming)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Appointment pastAppt \u003d appointments.getByPredicate(apptPastButMarkedAsUpcoming);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Appointment markedAsDoneAppt \u003d new Appointment(pastAppt.getPatient(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    pastAppt.getDateTime(), pastAppt.getDuration(), pastAppt.getDescription(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    pastAppt.getTags(), AppointmentStatus.DONE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            setAppointment(pastAppt, markedAsDoneAppt);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                || (other instanceof AppointmentManager // instanceof handles nulls"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 appointments.equals(((AppointmentManager) other).appointments));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointments.hashCode();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 10,
      "porkeypine": 41,
      "kaitlynng": 130
    }
  },
  {
    "path": "src/main/java/team/baymax/model/modelmanagers/CalendarManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.modelmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class CalendarManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final AppointmentCalendar appointmentCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentCalendar \u003d new AppointmentCalendar();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CalendarManager() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a CalendarManager using the day, month and year in {@code toBeCopied}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CalendarManager(CalendarManager toBeCopied) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        resetCalendar(toBeCopied);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentCalendar getAppointmentCalendar() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return appointmentCalendar;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setDay(Day day) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentCalendar.setDay(day);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setMonth(Month month) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentCalendar.setMonth(month);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setYear(Year year) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentCalendar.setYear(year);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Resets the calendar to the default current year, month and day."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void resetCalendar(CalendarManager newCalendar) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AppointmentCalendar appointmentCalendar \u003d newCalendar.getAppointmentCalendar();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        setYear(appointmentCalendar.getYear());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        setMonth(appointmentCalendar.getMonth());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        setDay(appointmentCalendar.getDay());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof CalendarManager // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 appointmentCalendar.equals(((CalendarManager) other).appointmentCalendar));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 61,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/model/modelmanagers/PatientManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.modelmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import team.baymax.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Wraps all data at the PatientManager level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Duplicates are not allowed (by.equals comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class PatientManager implements ReadOnlyListManager\u003cPatient\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final UniqueList\u003cPatient\u003e patients;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patients \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientManager() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates a PatientManager using the Patients in {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientManager(ReadOnlyListManager\u003cPatient\u003e toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.patients.setElements(patients);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Resets the existing data of this {@code PatientManager} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void resetData(ReadOnlyListManager\u003cPatient\u003e newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        setPatients(newData.getReadOnlyList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sorts the patient list with the specified comparator."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void sortPatientList(Comparator\u003cPatient\u003e cmp) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patients.sort(cmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // patient-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if a patient with the same nric as {@code nric} exists in the patient list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean hasPatient(Nric nric) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patients.contains((patient) -\u003e patient.getNric().equals(nric));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds a patient to the PatientManager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The patient must not already exist in the PatientManager."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code target} must exist in the patient manager."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * patient manager."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patients.setElement(target, editedPatient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Removes {@code key} from this {@code PatientManager}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code key} must exist in the patient manager."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns a patient matching the given nric, if it exists, otherwise throws an {@code ElementNotFoundException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Patient getPatient(Nric nric) throws ElementNotFoundException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patients.getByPredicate((patient) -\u003e patient.getNric().equals(nric));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns the first patient matching the given name, if it exists,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * otherwise throws an {@code ElementNotFoundException}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Patient getPatient(Name name) throws ElementNotFoundException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String[] nameKeywords \u003d name.getFullName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return patients.getByPredicate(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"PatientManager:\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + patients.stream().map(Patient::toString).collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + \"\\nTotal number of patients: \" + patients.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ObservableList\u003cPatient\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                || (other instanceof PatientManager // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 patients.equals(((PatientManager) other).patients));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // return patients.hashCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9,
      "porkeypine": 11,
      "kaitlynng": 132
    }
  },
  {
    "path": "src/main/java/team/baymax/model/modelmanagers/ReadOnlyListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.modelmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Unmodifiable view of a ListManager"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public interface ReadOnlyListManager\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns an unmodifiable view of the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * This list will not contain any duplicate elements."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    ObservableList\u003cT\u003e getReadOnlyList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "kaitlynng": 12
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Represents a Patient\u0027s gender in the appointment book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \"Gender should be specified as either M (male) or F (female). This field is case-insensitive.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[mMfF]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Constructs an {@code Gender}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param value A valid gender."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Gender(String value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        checkArgument(isValidGender(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 20,
      "thutahw": 7,
      "-": 31
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Represents a Patient\u0027s name in the appointment book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 7,
      "thutahw": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().getFullName(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "thutahw": 2,
      "-": 25,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/Nric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \"Nric should be of the format @XXXXXXX#, where:\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"(1) @ is a letter that can be \u0027S\u0027, \u0027T\u0027, \u0027F\u0027 or \u0027G\u0027,\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    + \"(2) X is a numeric digit from 0 to 9, and\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"(3) # is a alphabetical character\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"Note: there should be exactly 7 X\u0027s. The first and last letters are case-insensitive\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[stfgSTFG][0-9]{7}[a-zA-Z]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Constructs an {@code Nric}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param value A valid nric."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Nric(String value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        checkArgument(isValidNric(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if a given string is a valid nric."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                || (other instanceof Nric"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 value.equals(((Nric) other).value));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 21,
      "porkeypine": 1,
      "kaitlynng": 35
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.UniqueListElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Represents a Patient in the appointment book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Patient implements UniqueListElement {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Patient(Nric nric, Name name, Phone phone, Gender gender, Set\u003cTag\u003e tags, Remark remark) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(nric, name, phone, gender, tags, remark);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if both patients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean isSame(UniqueListElement other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 otherPatient.getNric().equals(getNric());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns true if both patients have the same identity fields (nric, name, gender)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return otherPatient.getNric().equals(nric)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(name)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 otherPatient.getGender().equals(gender)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(phone)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 otherPatient.getRemark().equals(remark)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 otherPatient.getTags().equals(tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return Objects.hash(nric, name, phone, gender, tags, remark);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(\" | NRIC: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(\" | Gender: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(\" | Phone: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(\"\\n\\t   Remark: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (getTags().size() \u003e 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            builder.append(\" | Tags: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 17,
      "porkeypine": 12,
      "thutahw": 7,
      "-": 75,
      "kaitlynng": 28
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/PatientHasAppointmentPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Tests that a {@code Appointment}\u0027s {@code Patient} matches the patient given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class PatientHasAppointmentPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private final Patient patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public PatientHasAppointmentPredicate(Patient patient) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        return patient.isSame(appointment.getPatient());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                || (other instanceof PatientHasAppointmentPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                \u0026\u0026 patient.equals(((PatientHasAppointmentPredicate) other).patient)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thutahw": 30
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/PatientIdenticalPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class PatientIdenticalPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Patient patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public PatientIdenticalPredicate(Patient patient) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return patient.equals(this.patient);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 17
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Represents a Patient\u0027s phone number in the appointment book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 7,
      "thutahw": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/team/baymax/model/patient/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Represents a Patient\u0027s remark in the appointment book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Guarantees: immutable;}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param value A valid remark."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Remark(String value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 44,
      "thutahw": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Represents a Tag in the appointment book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be alphanumeric and should not \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"contain special characters and spaces.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String getTagname() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5,
      "porkeypine": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/team/baymax/model/userprefs/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getPatientStorageFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getAppointmentStorageFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 13,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/model/userprefs/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final Path DEFAULT_STORAGE_PATH \u003d Path.of(\"data\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Path patientStorageFilePath \u003d DEFAULT_STORAGE_PATH.resolve(\"patients.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Path appointmentStorageFilePath \u003d DEFAULT_STORAGE_PATH.resolve(\"appointments.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        setPatientStorageFilePath(newUserPrefs.getPatientStorageFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        setAppointmentStorageFilePath(newUserPrefs.getAppointmentStorageFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getPatientStorageFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patientStorageFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getAppointmentStorageFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointmentStorageFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatientStorageFilePath(Path patientStorageFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(patientStorageFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.patientStorageFilePath \u003d patientStorageFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setAppointmentStorageFilePath(Path appointmentStorageFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(appointmentStorageFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointmentStorageFilePath \u003d appointmentStorageFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 patientStorageFilePath.equals(o.patientStorageFilePath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 appointmentStorageFilePath.equals(o.appointmentStorageFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return Objects.hash(guiSettings, patientStorageFilePath, appointmentStorageFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        sb.append(\"\\nPatient data file location : \" + patientStorageFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        sb.append(\"\\nAppointment data file location : \" + appointmentStorageFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 74,
      "kaitlynng": 25
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Contains utility methods for populating {@code AppointmentManager} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static Patient[] getSamplePatients() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            new Patient(new Nric(\"S0123456A\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Gender(\"M\"), getTagSet(), new Remark(\"Allergic to ibuprofen.\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            new Patient(new Nric(\"T0123456A\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Gender(\"F\"), getTagSet(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    new Remark(\"Only available on Saturdays.\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            new Patient(new Nric(\"S6543210A\"), new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Gender(\"F\"), getTagSet(\"CHAS\", \"LTC\"), new Remark(\"Under long term care.\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            new Patient(new Nric(\"T6543210A\"), new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Gender(\"M\"), getTagSet(\"Paediatric\"), new Remark(\"Diabetic.\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            new Patient(new Nric(\"T1548765D\"), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Gender(\"M\"), getTagSet(\"CHAS\"), new Remark(\"Allergic to aspirin.\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            new Patient(new Nric(\"S4658753E\"), new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Gender(\"M\"), getTagSet(\"LTC\"), new Remark(\"Currently taking warfarin.\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static ReadOnlyListManager\u003cPatient\u003e getSamplePatientManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager samplePM \u003d new PatientManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (Patient samplePatient : getSamplePatients()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            samplePM.addPatient(samplePatient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return samplePM;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static Appointment[] getSampleAppointments() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient[] patients \u003d getSamplePatients();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new Appointment[] {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Appointment(patients[0], DateTime.fromString(\"13-11-2020 09:00\"), new Duration(60),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    new Description(\"Full body checkup\"), getTagSet(\"Xray\"), AppointmentStatus.UPCOMING),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Appointment(patients[3], DateTime.fromString(\"13-11-2020 10:00\"), new Duration(60),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Description(\"Diabetes checkup\"), getTagSet(), AppointmentStatus.UPCOMING),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Appointment(patients[0], DateTime.fromString(\"13-11-2021 11:00\"), new Duration(60),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Description(\"Blood pressure checkup\"), getTagSet(), AppointmentStatus.UPCOMING),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Appointment(patients[2], DateTime.fromString(\"13-11-2020 13:00\"), new Duration(60),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    new Description(\"Wrist fracture checkup\"), getTagSet(\"Xray\"), AppointmentStatus.UPCOMING),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Appointment(patients[1], DateTime.fromString(\"14-11-2020 09:00\"), new Duration(60),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Description(\"Pregnancy checkup\"), getTagSet(\"Gynaecology\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    AppointmentStatus.UPCOMING),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Appointment(patients[1], DateTime.fromString(\"15-11-2021 10:00\"), new Duration(60),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    new Description(\"Pregnancy checkup\"), getTagSet(\"Gynaecology\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    AppointmentStatus.UPCOMING)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static ReadOnlyListManager\u003cAppointment\u003e getSampleAppointmentManager() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AppointmentManager sampleAppointmentManager \u003d new AppointmentManager();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (Appointment sampleAppointment : getSampleAppointments()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            sampleAppointmentManager.addAppointment(sampleAppointment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return sampleAppointmentManager;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 25,
      "theyellowfellow": 1,
      "-": 25,
      "kaitlynng": 40
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/TabId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public enum TabId {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    DASHBOARD(1, \"dashboard\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    CALENDAR(2, \"calendar\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    SCHEDULE(3, \"schedule\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    PATIENT(4, \"patient\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    APPOINTMENT(5, \"appointment\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    INFO(6, \"info\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    NONE(-1, \"none\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static Map map \u003d new HashMap\u003cInteger, TabId\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final int tabNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final String tabName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    TabId(int tabNumber, String tabName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.tabNumber \u003d tabNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        for (TabId tabId : TabId.values()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            map.put(tabId.tabNumber, tabId);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static TabId valueOf(int tabNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return (TabId) map.get(tabNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String getTabName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return tabName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public int getTabNumber() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return tabNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return getTabName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 46
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/datetime/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date entered must be in the form of \u003cdd-MM-yyyy\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"The date given does not exist. Please refer to the \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"calendar to choose a valid date.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final DateTimeFormatter FORMAT_INPUT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final DateTimeFormatter FORMAT_OUTPUT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@Date} given a {@code LocalDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@Date} given the {@code day}, {@code month} and {@code year}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Date(Day day, Month month, Year year) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        date \u003d LocalDate.of(year.getValue(), month.getValue(), day.getValue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a new {@code Date} from a given formatted {@code dateString}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Date fromString(String dateString) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        checkArgument(isValidDate((dateString)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Date(LocalDate.parse(dateString, FORMAT_INPUT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns true if a given string is a valid time format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            LocalDate.parse(test, FORMAT_INPUT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Date fromCalendar(AppointmentCalendar calendar) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Date(calendar.getDay(), calendar.getMonth(), calendar.getYear());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Year(date.getYear());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Month(date.getMonthValue());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Day(date.getDayOfMonth());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!(other instanceof Date)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date otherDate \u003d (Date) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return otherDate !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 otherDate.date.equals(date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return date.format(FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 98,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/datetime/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Represents a DateTime object used in Baymax that wraps around the java.time.LocalDateTime"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * and provides basic functionality for storing and comparing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"DateTime entered must be in the form of \u003cdd-MM-yyyy HH:mm\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final DateTimeFormatter FORMAT_INPUT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final DateTimeFormatter FORMAT_STORAGE \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final DateTimeFormatter FORMAT_OUTPUT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mma\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * DateTime can only be created by calling {@link #fromString(String)}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private DateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Default constructor for {@code DateTime}, with input 2020-12-12 23:59"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DateTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(\"12-12-2020 23:59\", FORMAT_INPUT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static DateTime current() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return new DateTime(LocalDateTime.now());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates a new {@code DateTime} from a given formatted {@code dateTimeString}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static DateTime fromString(String dateTimeString) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(dateTimeString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        checkArgument(isValidDateTime((dateTimeString)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new DateTime(LocalDateTime.parse(dateTimeString, FORMAT_INPUT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if a given string is a valid DateTime format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            LocalDateTime.parse(test, FORMAT_INPUT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@code DateTime} from a {@code Date} and {@code Time}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static DateTime from(Date d, Time t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(d, t);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.of(d.getDate(), t.getTime());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new DateTime(dt);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the dateTime in a storage format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getStorageFormat() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return dateTime.format(FORMAT_STORAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Day(dateTime.getDayOfMonth());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Month(dateTime.getMonthValue());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Year(dateTime.getYear());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Date(getDay(), getMonth(), getYear());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Time(dateTime.toLocalTime());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a new {@code DateTime} with the specified duration (in minutes) added."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param duration"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public DateTime plusMinutes(Duration duration) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new DateTime(this.dateTime.plusMinutes(duration.value));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Checks if this {@code DateTime} is after the specified date-time."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean isAfter(DateTime other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(other);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return dateTime.isAfter(other.dateTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Checks if this {@code DateTime} is before the specified date-time."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean isBefore(DateTime other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(other);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return dateTime.isBefore(other.dateTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Checks if this {@code DateTime} is equal to the specified date-time."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean isEqual(DateTime other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(other);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return dateTime.isEqual(other.dateTime);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int compareTo(DateTime other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(other);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return dateTime.compareTo(other.dateTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                || (other instanceof DateTime"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 dateTime.equals(((DateTime) other).dateTime));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return dateTime.format(FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 32,
      "theyellowfellow": 6,
      "porkeypine": 4,
      "kaitlynng": 125
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/datetime/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static int[] numOfDaysInAMonth \u003d { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static int numOfDaysInFebLeapYear \u003d 29;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static String getMonthForInt(int num) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String month \u003d \"wrong\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DateFormatSymbols dfs \u003d new DateFormatSymbols();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String[] months \u003d dfs.getMonths();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (num \u003e\u003d 0 \u0026\u0026 num \u003c\u003d 11) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            month \u003d months[num];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static int getNumOfDays(Month month, Year year) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (month.getValue() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (isLeapYear(year)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return numOfDaysInFebLeapYear;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return numOfDaysInAMonth[month.getValue() - 1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns true if the supplied {@code year} is a leap year."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static boolean isLeapYear(Year year) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        int value \u003d year.getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (value % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (value % 100 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return (value % 400 \u003d\u003d 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 16,
      "kaitlynng": 30
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/datetime/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"A day must be specified as a number \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"between the first and last day of the month, inclusive.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final int value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@code Day} given a postive integer that must be between 1 and 31."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Day(int value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (isValidDay(value)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns true if a given number is a valid day."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static boolean isValidDay(int n) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return n \u003e 0 \u0026\u0026 n \u003c\u003d 31;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Day) other).value); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 47,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/datetime/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Duration (in minutes) must be a valid integer spanning\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \" not more than one day\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final int MIN_VALUE \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final int MAX_VALUE \u003d 24 * 60;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Predicate\u003cInteger\u003e VALIDATION_PREDICATE \u003d i -\u003e i \u003e\u003d MIN_VALUE \u0026\u0026 i \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@Duration} from an integer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Duration(Integer duration) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.value \u003d duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if a given Integer is a valid duration."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static boolean isValidDuration(Integer dur) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return VALIDATION_PREDICATE.test(dur);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                || (other instanceof Duration // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u0026\u0026 value.equals(((Duration) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9,
      "porkeypine": 2,
      "kaitlynng": 42
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/datetime/Month.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class Month {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"A month must be specified as a number \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            + \"between 1 (January) and 12 (December).\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static int[] numOfDays \u003d { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final int value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@code Month} given a postive integer that must be between 1 and 12."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Month(int value) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (isValidMonth(value)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns true if a given number is a valid month."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static boolean isValidMonth(int n) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return n \u003e 0 \u0026\u0026 n \u003c\u003d 12;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof Month // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Month) other).value); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return DateTimeUtil.getMonthForInt(value - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 47,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/datetime/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time entered must be in the form of \u003cHH:mm\u003e. Example: 14:00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final DateTimeFormatter FORMAT_INPUT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final DateTimeFormatter FORMAT_OUTPUT \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@code Time} from a {@code LocalDateTime}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Time(LocalTime time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a new {@code Time} from a given formatted {@code timeString}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static Time fromString(String timeString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        checkArgument(isValidTime((timeString)), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new Time(LocalTime.parse(timeString, FORMAT_INPUT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns true if a given string is a valid DateTime format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            LocalTime.parse(test, FORMAT_INPUT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return time.format(FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!(other instanceof Time)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Time otherTime \u003d (Time) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return otherTime !\u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 time.equals(otherTime.time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 68,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/datetime/Year.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"A year must be specified as a number 2000 or above.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final int value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@code Year} given a postive integer that must be 2000 or above."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Year(int value) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (isValidYear(value)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns true if a given number is a valid year."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static boolean isValidYear(int n) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return n \u003e\u003d 2000;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Year) other).value); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 46,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/uniquelist/UniqueList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.util.uniquelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A list that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * An element is considered unique by comparing using {@code T.isSame(T)}. As such, adding and updating of the list uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * T#isSame(T) for equality so as to ensure that the element being added or updated is unique in terms of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * identity in the UniqueList. However, the removal of an element uses T#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * as to ensure that the element with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class UniqueList\u003cT extends UniqueListElement\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if the list contains an equivalent element as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if the list contains at least one element that fulfills {@code pred}, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean contains(Predicate\u003c? super T\u003e pred) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(pred);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return internalList.stream().anyMatch(pred);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the element matching the given predicate. If no element matches the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * predicate given, an {@code ElementNotFoundException} is thrown."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public T getByPredicate(Predicate\u003c? super T\u003e pred) throws ElementNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(pred);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Optional\u003cT\u003e optionalElement \u003d internalList.stream().filter(pred).findFirst();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (optionalElement.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new ElementNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return optionalElement.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void sort(Comparator\u003cT\u003e cmp) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        internalList.sort(cmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds an element to the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The element must not already exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Replaces the element {@code target} in the list with {@code editedElement}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The patient identity of {@code editedElement} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setElement(T target, T editedElement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(target, editedElement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new ElementNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!target.isSame(editedElement) \u0026\u0026 contains(editedElement)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        internalList.set(index, editedElement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Removes the equivalent element from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * The element must exist in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new ElementNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setElements(UniqueList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Replaces the contents of this list with {@code elements}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * {@code elements} must not contain duplicate patients."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setElements(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireAllNonNull(elements);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!elementsAreUnique(elements)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        internalList.setAll(elements);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the size of the list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a stream of the elements in the list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Stream\u003cT\u003e stream() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return internalList.stream();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!(other instanceof UniqueList)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        @SuppressWarnings(\"unchecked\") UniqueList\u003cT\u003e otherList \u003d (UniqueList\u003cT\u003e) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return internalList.equals(otherList.internalList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns true if {@code elements} contains only unique elements."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private boolean elementsAreUnique(List\u003cT\u003e patients) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                if (patients.get(i).isSame(patients.get(j))) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 4,
      "kaitlynng": 185
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/uniquelist/UniqueListElement.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.util.uniquelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public interface UniqueListElement {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    boolean isSame(UniqueListElement other);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/uniquelist/exceptions/DuplicateElementException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.util.uniquelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DuplicateElementException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public DuplicateElementException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super(\"Operation would result in duplicate elements\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "kaitlynng": 10
    }
  },
  {
    "path": "src/main/java/team/baymax/model/util/uniquelist/exceptions/ElementNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.util.uniquelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Signals that the operation is unable to find the specified element."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class ElementNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public ElementNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        super(\"The element you are looking for is not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "thutahw": 6,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 44,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.storage.appointment.AppointmentManagerStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.PatientManagerStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public interface Storage extends PatientManagerStorage, AppointmentManagerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getPatientManagerStorageFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatients() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatients(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void savePatients(ReadOnlyListManager\u003cPatient\u003e patientManager) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void savePatients(ReadOnlyListManager\u003cPatient\u003e patientManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getAppointmentManagerStorageFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e readAppointments(PatientManager patientManager)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e readAppointments(PatientManager patientManager, Path filePath)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e appointmentManager) throws IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e appointmentManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9,
      "-": 23,
      "kaitlynng": 34
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.storage.appointment.AppointmentManagerStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.PatientManagerStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Manages storage of Baymax data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private PatientManagerStorage patientManagerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private AppointmentManagerStorage appointmentManagerStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates a new {@code StorageManager}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param patientManagerStorage     the patient manager storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param userPrefsStorage          the user prefs storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public StorageManager(PatientManagerStorage patientManagerStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                          AppointmentManagerStorage appointmentManagerStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.patientManagerStorage \u003d patientManagerStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointmentManagerStorage \u003d appointmentManagerStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patientmanager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getPatientManagerStorageFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patientManagerStorage.getPatientManagerStorageFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatients() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return readPatients(patientManagerStorage.getPatientManagerStorageFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatients(Path filePath)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patientManagerStorage.readPatients(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void savePatients(ReadOnlyListManager\u003cPatient\u003e patientManager) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        savePatients(patientManager, patientManagerStorage.getPatientManagerStorageFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void savePatients(ReadOnlyListManager\u003cPatient\u003e patientManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManagerStorage.savePatients(patientManager, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getAppointmentManagerStorageFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patientManagerStorage.getPatientManagerStorageFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e readAppointments(PatientManager patientManager)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return readAppointments(patientManager, appointmentManagerStorage.getAppointmentManagerStorageFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e readAppointments(PatientManager patientManager, Path filePath)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointmentManagerStorage.readAppointments(patientManager, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e appointmentManager) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        saveAppointments(appointmentManager, appointmentManagerStorage.getAppointmentManagerStorageFilePath());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e appointmentManager, Path filePath)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointmentManagerStorage.saveAppointments(appointmentManager, filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 10,
      "-": 56,
      "kaitlynng": 58
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/appointment/AppointmentManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public interface AppointmentManagerStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getAppointmentManagerStorageFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns AppointmentManager data as a {@link ReadOnlyListManager}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e readAppointments(PatientManager patientManager)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @see #readAppointments(PatientManager)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e readAppointments(PatientManager patientManager, Path filePath)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Saves the given {@link ReadOnlyListManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param appointmentManager cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e appointmentManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @see #saveAppointments(ReadOnlyListManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e appointmentManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5,
      "kaitlynng": 40
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/appointment/JsonAdaptedAppointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "class JsonAdaptedAppointment {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final String patientNric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final Integer duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final AppointmentStatus status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonAdaptedAppointment(@JsonProperty(\"patientNRIC\") String patientNric,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                                  @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                                  @JsonProperty(\"duration\") Integer duration,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                                  @JsonProperty(\"status\") AppointmentStatus status,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                                  @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                                  @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.patientNric \u003d patientNric;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Converts a given {@code Appointment} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonAdaptedAppointment(Appointment source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.patientNric \u003d source.getPatient().getNric().getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.dateTime \u003d source.getDateTime().getStorageFormat();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.duration \u003d source.getDuration().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.status \u003d source.getStatus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Appointment toModelType(PatientManager patientManager)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws IllegalValueException, ElementNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final List\u003cTag\u003e patientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            patientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (patientNric \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!Nric.isValidNric(patientNric)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final Nric modelNric \u003d new Nric(patientNric);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!patientManager.hasPatient(modelNric)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new ElementNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        final Patient modelPatient \u003d patientManager.getPatient(modelNric);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime modelDateTime \u003d DateTime.fromString(dateTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    Duration.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!Duration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Duration modelDuration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    AppointmentStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        AppointmentStatus modelStatus \u003d status;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(patientTags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new Appointment(modelPatient, modelDateTime, modelDuration, modelDescription, modelTags, modelStatus);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 16,
      "theyellowfellow": 1,
      "-": 41,
      "kaitlynng": 83
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/appointment/JsonAppointmentManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A class to access AppointmentManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class JsonAppointmentManagerStorage implements AppointmentManagerStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAppointmentManagerStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonAppointmentManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getAppointmentManagerStorageFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e readAppointments(PatientManager patientManager)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return readAppointments(patientManager, filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Similar to {@link #readAppointments(PatientManager)}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cReadOnlyListManager\u003cAppointment\u003e\u003e readAppointments(PatientManager patientManager, Path filePath)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Optional\u003cJsonSerializableAppointmentManager\u003e jsonAppointmentManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                filePath, JsonSerializableAppointmentManager.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (jsonAppointmentManager.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return Optional.of(jsonAppointmentManager.get().toModelType(patientManager));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e listManager) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        saveAppointments(listManager, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Similar to {@link #saveAppointments(ReadOnlyListManager)}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e listManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(listManager);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAppointmentManager(listManager), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9,
      "kaitlynng": 77
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/appointment/JsonSerializableAppointmentManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * An Immutable AppointmentManager that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "@JsonRootName(value \u003d \"appointmentmanager\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class JsonSerializableAppointmentManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointments list contains duplicate appointment(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Constructs a {@code JsonSerializableAppointmentManager} with the given appointments."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonSerializableAppointmentManager(@JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointments.addAll(appointments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Converts a given {@code ReadOnlyListManager} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAppointmentManager}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonSerializableAppointmentManager(ReadOnlyListManager\u003cAppointment\u003e source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointments.addAll(source.getReadOnlyList().stream().map(JsonAdaptedAppointment::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Converts this appointment manager into the model\u0027s {@code AppointmentManager} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public AppointmentManager toModelType(PatientManager patientManager) throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        AppointmentManager appointmentManager \u003d new AppointmentManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (JsonAdaptedAppointment jsonAdaptedPatient : appointments) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Appointment appointment \u003d jsonAdaptedPatient.toModelType(patientManager);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (appointmentManager.hasAppointment(appointment)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            appointmentManager.addAppointment(appointment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return appointmentManager;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "kaitlynng": 57
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/patient/JsonAdaptedPatient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                              @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                              @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                              @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                              @JsonProperty(\"remark\") String remark) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        nric \u003d source.getNric().getValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        name \u003d source.getName().getFullName();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        phone \u003d source.getPhone().getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        gender \u003d source.getGender().getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        remark \u003d source.getRemark().getValue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final List\u003cTag\u003e patientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            patientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(patientTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new Patient(modelNric, modelName, modelPhone, modelGender, modelTags, modelRemark);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 22,
      "theyellowfellow": 2,
      "thutahw": 8,
      "-": 64,
      "kaitlynng": 26
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/patient/JsonPatientManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A class to access PatientManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class JsonPatientManagerStorage implements PatientManagerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientManagerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonPatientManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path getPatientManagerStorageFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatients() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return readPatients(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Similar to {@link #readPatients()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatients(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Optional\u003cJsonSerializablePatientManager\u003e jsonPatientManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                filePath, JsonSerializablePatientManager.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (jsonPatientManager.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return Optional.of(jsonPatientManager.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void savePatients(ReadOnlyListManager\u003cPatient\u003e listManager) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        savePatients(listManager, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Similar to {@link #savePatients(ReadOnlyListManager)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void savePatients(ReadOnlyListManager\u003cPatient\u003e listManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(listManager);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePatientManager(listManager), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 8,
      "kaitlynng": 75
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/patient/JsonSerializablePatientManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * An Immutable PatientManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "@JsonRootName(value \u003d \"patientmanager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class JsonSerializablePatientManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Constructs a {@code JsonSerializablePatientManager} with the given patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonSerializablePatientManager(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Converts a given {@code ReadOnlyListManager} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePatientManager}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public JsonSerializablePatientManager(ReadOnlyListManager\u003cPatient\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patients.addAll(source.getReadOnlyList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Converts this patient manager into the model\u0027s {@code PatientManager} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (patientManager.hasPatient(patient)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            patientManager.addPatient(patient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patientManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5,
      "kaitlynng": 55
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/patient/PatientManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public interface PatientManagerStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Path getPatientManagerStorageFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns PatientManager data as a {@link ReadOnlyListManager}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatients() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @see #readPatients()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatients(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Saves the given {@link ReadOnlyListManager} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param patientManager cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void savePatients(ReadOnlyListManager\u003cPatient\u003e patientManager) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @see #savePatients(ReadOnlyListManager)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void savePatients(ReadOnlyListManager\u003cPatient\u003e patientManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 4,
      "kaitlynng": 38
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/userprefs/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/team/baymax/storage/userprefs/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 4,
      "-": 30,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "-": 75
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w12-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/InfoPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A ui for the dashboard in the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class InfoPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"InfoPage.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public InfoPage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 16
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private SideTabPane sideTabPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane tabPanePlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPatientStorageFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        sideTabPane \u003d new SideTabPane(logic.getFilteredPatientList(), logic.getFilteredAppointmentList(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                logic.getAppointmentCalendar());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        tabPanePlaceholder.getChildren().add(sideTabPane.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            // tab switch"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            sideTabPane.switchTab(commandResult.getTabId());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 20,
      "-": 176,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/SideTabPane.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.appointment.AppointmentInfoPage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.calendar.CalendarPage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.calendar.SchedulePage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.dashboard.Dashboard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.patient.PatientInfoPage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class SideTabPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"SideTabPane.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private TabPane sideTabPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Tab dashboardTab;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Tab calendarTab;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Tab scheduleTab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Tab patientInfoTab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Tab appointmentInfoTab;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Tab infoTab;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane dashboardTabContentPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane patientTabContentPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane appointmentTabContentPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane calendarTabContentPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane infoTabContentPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane scheduleTabContentPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private ObservableList\u003cPatient\u003e patients;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private ObservableList\u003cAppointment\u003e appointments;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private AppointmentCalendar calendar;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@SideTabPane}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public SideTabPane(ObservableList\u003cPatient\u003e patients, ObservableList\u003cAppointment\u003e appointments,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                       AppointmentCalendar calendar) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.patients \u003d patients;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.appointments \u003d appointments;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.calendar \u003d calendar;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        PatientInfoPage patientInfoPage \u003d new PatientInfoPage(patients);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        patientTabContentPlaceholder.getChildren().add(patientInfoPage.getRoot());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AppointmentInfoPage appointmentInfoPage \u003d new AppointmentInfoPage(appointments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentTabContentPlaceholder.getChildren().add(appointmentInfoPage.getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CalendarPage calendarPage \u003d new CalendarPage(calendar);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarTabContentPlaceholder.getChildren().add(calendarPage.getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        SchedulePage schedulePage \u003d new SchedulePage(calendar, appointments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scheduleTabContentPlaceholder.getChildren().add(schedulePage.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Dashboard dashboard \u003d new Dashboard(appointments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        dashboardTabContentPlaceholder.getChildren().add(dashboard.getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        InfoPage infoPage \u003d new InfoPage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        infoTabContentPlaceholder.getChildren().add(infoPage.getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        sideTabPane.addEventFilter("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            MouseEvent.ANY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                public void handle(final MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    // prevent any children from acting on the mouse event"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    mouseEvent.consume();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Switches between the tabs in the left-side tab bar."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param tabId tab identifier corresponding to the tab"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void switchTab(TabId tabId) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d sideTabPane.getSelectionModel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        switch (tabId) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case DASHBOARD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            selectionModel.select(dashboardTab);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case CALENDAR:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            selectionModel.select(calendarTab);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case SCHEDULE:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            selectionModel.select(scheduleTab);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case PATIENT:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            selectionModel.select(patientInfoTab);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case APPOINTMENT:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            selectionModel.select(appointmentInfoTab);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        case INFO:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            selectionModel.select(infoTab);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 119,
      "kaitlynng": 13
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/LightTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "-": 83
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/appointment/AppointmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * An UI component that displays information of an {@code Appointment}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AppointmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"appointment/AppointmentListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Appointment appointment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final int displayedIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label patientName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label phoneNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label statusTag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a {@code AppointmentCard} with the given {@code Appointment} and index to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentCard(Appointment appointment, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        patientName.setText(appointment.getPatient().getName().getFullName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        phoneNumber.setText(appointment.getPatient().getPhone().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        dateTime.setText(appointment.getDateTime().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        description.setText(appointment.getDescription().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        statusTag.setText(appointment.getStatus().text());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        statusTag.setStyle(statusTagStyles(appointment.getStatus()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointment.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private String statusTagStyles(AppointmentStatus status) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return String.format(\"-fx-background-color: %s;\", status.getColorCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (!(other instanceof AppointmentCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AppointmentCard card \u003d (AppointmentCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u0026\u0026 appointment.equals(card.appointment);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 94
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/appointment/AppointmentInfoPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A ui for the appointment information page."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AppointmentInfoPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"appointment/AppointmentInfoPage.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane appointmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private AppointmentListPanel appointmentListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private ObservableList\u003cAppointment\u003e appointmentList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates an {@code AppointmentInfoPage} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentInfoPage(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.appointmentList \u003d appointmentList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentListPanel \u003d new AppointmentListPanel(appointmentList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentListPanel getAppointmentListPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return appointmentListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 41
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/appointment/AppointmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Panel containing the list of appointments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String EMPTY_LIST_PLACEHOLDER_TEXT \u003d \"No appointments here.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"appointment/AppointmentListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    protected ListView\u003cAppointment\u003e appointmentListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    protected final ObservableList\u003cAppointment\u003e appointments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.appointments \u003d appointments;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    protected void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentListView.setPlaceholder(new Label(EMPTY_LIST_PLACEHOLDER_TEXT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentListView.setItems(appointments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Appointment} using a {@code AppointmentCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        protected void updateItem(Appointment appointment, boolean empty) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            super.updateItem(appointment, empty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            if (empty || appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 64
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/calendar/CalendarPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.TilePane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.DateTimeUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "// Make CalendarPage a property change listener"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A ui for the calendar in the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class CalendarPage extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"calendar/CalendarPage.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private TilePane calendarGridView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label yearLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label monthLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label dayLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final AppointmentCalendar appointmentCalendar;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a {@Code CalendarPage} with the given {@code appointmentCalendar}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CalendarPage(AppointmentCalendar appointmentCalendar) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.appointmentCalendar \u003d appointmentCalendar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointmentCalendar.addPropertyChangeListener(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarGridView.setMaxWidth(550);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        yearLabel.textProperty().bind(appointmentCalendar.getYearProperty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        monthLabel.textProperty().bind(appointmentCalendar.getMonthProperty());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        renderCalendar();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private void renderCalendar() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        calendarGridView.getChildren().setAll();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        int day \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        int numOfDaysInMonth \u003d DateTimeUtil.getNumOfDays(appointmentCalendar.getMonth(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                appointmentCalendar.getYear());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        CalendarViewCell cell;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        while (day \u003c\u003d numOfDaysInMonth) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (day \u003d\u003d appointmentCalendar.getDay().getValue()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                cell \u003d new CalendarViewCell(new Day(day), true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                cell \u003d new CalendarViewCell(new Day(day), false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            calendarGridView.getChildren().add(cell);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            day++;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    static class CalendarViewCell extends Button {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        private static String style \u003d \"-fx-background-color: #ffffff; \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"-fx-font-family: \u0027Adobe Gothic Std\u0027;\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"-fx-text-fill: #0e0e0e;\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"-fx-border-style: hidden hidden solid hidden;\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"-fx-border-width: 5;\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    + \"-fx-border-color: %s; \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"-fx-padding: 5;\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"-fx-border-insets: 5;\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    + \"-fx-background-insets: 5;\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private final String color;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public CalendarViewCell(Day day, boolean isCurrent) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (isCurrent) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                this.color \u003d \"#97a2ff\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                this.color \u003d \"#a5a5a5\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            setText(day.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            setStyle(String.format(style, this.color));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            setMinHeight(75.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            setMinWidth(75.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            setMouseTransparent(true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        renderCalendar();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 86,
      "kaitlynng": 29
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/calendar/SchedulePage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A ui for the appointment information page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class SchedulePage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"calendar/SchedulePage.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private StackPane schedulePanelPlaceholder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Label dateLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private SchedulePanel schedulePanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates an {@code SchedulePage} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public SchedulePage(AppointmentCalendar appointmentCalendar,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        ObservableList\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        schedulePanel \u003d new SchedulePanel(appointmentCalendar, appointments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        schedulePanelPlaceholder.getChildren().add(schedulePanel.getRoot());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        dateLabel.textProperty().bind(appointmentCalendar.getDateProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public SchedulePanel getSchedulePanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return schedulePanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 27,
      "kaitlynng": 14
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/calendar/SchedulePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static team.baymax.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.shape.Line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.AppointmentMatchesDatePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Panel containing the list of appointments along a timeline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class SchedulePanel extends UiPart\u003cRegion\u003e implements PropertyChangeListener {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"calendar/SchedulePanel.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String HALF_HOUR_LINE_STYLE_CLASS \u003d \"half-hour-line\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String FULL_HOUR_LINE_STYLE_CLASS \u003d \"full-hour-line\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String TIME_LABEL_STYLE_CLASS \u003d \"time-label\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String[] SCHEDULE_VIEW_CELL_COLORS \u003d {\"#ffb7b2\", \"#ffdac1\", \"#e2f0cb\", \"#b5ead7\", \"#c7ceea\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String[] SCHEDULE_VIEW_CELL_BORDER_COLOR \u003d {\"#FF3A2C\", \"#FF7F29\", \"#7FAD32\", \"#33B385\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \"#5268BE\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final List\u003cPatient\u003e patientColorMapping \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final double leftCellAnchor \u003d 80;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final double rightCellPadding \u003d 50;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final double cellSpacing \u003d 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ScrollPane scheduleTimelineScroll;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private StackPane scheduleTimelineView;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final List\u003cLine\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final List\u003cLabel\u003e timeLabels \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final List\u003cScheduleViewCell\u003e viewCells \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private AppointmentCalendar appointmentCalendar;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ObservableList\u003cAppointment\u003e appointments;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Date currentDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SchedulePanel.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public SchedulePanel(AppointmentCalendar appointmentCalendar,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                         ObservableList\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointmentCalendar \u003d appointmentCalendar;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.appointments \u003d appointments;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointments.addListener((ListChangeListener\u003c? super Appointment\u003e) (it -\u003e renderSchedule()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointmentCalendar.addPropertyChangeListener(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected void initialize() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scheduleTimelineView.setPrefWidth(1000);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scheduleTimelineView.setPrefHeight(2000);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        renderSchedule();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void renderSchedule() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scheduleTimelineScroll.setVvalue(0.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scheduleTimelineView.getChildren().setAll();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        lines.clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        timeLabels.clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        viewCells.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        currentDate \u003d new Date(appointmentCalendar.getDay(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                appointmentCalendar.getMonth(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                appointmentCalendar.getYear());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        renderTimelineBackground();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        renderAppointmentEntries();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        double ymin \u003d -1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (ScheduleViewCell cell : viewCells) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double y1 \u003d getTimeLocation(cell.getStartTime());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (ymin \u003d\u003d -1 || y1 \u003c ymin) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ymin \u003d y1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (ymin !\u003d -1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            scheduleTimelineScroll.setVvalue((ymin + 250) / scheduleTimelineView.getPrefHeight());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void renderTimelineBackground() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (int i \u003d 1; i \u003c 24; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            createLine(HALF_HOUR_LINE_STYLE_CLASS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            createLine(FULL_HOUR_LINE_STYLE_CLASS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        createLine(HALF_HOUR_LINE_STYLE_CLASS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        int lineCount \u003d lines.size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (int i \u003d 0; i \u003c lineCount; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Line line \u003d lines.get(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            int hour \u003d (i + 1) / 2;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            String hourString \u003d hour \u003c 10 ? \"0\" + hour : String.valueOf(hour);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            int minute \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            boolean halfHourLine \u003d (i % 2 \u003d\u003d 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (halfHourLine) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                minute \u003d 30;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            String minuteString \u003d minute \u003c 10 ? \"0\" + minute : String.valueOf(minute);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Time time \u003d Time.fromString(hourString + \":\" + minuteString);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double yy \u003d scheduleTimelineView.snapPositionY(getTimeLocation(time));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            line.setStartX(scheduleTimelineView.snapPositionX(leftCellAnchor));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            line.setStartY(yy);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            line.setEndX(scheduleTimelineView.snapPositionX(scheduleTimelineView.getPrefWidth())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    - rightCellPadding);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            line.setEndY(yy);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (!halfHourLine) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                Label label \u003d new Label(hourString + \":\" + minuteString);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                label.getStyleClass().add(TIME_LABEL_STYLE_CLASS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                scheduleTimelineView.setAlignment(label, Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                label.setTranslateY(yy - 10);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                label.setTranslateX(10);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                timeLabels.add(label);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                scheduleTimelineView.getChildren().add(label);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void renderAppointmentEntries() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        appointments.stream()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .filter(new AppointmentMatchesDatePredicate(currentDate))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .map(appointment -\u003e createScheduleViewCell(appointment))"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .forEach(cell -\u003e viewCells.add(cell));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        resolveOverlap();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void resolveOverlap() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Collections.sort(viewCells, (c1, c2) -\u003e {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double c1y1 \u003d getTimeLocation(c1.getStartTime());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double c2y1 \u003d getTimeLocation(c2.getStartTime());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double c2y2 \u003d getTimeLocation(c2.getEndTime());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (c1y1 \u003c c2y1) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else if (c1y1 \u003e c2y2) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return +1;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        List\u003cScheduleViewCluster\u003e clusters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ScheduleViewCluster cluster \u003d null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (ScheduleViewCell cell : viewCells) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (cluster \u003d\u003d null || !cluster.intersects(cell)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                cluster \u003d new ScheduleViewCluster();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                clusters.add(cluster);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            cluster.add(cell);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (ScheduleViewCluster c : clusters) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            c.resolve();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void createLine(String styleClass) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Line line \u003d new Line();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        line.setManaged(false);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        line.setMouseTransparent(true);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (styleClass !\u003d null) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            line.getStyleClass().add(styleClass);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        lines.add(line);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scheduleTimelineView.getChildren().add(line);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ScheduleViewCell createScheduleViewCell(Appointment appointment) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String cellText \u003d appointment.getPatient().getName() + \" / \" + appointment.getDescription();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String cellColor \u003d getViewCellColor(appointment);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String cellBorderColor \u003d getViewCellBorderColor(appointment);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ScheduleViewCell cell \u003d new ScheduleViewCell("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                appointment.getTime(), appointment.getEndDateTime().getTime(),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                cellText, cellColor, cellBorderColor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        double yy \u003d getTimeLocation(appointment.getTime());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        double height \u003d getTimeLocation(appointment.getEndDateTime().getTime()) - yy;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        cell.setPrefHeight(height);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        cell.setPrefWidth(scheduleTimelineView.getPrefWidth() - rightCellPadding);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        cell.setTranslateX(leftCellAnchor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        cell.setTranslateY(yy);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scheduleTimelineView.getChildren().add(cell);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scheduleTimelineView.setAlignment(cell, Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return cell;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private double getTimeLocation(Time time) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        double viewHeight \u003d scheduleTimelineView.getPrefHeight();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        long startNano \u003d LocalTime.MIN.toNanoOfDay();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        long endNano \u003d LocalTime.MAX.toNanoOfDay();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        double npp \u003d (endNano - startNano) / viewHeight;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return ((int) ((time.getTime().toNanoOfDay() - startNano) / npp)) + 0.5;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String getViewCellColor(Appointment appointment) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patient \u003d appointment.getPatient();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!patientColorMapping.contains(patient)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            patientColorMapping.add(patient);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return SCHEDULE_VIEW_CELL_COLORS["
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                patientColorMapping.indexOf(patient) % SCHEDULE_VIEW_CELL_COLORS.length];"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String getViewCellBorderColor(Appointment appointment) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patient \u003d appointment.getPatient();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!patientColorMapping.contains(patient)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            patientColorMapping.add(patient);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return SCHEDULE_VIEW_CELL_BORDER_COLOR["
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                patientColorMapping.indexOf(patient) % SCHEDULE_VIEW_CELL_BORDER_COLOR.length];"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void propertyChange(PropertyChangeEvent e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        renderSchedule();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private class ScheduleViewCell extends Button {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private static final String SCHEDULE_VIEW_CELL_STYLE_CLASS \u003d \"schedule-view-cell\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private Time startTime;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private Time endTime;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public ScheduleViewCell(Time startTime, Time endTime, String text,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                                String color, String borderColor) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            setText(startTime.toString() + \" - \" + text);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            getStyleClass().add(SCHEDULE_VIEW_CELL_STYLE_CLASS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            setStyle(\"-fx-background-color: \" + color + \";\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    + \"-fx-border-color: \" + borderColor + \";\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            setMouseTransparent(true);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public Time getStartTime() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return startTime;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public Time getEndTime() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return endTime;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private class ScheduleViewColumn {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private List\u003cScheduleViewCell\u003e viewCells;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public void add(ScheduleViewCell cell) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            requireAllNonNull(cell);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (this.viewCells \u003d\u003d null) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                this.viewCells \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            this.viewCells.add(cell);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public boolean hasRoomFor(ScheduleViewCell cell) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (this.viewCells \u003d\u003d null) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double y1 \u003d getTimeLocation(cell.getStartTime());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double y2 \u003d getTimeLocation(cell.getEndTime());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            for (ScheduleViewCell otherCell : this.viewCells) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                double othery1 \u003d getTimeLocation(otherCell.getStartTime());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                double othery2 \u003d getTimeLocation(otherCell.getEndTime());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                if (y1 \u003c othery2 \u0026\u0026 y2 \u003e othery1) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    // two cells intersect"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public List\u003cScheduleViewCell\u003e getViewCells() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return this.viewCells;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private class ScheduleViewCluster {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private List\u003cScheduleViewCell\u003e viewCells;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private List\u003cScheduleViewColumn\u003e columns;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private boolean areBoundsSet \u003d false;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private double ytop;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private double ybot;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public int getColumnsCount() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (columns \u003d\u003d null || columns.isEmpty()) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return columns.size();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public void add(ScheduleViewCell cell) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (this.viewCells \u003d\u003d null) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                this.viewCells \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            this.viewCells.add(cell);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double y1 \u003d getTimeLocation(cell.getStartTime());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double y2 \u003d getTimeLocation(cell.getEndTime());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (!areBoundsSet) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ytop \u003d y1;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ybot \u003d y2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                areBoundsSet \u003d true;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ytop \u003d Math.min(ytop, y1);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ybot \u003d Math.max(ybot, y2);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public boolean intersects(ScheduleViewCell cell) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (!areBoundsSet) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                //initialise"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double y1 \u003d getTimeLocation(cell.getStartTime());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double y2 \u003d getTimeLocation(cell.getEndTime());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return (y1 \u003c ybot) \u0026\u0026 (y2 \u003e ytop);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public void resolve() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (this.viewCells \u003d\u003d null || this.viewCells.isEmpty()) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            columns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            columns.add(new ScheduleViewColumn());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            for (ScheduleViewCell cell : this.viewCells) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                boolean added \u003d false;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                for (ScheduleViewColumn column : columns) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    if (column.hasRoomFor(cell)) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        column.add(cell);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        added \u003d true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                if (!added) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    ScheduleViewColumn column \u003d new ScheduleViewColumn();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    column.add(cell);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    columns.add(column);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double fullWidth \u003d scheduleTimelineView.getPrefWidth() - leftCellAnchor - rightCellPadding;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            double cellWidth \u003d fullWidth / getColumnsCount();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            for (int col \u003d 0; col \u003c getColumnsCount(); col++) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                double shiftRight \u003d cellWidth * col;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ScheduleViewColumn column \u003d columns.get(col);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                for (ScheduleViewCell cell : column.getViewCells()) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    cell.setPrefWidth(cellWidth - cellSpacing);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    cell.setTranslateX(cell.getTranslateX() + shiftRight);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 7,
      "kaitlynng": 420
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/dashboard/Dashboard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.dashboard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.appointment.AppointmentListPanel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A ui for the dashboard in the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class Dashboard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"dashboard/Dashboard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane timePanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private StackPane appointmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label yearLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label monthLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label dayLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private AppointmentListPanel appointmentListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private DigitalClock clock;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a dashboard with the given {@code ObservableList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * @param appointmentsToday"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Dashboard(ObservableList\u003cAppointment\u003e appointmentsToday) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        clock \u003d new DigitalClock();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        timePanel.getChildren().add(clock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        dayLabel.setText(Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + \"/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        monthLabel.setText(Calendar.getInstance().get(Calendar.MONTH) + 1 + \"/\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        yearLabel.setText(Calendar.getInstance().get(Calendar.YEAR) + \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentListPanel \u003d new AppointmentListPanel(appointmentsToday);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 53
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/dashboard/DigitalClock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.dashboard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DigitalClock extends Label {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private EventHandler\u003cActionEvent\u003e eventHandler \u003d new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public void handle(ActionEvent actionEvent) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            String hourString \u003d StringUtil.pad(2, \u0027 \u0027, calendar.get(Calendar.HOUR) \u003d\u003d 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    ? \"12\" : calendar.get(Calendar.HOUR) + \"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            String minuteString \u003d StringUtil.pad(2, \u00270\u0027, calendar.get(Calendar.MINUTE) + \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            String secondString \u003d StringUtil.pad(2, \u00270\u0027, calendar.get(Calendar.SECOND) + \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            String postfix \u003d calendar.get(Calendar.AM_PM) \u003d\u003d Calendar.AM ? \"AM\" : \"PM\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            setText(hourString + \":\" + minuteString + \":\" + secondString + \" \" + postfix);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Constructs a digital clock."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public DigitalClock() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        bindToTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        setStyle(\"-fx-font-size: 30; -fx-font-family: \u0027Apple Braille\u0027\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Starts the clocks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private void bindToTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.seconds(0), eventHandler),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new KeyFrame(Duration.seconds(1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 47
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/patient/PatientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"patient/PatientListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates a {@code PatientCard} with the given {@code Patient} and index to display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        renderCard(displayedIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private void renderCard(int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        name.setText(patient.getName().getFullName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        phone.setText(patient.getPhone().getValue());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        gender.setText(patient.getGender().getValue());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        remark.setText(patient.getRemark().getValue());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        nric.setText(patient.getNric().getValue());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        patient.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 18,
      "theyellowfellow": 4,
      "thutahw": 1,
      "-": 57,
      "kaitlynng": 6
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/patient/PatientInfoPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A ui for the patient information page."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class PatientInfoPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"patient/PatientInfoPage.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Creates a {@code PatientInfoPage} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public PatientInfoPage(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(patientList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientListPanel getPatientListPanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return patientListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 32,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/main/java/team/baymax/ui/patient/PatientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String EMPTY_LIST_PLACEHOLDER_TEXT \u003d \"No patients here.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String FXML \u003d \"patient/PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ListView\u003cPatient\u003e patientListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**s"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates a {@code PatientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        patientListView.setPlaceholder(new Label(EMPTY_LIST_PLACEHOLDER_TEXT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientListView.setItems(patientList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    class PatientListViewCell extends ListCell\u003cPatient\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        protected void updateItem(Patient patient, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            super.updateItem(patient, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            if (empty || patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 10,
      "thutahw": 3,
      "-": 30,
      "kaitlynng": 12
    }
  },
  {
    "path": "src/main/resources/view/AppointmentInfoPage.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#statusTag {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #4d66bc;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-style: hidden hidden solid hidden;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 2 6 2 6;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-insets: 1 3 1 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-insets: 1 3 1 3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 11
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/InfoPage.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#commandScrollView {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #eeeeee;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-max-height: 400;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".heading {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 18;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".command-label {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-insets: 2 5 2 5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-insets: 2 5 2 5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #dddbdb;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: #bebcbc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".gridbox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-min-width: 300;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 24
    }
  },
  {
    "path": "src/main/resources/view/InfoPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cStackPane fx:id\u003d\"infoPage\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cURL value\u003d\"@InfoPage.css\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cVBox fx:id\u003d\"infoList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"Command List\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"The following is a list of commands currently supported in Baymax:\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"commandScrollView\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cVBox styleClass\u003d\"gridbox\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"heading\" text\u003d\"Navigation\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"dashboard\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"calendar\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"schedule\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"patient\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"appt\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cVBox styleClass\u003d\"gridbox\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"heading\" text\u003d\"Patient Management\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"addpatient\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"listpatients\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"deletepatient\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"editpatient\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"findpatient\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"remark\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cVBox styleClass\u003d\"gridbox\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"heading\" text\u003d\"Utilities\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"help\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"exit\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cVBox styleClass\u003d\"gridbox\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"heading\" text\u003d\"Appointment Management\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"addappt\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"listapptof\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"listappts\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"editappt\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"cancel\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"done\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"missed\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"findappt\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cVBox styleClass\u003d\"gridbox\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"heading\" text\u003d\"Calendar\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"year\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"month\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel styleClass\u003d\"command-label\" text\u003d\"day\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"Note: Some commands are removed from this list as they can cause you to lose data.\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"Please refer to the User Guide for more details on how to use them properly.\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 71
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#efefef, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".label-dark {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #111111;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #222222;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-base: #1a1a1a;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-control-inner-background: #eeeded;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #eeeeee;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#f3f1f1, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#f1f1f1, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#eeeeee, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #ececec;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #d4d4d4;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #eef0f1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #0e0e0e;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     -fx-background-color: derive(#f1f1f1, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     -fx-background-color: derive(#cbcbcb, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     -fx-border-color: derive(#bfbfbf, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#dbdbdb, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #1f1f1f;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #ececec !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#cacaca, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#eeeeee, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: derive(#eeeded, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#ecebeb, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#ececec, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #c6c6c6;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #eae9e9;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #2f2e2e;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#e2e1e1, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-fill: #323232;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #2d2c2c;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#eeeeee, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: derive(#d2d2d2, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: #383838 #383838 #262626 #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "#filterField, #patientListPanel, #patientWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-effect: innershadow(gaussian, #3c3c3c, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: transparent, #1a1a1a, rgba(0, 0, 0, 0), #fafafa;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-color: #6cb6cf;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-style: hidden solid solid solid;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 354,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "         title\u003d\"Baymax\" minWidth\u003d\"860\" minHeight\u003d\"730\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cURL value\u003d\"@AppointmentInfoPage.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cURL value\u003d\"@calendar/CalendarPage.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cURL value\u003d\"@dashboard/Dashboard.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cURL value\u003d\"@calendar/SchedulePanel.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cURL value\u003d\"@TabPane.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cMenuBar VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"menuBar\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\" \u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" style\u003d\"-fx-text-fill: black;\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\" \u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" style\u003d\"-fx-text-fill: black;\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"tabPanePlaceholder\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9,
      "-": 48,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/main/resources/view/SideTabPane.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cTabPane fx:id\u003d\"sideTabPane\" minWidth\u003d\"450\" minHeight\u003d\"600\" side\u003d\"LEFT\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cTab fx:id\u003d\"dashboardTab\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cImageView\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cImage url\u003d\"@/images/IconHome.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cStackPane fx:id\u003d\"dashboardTabContentPlaceholder\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cTab fx:id\u003d\"calendarTab\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cImage url\u003d\"@/images/IconCalendar.png\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cStackPane fx:id\u003d\"calendarTabContentPlaceholder\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cTab fx:id\u003d\"scheduleTab\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cImageView\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cImage url\u003d\"@/images/IconDayView.png\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cStackPane fx:id\u003d\"scheduleTabContentPlaceholder\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cTab fx:id\u003d\"patientInfoTab\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cImageView\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cImage url\u003d\"@/images/IconPatientInfo.png\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cStackPane fx:id\u003d\"patientTabContentPlaceholder\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cTab fx:id\u003d\"appointmentInfoTab\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cImageView\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cImage url\u003d\"@/images/IconAppointment.png\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cStackPane fx:id\u003d\"appointmentTabContentPlaceholder\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cTab fx:id\u003d\"infoTab\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cImage url\u003d\"@/images/IconInfo.png\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cStackPane fx:id\u003d\"infoTabContentPlaceholder\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 71
    }
  },
  {
    "path": "src/main/resources/view/TabPane.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-pref-width: 50;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-pref-height: 50;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: -9 9 -9 9;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5
    }
  },
  {
    "path": "src/main/resources/view/appointment/AppointmentInfoPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cStackPane fx:id\u003d\"appointmentInfoPage\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cVBox fx:id\u003d\"appointmentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"100\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"Appointment Information\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 15,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/main/resources/view/appointment/AppointmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cLabel fx:id\u003d\"patientName\" text\u003d\"\\$patientName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cImageView\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cImage url\u003d\"@/images/IconPhone.png\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cLabel fx:id\u003d\"phoneNumber\" text\u003d\"\\$phoneNumber\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cLabel fx:id\u003d\"statusTag\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 42
    }
  },
  {
    "path": "src/main/resources/view/appointment/AppointmentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/calendar/CalendarPage.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".calendar-container {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".year-label {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 24;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".month-label {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 12
    }
  },
  {
    "path": "src/main/resources/view/calendar/CalendarPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.TilePane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendarPage\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cVBox minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"Calendar\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cVBox fx:id\u003d\"calendarContainer\" styleClass\u003d\"calendar-container\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cLabel fx:id\u003d\"yearLabel\" styleClass\u003d\"year-label\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cLabel fx:id\u003d\"monthLabel\" styleClass\u003d\"month-label\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cTilePane fx:id\u003d\"calendarGridView\" styleClass\u003d\"grid-view\"\u003e\u003c/TilePane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 22
    }
  },
  {
    "path": "src/main/resources/view/calendar/ScheduleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cVBox styleClass\u003d\"datetime-label\" minWidth\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"20\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cLabel fx:id\u003d\"patientName\" text\u003d\"\\$patientName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 27
    }
  },
  {
    "path": "src/main/resources/view/calendar/SchedulePage.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ".date-label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/main/resources/view/calendar/SchedulePage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cStackPane fx:id\u003d\"schedulePage\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003cVBox fx:id\u003d\"schedule\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"Schedule\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cLabel fx:id\u003d\"dateLabel\" styleClass\u003d\"date-label\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"schedulePanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 14,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/main/resources/view/calendar/SchedulePanel.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ".schedule-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ".schedule-view \u003e .half-hour-line {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-stroke: derive(lightgray, +40%);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ".schedule-view \u003e .full-hour-line {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-stroke: lightgray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ".schedule-view \u003e .time-label {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ".schedule-view \u003e .schedule-view-cell {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-text-fill: #0e0e0e;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-padding: 8, 0, 0, 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-border-style: hidden hidden hidden solid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-border-width: 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 24
    }
  },
  {
    "path": "src/main/resources/view/calendar/SchedulePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scheduleTimelineScroll\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            \u003cStackPane styleClass\u003d\"schedule-view\" fx:id\u003d\"scheduleTimelineView\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 13
    }
  },
  {
    "path": "src/main/resources/view/dashboard/Dashboard.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".dashboard-container {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".clock-container {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ".date-panel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 11
    }
  },
  {
    "path": "src/main/resources/view/dashboard/Dashboard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cStackPane fx:id\u003d\"dashboard\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"Dashboard\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cHBox styleClass\u003d\"dashboard-container\" minWidth\u003d\"700\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cInsets top\u003d\"20\" right\u003d\"0\" bottom\u003d\"100\" left\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cVBox fx:id\u003d\"leftPanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"430\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cLabel text\u003d\"Appointments Today\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\"\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cVBox fx:id\u003d\"rightPanel\" minWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cVBox styleClass\u003d\"clock-container\" minWidth\u003d\"150\" minHeight\u003d\"80\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"timePanel\" styleClass\u003d\"time-panel\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003cHBox styleClass\u003d\"date-panel\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel fx:id\u003d\"dayLabel\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel fx:id\u003d\"monthLabel\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        \u003cLabel fx:id\u003d\"yearLabel\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003cVBox fx:id\u003d\"stats\" styleClass\u003d\"stats-container\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 42
    }
  },
  {
    "path": "src/main/resources/view/patient/PatientInfoPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003cStackPane fx:id\u003d\"patientInfoPage\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003cVBox fx:id\u003d\"patientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"100\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        \u003cLabel text\u003d\"Patient Information\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 14,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/main/resources/view/patient/PatientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxm\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "porkeypine": 1,
      "thutahw": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/patient/PatientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 1,
      "-": 6,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/data/JsonPatientManagerStorageTest/invalidAndValidPatient.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"T0123456F\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"name\": \"Valid Patient\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\": \"M\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"Likes to code\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"S7894512E\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"name\": \"Patient With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\": \"M\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"Likes to code\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "-": 6,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/test/data/JsonPatientManagerStorageTest/invalidPatientStorage.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"name\": \"Patient with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\": \"M\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"Likes to code\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 4,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableBaymaxTest/duplicatePatients.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"S7485962E\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\": \"F\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"tagged\": [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"Likes to code\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"S7485962E\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\": \"F\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"Likes to code\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 5,
      "-": 8,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableBaymaxTest/invalidPatient.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  \"patients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"T7333222F\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\": \"invalidGender1@#\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"Likes to code\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 5,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableBaymaxTest/typicalPatients.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  \"_comment\": \"Baymax save file which contains the same Patient values as in TypicalPatients#getTypicalPatientManager()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "  \"patients\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"T1234567A\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\" : \"F\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"tagged\" : [ \"tag1\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"remark Alice\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"S1234567B\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"tagged\" : [ \"tag2\", \"tag3\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"remark Benson\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"S8546464H\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\" : \"F\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"remark Carl\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"S7539514E\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"tagged\" : [ \"tag1\" ],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"remark Daniel\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"T0012564N\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\" : \"F\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"remark Elle\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\":  \"S7744115E\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\" : \"F\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"remark Fiona\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \"nric\": \"S0002546G\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    \"remark\": \"remark George\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 21,
      "thutahw": 1,
      "-": 23,
      "kaitlynng": 8
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  \"appointmentBookFilePath\" : \"appointmentbook.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thutahw": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "  \"appointmentBookFilePath\" : \"appointmentbook.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thutahw": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/team/baymax/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 51,
      "kaitlynng": 7
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 8,
      "-": 30
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CollectionUtil.requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CollectionUtil.requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "-": 102
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 8,
      "-": 110
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 21
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/team/baymax/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \"typical sentence\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 8,
      "-": 136,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.PatientCommandTestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.storage.appointment.JsonAppointmentManagerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.JsonPatientManagerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        JsonPatientManagerStorage patientManagerStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new JsonPatientManagerStorage(temporaryFolder.resolve(\"patients.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAppointmentManagerStorage appointmentManagerStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonAppointmentManagerStorage(temporaryFolder.resolve(\"appointments.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        StorageManager storage \u003d new StorageManager(patientManagerStorage, appointmentManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseException(invalidCommand, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String deleteCommand \u003d \"deletepatient 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandException(deleteCommand, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String listCommand \u003d ListPatientCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(listCommand, ListPatientCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // Setup LogicManager with JsonPatientManagerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonPatientManagerStorage patientManagerStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonPatientManagerIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        .resolve(\"ioExceptionPatientManager.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAppointmentManagerStorage appointmentManagerStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonAppointmentManagerIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        .resolve(\"ioExceptionAppointmentManager.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        StorageManager storage \u003d new StorageManager(patientManagerStorage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                appointmentManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String addCommand \u003d AddPatientCommand.COMMAND_WORD + PatientCommandTestUtil.NRIC_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + PatientCommandTestUtil.NAME_DESC_AMY + PatientCommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + PatientCommandTestUtil.GENDER_DESC_AMY + PatientCommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientManager(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model.getAppointmentManager(), new UserPrefs(), model.getCalendarManager());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called on patientManagerStorage."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static class JsonPatientManagerIoExceptionThrowingStub extends JsonPatientManagerStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private JsonPatientManagerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public void savePatients(ReadOnlyListManager\u003cPatient\u003e patientManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called on AppointmentManagerStorage."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static class JsonAppointmentManagerIoExceptionThrowingStub extends JsonAppointmentManagerStorage {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private JsonAppointmentManagerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public void saveAppointments(ReadOnlyListManager\u003cAppointment\u003e appointmentManager, Path filePath)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 29,
      "thutahw": 1,
      "-": 119,
      "kaitlynng": 35
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.TabId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private TabId tabId \u003d TabId.DASHBOARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", tabId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", tabId)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                false, tabId)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", tabId)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                false, tabId)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                true, tabId)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different tabId value -\u003e return false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                TabId.SCHEDULE)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", tabId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", tabId).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", tabId).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CommandResult(\"feedback\", true, false, tabId).hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CommandResult(\"feedback\", false, true, tabId).hashCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different tabId value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        TabId.SCHEDULE).hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 30,
      "-": 43
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Convenience wrapper to {@link CommandTestUtil#assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, command.getTabId());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 34
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.general.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ExitCommand.TAB_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 13,
      "-": 13
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.general.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                HelpCommand.TAB_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 12,
      "-": 13
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.appointment.AppointmentBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Path getPatientStorageFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Path getAppointmentStorageFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setPatientStorageFilePath(Path patientStorageFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setAppointmentStorageFilePath(Path appointmentStorageFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setPatientManager(ReadOnlyListManager\u003cPatient\u003e patientManager) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setAppointmentManager(ReadOnlyListManager\u003cAppointment\u003e appointmentManager) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public ReadOnlyListManager\u003cPatient\u003e getPatientManager() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public ReadOnlyListManager\u003cAppointment\u003e getAppointmentManager() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public boolean doesAppointmentClash(Appointment appointment) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void clearAllAppointmentsOfPatient(Patient patient) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Patient getPatient(Nric nric) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public Patient getPatient(Name name) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        ArrayList\u003cPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        patients.add(AppointmentBuilder.DEFAULT_PATIENT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return FXCollections.observableArrayList(patients);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public CalendarManager getCalendarManager() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentCalendar getAppointmentCalendar() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setDay(Day day) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setMonth(Month month) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setYear(Year year) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void resetCalendar() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public Appointment findAppointmentByPredicate(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void resetAllListManagers() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 202,
      "porkeypine": 5,
      "thutahw": 5
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/AddAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.appointment.AppointmentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AddAppointmentCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void constructor_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null, null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                null, null, null, null, null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void executeAddAppointmentByIndex_appointmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Appointment validAppointment \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.ofNullable(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.ofNullable(validAppointment.getDateTime()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.ofNullable(validAppointment.getTime()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                validAppointment.getDuration(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                validAppointment.getDescription(), validAppointment.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandResult commandResult \u003d addAppointmentCommand.execute(modelStub);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_duplicateAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Appointment validAppointment \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.ofNullable(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.ofNullable(validAppointment.getDateTime()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.ofNullable(validAppointment.getTime()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                validAppointment.getDuration(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                validAppointment.getDescription(), validAppointment.getTags());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAppointment(validAppointment);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(CommandException.class, AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                addAppointmentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddAppointmentCommand firstCommand \u003d new AddAppointmentCommand(Optional.ofNullable(INDEX_FIRST_PATIENT),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.empty(), Optional.ofNullable(DATETIME1), Optional.empty(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Duration(60), new Description(VALID_DESCRIPTION_1), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddAppointmentCommand secondCommand \u003d new AddAppointmentCommand(Optional.ofNullable(INDEX_SECOND_PATIENT),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.empty(), Optional.ofNullable(DATETIME2), Optional.empty(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Duration(60), new Description(VALID_DESCRIPTION_2), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same object -\u003e returns True"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same values -\u003e returns True"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddAppointmentCommand firstCommandCopy \u003d new AddAppointmentCommand(Optional.ofNullable(INDEX_FIRST_PATIENT),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.empty(), Optional.ofNullable(DATETIME1), Optional.empty(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Duration(60), new Description(VALID_DESCRIPTION_1), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different details -\u003e returns False"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * A Model stub that contains a single appointment."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private class ModelStubWithAppointment extends ModelStub {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        private final Appointment appointment;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        ModelStubWithAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return this.appointment.isSame(appointment);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * A Model stub that always accept the appointment being added."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private class ModelStubAcceptingAppointmentAdded extends ModelStub {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return appointmentsAdded.stream().anyMatch(appointment::isSame);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            requireNonNull(appointment);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            appointmentsAdded.add(appointment);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public boolean doesAppointmentClash(Appointment appointment) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            if (appointmentsAdded.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            for (Appointment appt : appointmentsAdded) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                if (appointmentsAdded.equals(appt)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public void setYear(Year year) { }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public void setMonth(Month month) { }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public void setDay(Day day) { }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) { }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jianhandev": 151,
      "thutahw": 24
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/AppointmentCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentIdenticalPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.appointment.EditAppointmentDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AppointmentCommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_ID1 \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_ID2 \u003d \"2\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_ID3 \u003d \"3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_DATETIME_1 \u003d \"11-10-2020 12:00\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_DATETIME_2 \u003d \"13-10-2020 09:00\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_TIME_2PM \u003d \"14:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DURATION_30 \u003d \"30\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DURATION_40 \u003d \"40\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DURATION_50 \u003d \"50\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DURATION_60 \u003d \"60\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DURATION_90 \u003d \"90\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_DESCRIPTION_1 \u003d \"Wisdom teeth extraction.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_DESCRIPTION_2 \u003d \"Root canal treatment.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_TAG_1HR \u003d \"1HR\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_TAG_DRGOH \u003d \"DrGoh\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_ID1 \u003d \" \" + PREFIX_INDEX + VALID_ID1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_ID2 \u003d \" \" + PREFIX_INDEX + VALID_ID2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_ID3 \u003d \" \" + PREFIX_INDEX + VALID_ID3;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DURATION_30 \u003d \" \" + PREFIX_DURATION + VALID_DURATION_30;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DURATION_40 \u003d \" \" + PREFIX_DURATION + VALID_DURATION_40;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DURATION_50 \u003d \" \" + PREFIX_DURATION + VALID_DURATION_50;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DURATION_60 \u003d \" \" + PREFIX_DURATION + VALID_DURATION_60;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DURATION_90 \u003d \" \" + PREFIX_DURATION + VALID_DURATION_90;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DATETIME_1 \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DATETIME_2 \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_TIME_2PM \u003d \" \" + PREFIX_TIME + VALID_TIME_2PM;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DESCRIPTION_1 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_DESCRIPTION_2 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_TAG_1HR \u003d \" \" + PREFIX_TAG + VALID_TAG_1HR;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_DESC_TAG_DRGOH \u003d \" \" + PREFIX_TAG + VALID_TAG_DRGOH;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String INVALID_DESC_ZERO_ID \u003d \" \" + PREFIX_INDEX + \"0\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String INVALID_DESC_NEGATIVE_ID \u003d \" \" + PREFIX_INDEX + \"-1\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String INVALID_DESC_DATETIME \u003d \" \" + PREFIX_DATETIME + \"12-10-20200 14:00\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String INVALID_DESC_TIME \u003d \" \" + PREFIX_TIME + \"14:001\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String INVALID_DESC_DESCRIPTION \u003d \" \" + PREFIX_DESCRIPTION + \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String INVALID_DESC_TAG \u003d \" \" + PREFIX_TAG + \"1HR*\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final EditAppointmentDescriptor DESC_APPT1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final EditAppointmentDescriptor DESC_APPT2;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DESC_APPT1 \u003d new EditAppointmentDescriptorBuilder().withDateTime(VALID_DATETIME_1)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1).withTags(VALID_TAG_1HR).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DESC_APPT2 \u003d new EditAppointmentDescriptorBuilder().withDateTime(VALID_DATETIME_2)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_2).withTags(VALID_TAG_DRGOH).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * - the appointment manager, filtered appointment list and selected appointment in {@code actualModel}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * remain unchanged"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static void assertAppointmentCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AppointmentManager expectedAppointmentManager \u003d new AppointmentManager(actualModel.getAppointmentManager());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        List\u003cAppointment\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(expectedAppointmentManager, actualModel.getAppointmentManager());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the appointment at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * {@code model}\u0027s appointment book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static void showAppointmentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Appointment appointment \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.updateFilteredAppointmentList(new AppointmentIdenticalPredicate(appointment));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(1, model.getFilteredAppointmentList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 60,
      "thutahw": 56
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/DeleteAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.assertAppointmentCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.showAppointmentAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME5;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointmentIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointmentIndexes.INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.getTypicalAppointmentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalFirstNames.FIRST_NAME_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalFirstNames.FIRST_NAME_GEORGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalFirstNames.FIRST_NAME_HANSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class DeleteAppointmentCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientManager(), getTypicalAppointmentManager(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.of(INDEX_FIRST_APPOINTMENT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                appointmentToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPatientManager(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model.getAppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.deleteAppointment(appointmentToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.of(outOfBoundIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertAppointmentCommandFailure(deleteAppointmentCommand, model,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.of(INDEX_FIRST_APPOINTMENT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                appointmentToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientManager(), model.getAppointmentManager(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.deleteAppointment(appointmentToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        showNoAppointment(expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of appointment book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAppointmentManager().getReadOnlyList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.of(outOfBoundIndex));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertAppointmentCommandFailure(deleteAppointmentCommand, model,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteFirstAppointment \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.of(INDEX_FIRST_APPOINTMENT));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteSecondAppointment \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.of(INDEX_SECOND_APPOINTMENT));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same object -\u003e returns True"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(deleteFirstAppointment.equals(deleteFirstAppointment));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same values -\u003e returns True"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteFirstAppointmentCopy \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Optional.of(INDEX_FIRST_APPOINTMENT));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(deleteFirstAppointment.equals(deleteFirstAppointmentCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(deleteFirstAppointment.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(deleteFirstAppointment.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different details -\u003e returns False"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(deleteFirstAppointment.equals(deleteSecondAppointment));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_validDateTimeAndNameUnfilteredList_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment appointmentChosen \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Optional.of(appointmentChosen.getDateTime()), Optional.of(FIRST_NAME_ALICE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                appointmentChosen);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPatientManager(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                model.getAppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.deleteAppointment(appointmentChosen);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_invalidDateTimeAndNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Optional.of(DATETIME1), Optional.of(FIRST_NAME_HANSON));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertAppointmentCommandFailure(deleteAppointmentCommand, model,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_validDateTimeAndNameFilteredList_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment appointmentChosen \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Optional.of(appointmentChosen.getDateTime()), Optional.of(FIRST_NAME_ALICE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                appointmentChosen);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientManager(), model.getAppointmentManager(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.deleteAppointment(appointmentChosen);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        showNoAppointment(expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_invalidDateTimeAndNameFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of appointment book list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAppointmentManager().getReadOnlyList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Optional.of(DATETIME5), Optional.of(FIRST_NAME_GEORGE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertAppointmentCommandFailure(deleteAppointmentCommand, model,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_allValidUnfilteredList_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Optional.of(appointmentToDelete.getDateTime()), Optional.of(FIRST_NAME_ALICE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAppointmentCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                appointmentToDelete);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPatientManager(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                model.getAppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.deleteAppointment(appointmentToDelete);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_invalidDatetimeUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Optional.of(DATETIME1), Optional.of(FIRST_NAME_ALICE));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertAppointmentCommandFailure(deleteAppointmentCommand, model,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_invalidNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Optional.of(appointmentToDelete.getDateTime()), Optional.of(FIRST_NAME_HANSON));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertAppointmentCommandFailure(deleteAppointmentCommand, model,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_APPOINTMENT_NOT_FOUND);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private void showNoAppointment(Model model) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        model.updateFilteredAppointmentList(p -\u003e false);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(model.getFilteredAppointmentList().isEmpty());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 60,
      "thutahw": 179
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/EditAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.DESC_APPT1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.DESC_APPT2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DATETIME_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.assertAppointmentCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.showAppointmentAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointmentIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointmentIndexes.INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.getTypicalAppointmentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentIdenticalPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.appointment.AppointmentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.appointment.EditAppointmentDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditAppointmentCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(new PatientManager(), getTypicalAppointmentManager(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment editedAppointment \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(editedAppointment).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                editedAppointment);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new AppointmentManager(model.getAppointmentManager()), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentIdenticalPredicate(editedAppointment));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Index indexLastAppointment \u003d Index.fromOneBased(model.getFilteredAppointmentList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment lastAppointment \u003d model.getFilteredAppointmentList().get(indexLastAppointment.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        AppointmentBuilder appointmentInList \u003d new AppointmentBuilder(lastAppointment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment editedAppointment \u003d appointmentInList.withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withDateTime(VALID_DATETIME_1).withTags(VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDateTime(VALID_DATETIME_1).withTags(VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(indexLastAppointment, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                editedAppointment);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(), model.getAppointmentManager(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.setAppointment(lastAppointment, editedAppointment);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentIdenticalPredicate(editedAppointment));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new EditAppointmentDescriptor());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment editedAppointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                editedAppointment);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(), model.getAppointmentManager(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentIdenticalPredicate(editedAppointment));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment appointmentInFilteredList \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment editedAppointment \u003d new AppointmentBuilder(appointmentInFilteredList)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                editedAppointment);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(), model.getAppointmentManager(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.setAppointment(model.getFilteredAppointmentList().get(0), editedAppointment);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentIdenticalPredicate(editedAppointment));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_invalidAppointmentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertAppointmentCommandFailure(editAppointmentCommand, model,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_invalidAppointmentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of appointment book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAppointmentManager().getReadOnlyList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new EditAppointmentDescriptorBuilder().withDescription(VALID_DESCRIPTION_1).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertAppointmentCommandFailure(editAppointmentCommand, model,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        final EditAppointmentCommand standardCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, DESC_APPT1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentDescriptor copyDescriptor \u003d new EditAppointmentDescriptor(DESC_APPT1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentCommand commandWithSameValues \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same object -\u003e returns True"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different index -\u003e returns False"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_SECOND_APPOINTMENT, DESC_APPT1)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different descriptor -\u003e returns False"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, DESC_APPT2)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 76,
      "thutahw": 102
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/EditAppointmentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.DESC_APPT1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.DESC_APPT2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DATETIME_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_TAG_DRGOH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.appointment.EditAppointmentDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class EditAppointmentDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new EditAppointmentDescriptor(DESC_APPT1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(DESC_APPT1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(DESC_APPT1.equals(DESC_APPT1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(DESC_APPT1.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(DESC_APPT1.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(DESC_APPT1.equals(DESC_APPT2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        EditAppointmentDescriptor editedDescriptor \u003d new EditAppointmentDescriptorBuilder(DESC_APPT1)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_2).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(DESC_APPT1.equals(editedDescriptor));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different datetime -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        editedDescriptor \u003d new EditAppointmentDescriptorBuilder(DESC_APPT1).withDateTime(VALID_DATETIME_2).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(DESC_APPT1.equals(editedDescriptor));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        editedDescriptor \u003d new EditAppointmentDescriptorBuilder(DESC_APPT1).withTags(VALID_TAG_DRGOH).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(DESC_APPT1.equals(editedDescriptor));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "thutahw": 46
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/FindAppointmentByKeywordCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class FindAppointmentByKeywordCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thutahw": 4
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/ListAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.getTypicalAppointmentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class ListAppointmentCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model \u003d new ModelManager(new PatientManager(), getTypicalAppointmentManager(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel \u003d new ModelManager(new PatientManager(), model.getAppointmentManager(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(new ListAppointmentCommand(), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ListAppointmentCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ListAppointmentCommand listAppointmentCommand \u003d new ListAppointmentCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(listAppointmentCommand.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(listAppointmentCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same type -\u003e returns True"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(listAppointmentCommand.equals(new ListAppointmentCommand()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // this -\u003e returns True"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(listAppointmentCommand.equals(listAppointmentCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 38,
      "thutahw": 15
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/ListPatientAppointmentsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.assertPatientCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.patient.PatientHasAppointmentPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * {@code ListPatientAppointmentsCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class ListPatientAppointmentsCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientManager(), new AppointmentManager(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Patient patientChosen \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ListPatientAppointmentsCommand listPatientAppointmentsCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new ListPatientAppointmentsCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(ListPatientAppointmentsCommand.MESSAGE_SUCCESS, patientChosen);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPatientManager(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new PatientHasAppointmentPredicate(patientChosen));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(listPatientAppointmentsCommand,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ListPatientAppointmentsCommand listPatientAppointmentsCommand \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new ListPatientAppointmentsCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertPatientCommandFailure(listPatientAppointmentsCommand, model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of appointment book list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientManager().getReadOnlyList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ListPatientAppointmentsCommand listPatientAppointmentsCommand \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new ListPatientAppointmentsCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertPatientCommandFailure(listPatientAppointmentsCommand, model,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ListPatientAppointmentsCommand firstIndexCommand \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new ListPatientAppointmentsCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ListPatientAppointmentsCommand secondIndexCommand \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new ListPatientAppointmentsCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same object -\u003e returns True"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(firstIndexCommand.equals(firstIndexCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same values -\u003e returns True"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ListPatientAppointmentsCommand firstIndexCommandCopy \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new ListPatientAppointmentsCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(firstIndexCommand.equals(firstIndexCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(firstIndexCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(firstIndexCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different patient -\u003e returns False"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(firstIndexCommand.equals(secondIndexCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 8,
      "thutahw": 90
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/appointment/MarkAppointmentDoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.getTypicalAppointmentManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class MarkAppointmentDoneCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientManager(), getTypicalAppointmentManager(),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "thutahw": 14
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/calendar/CalendarCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.calendar.AppointmentCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class CalendarCommandTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int DAY_1 \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int DAY_28 \u003d 28;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int DAY_29 \u003d 29;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int DAY_30 \u003d 30;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int DAY_31 \u003d 31;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int MONTH_JAN \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int MONTH_FEB \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int MONTH_MAY \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int COMMON_YEAR \u003d 2021;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int LEAP_YEAR \u003d 2020;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * - the calendar manager, appointment calendar remain unchanged"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static void assertCalendarCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CalendarManager expectedCalendarManager \u003d new CalendarManager(actualModel.getCalendarManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AppointmentCalendar expectedAppointmentCalendar \u003d new AppointmentCalendar("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                actualModel.getAppointmentCalendar().getDay(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                actualModel.getAppointmentCalendar().getMonth(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                actualModel.getAppointmentCalendar().getYear());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(expectedCalendarManager, actualModel.getCalendarManager());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(expectedAppointmentCalendar, actualModel.getAppointmentCalendar());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 46
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/calendar/DayCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.DAY_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.DAY_29;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.assertCalendarCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.calendar.TypicalCalendar.getTypicalCalendarManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentMatchesDatePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DayCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(new PatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            getTypicalCalendarManager());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_validDay_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Day validDay \u003d new Day(DAY_1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DayCommand dayCommand \u003d new DayCommand(validDay);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model.getCalendarManager());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setDay(validDay);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date date \u003d Date.fromCalendar(model.getAppointmentCalendar());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(date));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(DayCommand.MESSAGE_SUCCESS, date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(dayCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_invalidDay_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Current date in appointment calendar is 01-02-2021 (non-leap-year)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Day invalidDay \u003d new Day(DAY_29);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DayCommand dayCommand \u003d new DayCommand(invalidDay);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCalendarCommandFailure(dayCommand, model, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 53
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/calendar/MonthCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.COMMON_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.DAY_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.DAY_31;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.MONTH_FEB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.MONTH_JAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.MONTH_MAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.calendar.TypicalCalendar.getTypicalCalendarManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentMatchesDatePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class MonthCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(new PatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            getTypicalCalendarManager());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_validMonth_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Month validMonth \u003d new Month(MONTH_MAY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        MonthCommand monthCommand \u003d new MonthCommand(validMonth);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model.getCalendarManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setDay(new Day(DAY_1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setMonth(validMonth);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date date \u003d Date.fromCalendar(model.getAppointmentCalendar());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(date));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(MonthCommand.MESSAGE_SUCCESS, date.getMonth(), date.getYear());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(monthCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_switchMonth_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setMonth(new Month(MONTH_JAN));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setYear(new Year(COMMON_YEAR));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setDay(new Day(DAY_31));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Month feb \u003d new Month(MONTH_FEB);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        MonthCommand monthCommand \u003d new MonthCommand(feb);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model.getCalendarManager());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setDay(new Day(DAY_1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setMonth(new Month(MONTH_FEB));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date date \u003d Date.fromCalendar(model.getAppointmentCalendar());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(date));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(MonthCommand.MESSAGE_SUCCESS, date.getMonth(), date.getYear());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(monthCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 72
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/calendar/YearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.COMMON_YEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.DAY_29;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.LEAP_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.MONTH_JAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.calendar.CalendarCommandTestUtil.MONTH_MAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.calendar.TypicalCalendar.getTypicalCalendarManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentMatchesDatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class YearCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(new PatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            getTypicalCalendarManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_validYear_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Year validYear \u003d new Year(COMMON_YEAR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        YearCommand yearCommand \u003d new YearCommand(validYear);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model.getCalendarManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setMonth(new Month(MONTH_JAN));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setYear(validYear);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date date \u003d Date.fromCalendar(model.getAppointmentCalendar());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(date));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(YearCommand.MESSAGE_SUCCESS, date.getMonth(), date.getYear());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(yearCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void execute_switchYear_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // initialise to a leap year"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setMonth(new Month(MONTH_MAY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setYear(new Year(LEAP_YEAR));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model.setDay(new Day(DAY_29));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // set to a common year -\u003e expect switch to first month of the year"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Year commonYear \u003d new Year(COMMON_YEAR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        YearCommand yearCommand \u003d new YearCommand(commonYear);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model.getCalendarManager());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setYear(new Year(COMMON_YEAR));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.setMonth(new Month(MONTH_JAN));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Date date \u003d Date.fromCalendar(model.getAppointmentCalendar());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(new AppointmentMatchesDatePredicate(date));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(YearCommand.MESSAGE_SUCCESS, date.getMonth(), date.getYear());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(yearCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 72
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/AddPatientCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.assertPatientCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.PatientIdenticalPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AddPatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CalendarManager());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CalendarManager());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredPatientList(new PatientIdenticalPredicate(validPatient));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(new AddPatientCommand(validPatient), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patientInList \u003d model.getPatientManager().getReadOnlyList().get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertPatientCommandFailure(new AddPatientCommand(patientInList),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model, AddPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 24,
      "-": 25,
      "kaitlynng": 5
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/AddPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AddPatientCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandResult commandResult \u003d new AddPatientCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(validPatient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(CommandException.class, AddPatientCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                addPatientCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withNric(\"S7589462A\").withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withNric(\"T6543891D\").withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same object -\u003e returns True"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same values -\u003e returns True"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different patient -\u003e returns False"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return this.patient.isSame(patient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSame);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public ReadOnlyListManager\u003cPatient\u003e getPatientManager() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return new PatientManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) { }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 23,
      "thutahw": 11,
      "-": 63,
      "kaitlynng": 25
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_emptyModelManager_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_nonEmptyModelManager_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CalendarManager());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CalendarManager());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.setPatientManager(new PatientManager());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new ClearCommand(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 19,
      "-": 17,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/DeletePatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.assertPatientCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DeletePatientCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new CalendarManager());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPatientManager(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertPatientCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CalendarManager());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        showNoPatient(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of appointment book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientManager().getReadOnlyList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertPatientCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DeletePatientCommand deleteFirstCommand \u003d new DeletePatientCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DeletePatientCommand deleteSecondCommand \u003d new DeletePatientCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DeletePatientCommand deleteFirstCommandCopy \u003d new DeletePatientCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 28,
      "thutahw": 1,
      "-": 65,
      "kaitlynng": 22
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/EditPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.assertPatientCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.PatientIdenticalPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditPatientCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new CalendarManager());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(model.getPatientManager()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredPatientList(new PatientIdenticalPredicate(editedPatient));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withTags(VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(model.getPatientManager()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredPatientList(new PatientIdenticalPredicate(editedPatient));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new EditPatientCommand.EditPatientDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(model.getPatientManager()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredPatientList(new PatientIdenticalPredicate(editedPatient));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(model.getPatientManager()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredPatientList(new PatientIdenticalPredicate(editedPatient));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_SECOND_PATIENT, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertPatientCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // edit patient in filtered list into a duplicate in appointment book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patientInList \u003d model.getPatientManager().getReadOnlyList().get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertPatientCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertPatientCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * but smaller than size of appointment book"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_invalidPatientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of appointment book list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientManager().getReadOnlyList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertPatientCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        final EditPatientCommand standardCommand \u003d new EditPatientCommand(INDEX_FIRST_PATIENT, DESC_AMY);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same values -\u003e returns True"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientDescriptor copyDescriptor \u003d new EditPatientCommand.EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(INDEX_FIRST_PATIENT, copyDescriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same object -\u003e returns True"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different index -\u003e returns False"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_SECOND_PATIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different descriptor -\u003e returns False"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_FIRST_PATIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 50,
      "thutahw": 9,
      "-": 78,
      "kaitlynng": 51
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/EditPatientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class EditPatientDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same values -\u003e returns True"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new EditPatientCommand.EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same object -\u003e returns True"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different values -\u003e returns False"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different name -\u003e returns False"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different phone -\u003e returns False"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different gender -\u003e returns False"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different remark -\u003e returns False"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 13,
      "thutahw": 10,
      "-": 32,
      "kaitlynng": 4
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/FindPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.FindPatientCommand.MESSAGE_PATIENTS_LISTED_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class FindPatientCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new CalendarManager());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPatientManager(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        FindPatientCommand findFirstCommand \u003d new FindPatientCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        FindPatientCommand findSecondCommand \u003d new FindPatientCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        FindPatientCommand findFirstCommandCopy \u003d new FindPatientCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_zeroKeywords_noPatientFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_SUCCESS, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        FindPatientCommand command \u003d new FindPatientCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute_multipleKeywords_multiplePatientsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_SUCCESS, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        FindPatientCommand command \u003d new FindPatientCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 25,
      "-": 53,
      "kaitlynng": 10
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/ListPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class ListPatientCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CalendarManager());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPatientManager(), new AppointmentManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CalendarManager());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(new ListPatientCommand(), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ListPatientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertCommandSuccess(new ListPatientCommand(), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                ListPatientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        ListPatientCommand listPatientCommand \u003d new ListPatientCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(listPatientCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different types -\u003e returns False"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(listPatientCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same type -\u003e returns True"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(listPatientCommand.equals(new ListPatientCommand()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // this -\u003e returns True"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(listPatientCommand.equals(listPatientCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 19,
      "thutahw": 15,
      "-": 25,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/PatientCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class PatientCommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"T1234567A\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S3322115E\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"98763522\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"81763222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"F\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"M\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_TAG_DIABETIC \u003d \"Diabetic\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_TAG_LTP \u003d \"LTP\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Allergic to ibuprofen.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Only free on weekends.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String TAG_DESC_LTP \u003d \" \" + PREFIX_TAG + VALID_TAG_LTP;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String TAG_DESC_DIABETIC \u003d \" \" + PREFIX_TAG + VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"F!\"; // neither \u0027F\u0027 nor \u0027M\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Diabetic*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final EditPatientCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final EditPatientCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withTags(VALID_TAG_LTP)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withRemark(VALID_REMARK_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withTags(VALID_TAG_DIABETIC, VALID_TAG_LTP)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * - the patient manager, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static void assertPatientCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager expectedPatientManager \u003d new PatientManager(actualModel.getPatientManager());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(expectedPatientManager, actualModel.getPatientManager());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * {@code model}\u0027s appointment book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        final String[] splitName \u003d patient.getName().getFullName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 52,
      "thutahw": 2,
      "-": 47,
      "kaitlynng": 17
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/commands/patient/RemarkPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.PatientIdenticalPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.TypicalPatientIndexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.TypicalPatients;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "class RemarkPatientCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final Model model \u003d new ModelManager(TypicalPatients.getTypicalPatientManager(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .get(TypicalPatientIndexes.INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(firstPatient).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        RemarkPatientCommand remarkPatientCommand \u003d new RemarkPatientCommand("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                TypicalPatientIndexes.INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new Remark(editedPatient.getRemark().getValue()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkPatientCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientManager(model.getPatientManager()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new AppointmentManager(), new UserPrefs(), new CalendarManager());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedModel.setPatient(firstPatient, editedPatient);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedModel.updateFilteredPatientList(new PatientIdenticalPredicate(editedPatient));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(remarkPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        RemarkPatientCommand remarkPatientCommandA \u003d new RemarkPatientCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                TypicalPatientIndexes.INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new Remark(REMARK_STUB));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        RemarkPatientCommand remarkPatientCommandB \u003d new RemarkPatientCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                TypicalPatientIndexes.INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                patient.getRemark());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // null -\u003e returns False"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(remarkPatientCommandA.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different type -\u003e returns False"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(remarkPatientCommandA.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // this -\u003e returns True"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertTrue(remarkPatientCommandA.equals(remarkPatientCommandA));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // remark command but with different state-\u003e returns False"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(remarkPatientCommandA.equals(remarkPatientCommandB));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // remark command with same state -\u003e returns True"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(remarkPatientCommandB.equals(new RemarkPatientCommand(TypicalPatientIndexes.INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                patient.getRemark())));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 32,
      "theyellowfellow": 13,
      "thutahw": 20,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/AppointmentBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.FindPatientCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class AppointmentBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private final AppointmentBookParser parser \u003d new AppointmentBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parseCommand_addpatient() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(new AddPatientCommand(patient), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parseCommand_deletepatient() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        DeletePatientCommand command \u003d (DeletePatientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                DeletePatientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(new DeletePatientCommand(INDEX_FIRST_PATIENT), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parseCommand_editpatient() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(EditPatientCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + \" \" + INDEX_FIRST_PATIENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(new EditPatientCommand(INDEX_FIRST_PATIENT, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parseCommand_findpatient() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        FindPatientCommand command \u003d (FindPatientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                FindPatientCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(new FindPatientCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parseCommand_listpatient() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD) instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD + \" 3\") instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 38,
      "-": 53,
      "kaitlynng": 11
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void tokenize_oneArgument() throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void tokenize_multipleArguments() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "theyellowfellow": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            Assertions.assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"123\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String VALID_GENDER \u003d \"M\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(genderWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 15,
      "thutahw": 7,
      "-": 146,
      "kaitlynng": 2
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/appointment/AddAppointmentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.INVALID_DESC_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DATETIME_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_DATETIME_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_DESCRIPTION_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_DURATION_30;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_TAG_1HR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_TAG_DRGOH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_TIME_2PM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DURATION_30;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_ID1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_TAG_1HR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_TAG_DRGOH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.ALICE_APT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.appointment.AppointmentBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class AddAppointmentCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment expectedAppointment \u003d new AppointmentBuilder(ALICE_APT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDateTime(VALID_DATETIME_1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDuration(new Duration(Integer.parseInt(VALID_DURATION_30)))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withTags(VALID_TAG_DRGOH)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // white space only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_ID1 + VALID_DESC_DATETIME_1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1 + VALID_DESC_TAG_DRGOH,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new AddAppointmentCommand(Optional.of(INDEX_FIRST_PATIENT), Optional.empty(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        Optional.of(expectedAppointment.getDateTime()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        Optional.empty(), expectedAppointment.getDuration(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        expectedAppointment.getDescription(), expectedAppointment.getTags()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        // all valid inputs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertParseSuccess(parser, VALID_ID1 + VALID_DESC_DATETIME_1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1 + VALID_DESC_TAG_DRGOH,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new AddAppointmentCommand(Optional.of(INDEX_FIRST_PATIENT), Optional.empty(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        Optional.of(expectedAppointment.getDateTime()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        Optional.empty(), expectedAppointment.getDuration(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        expectedAppointment.getDescription(), expectedAppointment.getTags()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment expectedAppointmentMultipleTags \u003d new AppointmentBuilder(ALICE_APT)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDateTime(VALID_DATETIME_1)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDuration(new Duration(Integer.parseInt(VALID_DURATION_30)))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withTags(VALID_TAG_DRGOH, VALID_TAG_1HR)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseSuccess(parser, VALID_ID1 + VALID_DESC_DATETIME_1 + VALID_DESC_DURATION_30"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        + VALID_DESC_DESCRIPTION_1 + VALID_DESC_TAG_DRGOH + VALID_DESC_TAG_1HR,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new AddAppointmentCommand(Optional.of(INDEX_FIRST_PATIENT), Optional.empty(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        Optional.of(expectedAppointmentMultipleTags.getDateTime()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        Optional.empty(), expectedAppointmentMultipleTags.getDuration(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        expectedAppointmentMultipleTags.getDescription(), expectedAppointmentMultipleTags.getTags()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment expectedAppointmentWithoutTag \u003d new AppointmentBuilder(ALICE_APT)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDateTime(VALID_DATETIME_1)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDuration(new Duration(Integer.parseInt(VALID_DURATION_30)))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withTags()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_ID1 + VALID_DESC_DATETIME_1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //                + VALID_DESC_TIME_2PM + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //        new AddAppointmentCommand(Optional.of(INDEX_FIRST_PATIENT), Optional.empty(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //                Optional.of(expectedAppointmentWithoutTag.getDateTime()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //                Optional.of(expectedAppointmentWithoutTag.getTime()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //                expectedAppointmentWithoutTag.getDuration(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //                expectedAppointmentWithoutTag.getDescription(), expectedAppointmentWithoutTag.getTags()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Appointment expectedAppointmentWithoutTime \u003d new AppointmentBuilder(ALICE_APT)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDateTime(VALID_DATETIME_1)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDuration(new Duration(Integer.parseInt(VALID_DURATION_30)))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .withTags(VALID_TAG_1HR)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // time not provided"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_ID1 + VALID_DESC_DATETIME_1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1 + VALID_DESC_TAG_1HR,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new AddAppointmentCommand(Optional.of(INDEX_FIRST_PATIENT), Optional.empty(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        Optional.of(expectedAppointmentWithoutTime.getDateTime()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        Optional.empty(), expectedAppointmentWithoutTime.getDuration(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        expectedAppointmentWithoutTime.getDescription(), expectedAppointmentWithoutTime.getTags()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // missing ID prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // assertParseFailure(parser, VALID_DESC_DATETIME_1 + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //        + VALID_DESC_TAG_DRGOH, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // missing datetime prefix and time prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // assertParseFailure(parser, VALID_ID1 + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //        + VALID_DESC_TAG_DRGOH, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // missing duration prefix"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + VALID_DESC_DATETIME_1 + VALID_DESC_DESCRIPTION_1"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                + VALID_DESC_TAG_DRGOH, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + VALID_DESC_DATETIME_1 + VALID_DESC_DURATION_30"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                + VALID_DESC_TAG_DRGOH, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + VALID_DESC_DATETIME_1"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                + VALID_DESC_TIME_2PM + VALID_DESC_DURATION_30 + INVALID_DESC_DESCRIPTION,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid datetime"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //assertParseFailure(parser, VALID_ID1 + INVALID_DESC_DATETIME"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //        + VALID_DESC_TIME_2PM + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //        DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // assertParseFailure(parser, VALID_ID1 + VALID_DESC_DATETIME_1 + INVALID_DESC_TIME"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_ID1 + VALID_DESC_DATETIME_1"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //        + VALID_DESC_TIME_2PM + VALID_DESC_DURATION_30 + VALID_DESC_DESCRIPTION_1,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "theyellowfellow": 2,
      "thutahw": 155
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/appointment/DeleteAppointmentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.INVALID_DESC_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_DATETIME_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_ID1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME6;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointmentIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalFirstNames.FIRST_NAME_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalFirstNames.VALID_FIRST_NAME_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class DeleteAppointmentCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_validArgsIndex_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseSuccess(parser, VALID_ID1, new DeleteAppointmentCommand(Optional.of(INDEX_FIRST_APPOINTMENT)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_invalidArgsIndex_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                DeleteAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_validArgsDateTimeAndName_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseSuccess(parser, VALID_DESC_DATETIME_1 + VALID_FIRST_NAME_ALICE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                new DeleteAppointmentCommand(Optional.of(DATETIME6), Optional.of(FIRST_NAME_ALICE)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_validNameInvalidDateTime_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, INVALID_DESC_DATETIME + VALID_FIRST_NAME_ALICE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    //    public void parse_validDateTimeInvalidName_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    //        assertParseFailure(parser, VALID_DESC_DATETIME_1 + INVALID_FIRST_NAME_ALICE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    //                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                DeleteAppointmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, \" \", expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // missing name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_DESC_DATETIME_1, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // missing datetime"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_FIRST_NAME_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "thutahw": 70
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/appointment/EditAppointmentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.INVALID_DESC_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.INVALID_DESC_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.INVALID_DESC_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_DATETIME_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_TAG_1HR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_DESC_TAG_DRGOH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.appointment.AppointmentCommandTestUtil.VALID_ID1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class EditAppointmentCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private EditAppointmentCommandParser parser \u003d new EditAppointmentCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_DESC_DATETIME_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1, EditAppointmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid datetime"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + INVALID_DESC_DATETIME, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + INVALID_DESC_TAG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + INVALID_DESC_DESCRIPTION, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // invalid datetime followed by valid tag"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + INVALID_DESC_DATETIME + VALID_DESC_TAG_1HR,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // valid datetime followed by invalid tag."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + VALID_DESC_DATETIME_1 + INVALID_DESC_TAG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Appointment} being edited,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + VALID_DESC_TAG_1HR + VALID_DESC_TAG_DRGOH + TAG_EMPTY,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + VALID_DESC_TAG_1HR + TAG_EMPTY + VALID_DESC_TAG_DRGOH,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + TAG_EMPTY + VALID_DESC_TAG_1HR + VALID_DESC_TAG_DRGOH,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, VALID_ID1 + INVALID_DESC_TAG + INVALID_DESC_DESCRIPTION"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                        + VALID_DESC_DATETIME_1, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thutahw": 90
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/calendar/DayCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.calendar.TypicalDays.FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.calendar.DayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DayCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private DayCommandParser parser \u003d new DayCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DayCommand(FIRST));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"\", Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // space character only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \" \", Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // non-integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"a\", Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // non-positive integer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"-1\", Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // zero"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"0\", Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // integer exceeds maximum limit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"32\", Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 42
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/calendar/MonthCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.calendar.TypicalMonths.JANUARY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.calendar.MonthCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class MonthCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private MonthCommandParser parser \u003d new MonthCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, \"1\", new MonthCommand(JANUARY));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"\", Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // space character only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \" \", Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // non-integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"a\", Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // non-positive integer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"-1\", Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // zero"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"0\", Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // integer exceeds maximum limit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"13\", Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 42
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/calendar/YearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.calendar.TypicalYears.YEAR_2020;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.calendar.YearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class YearCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private YearCommandParser parser \u003d new YearCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, \"2020\", new YearCommand(YEAR_2020));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"\", Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // space character only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \" \", Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // non-integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"a\", Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // non-positive integer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"-1\", Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // zero"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"0\", Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // year before 2000"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1999\", Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 42
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/patient/AddPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_DUPLICATE_PARAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.TAG_DESC_DIABETIC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.TAG_DESC_LTP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_TAG_LTP;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class AddPatientCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(BOB).withTags(VALID_TAG_LTP).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + GENDER_DESC_BOB + TAG_DESC_LTP + REMARK_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        // multiple names - throws command error"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + GENDER_DESC_BOB + TAG_DESC_LTP + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_PARAM, PREFIX_NAME.getType()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        // multiple phones - throws command error"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + GENDER_DESC_BOB + TAG_DESC_LTP + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_PARAM, PREFIX_PHONE.getType()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        // multiple genders - throws command error"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + GENDER_DESC_BOB + TAG_DESC_LTP + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_PARAM, PREFIX_GENDER.getType()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        // multiple remarks - throws command error"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + TAG_DESC_LTP + REMARK_DESC_AMY + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_PARAM, PREFIX_REMARK.getType()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB).withTags(VALID_TAG_LTP, VALID_TAG_DIABETIC)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + TAG_DESC_DIABETIC + TAG_DESC_LTP + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new AddPatientCommand(expectedPatientMultipleTags));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseSuccess(parser, NRIC_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        + REMARK_DESC_AMY, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + GENDER_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_GENDER_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_GENDER_BOB + VALID_REMARK_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + TAG_DESC_DIABETIC + TAG_DESC_LTP + REMARK_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + NAME_DESC_BOB + INVALID_PHONE_DESC + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + TAG_DESC_DIABETIC + TAG_DESC_LTP + REMARK_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_GENDER_DESC"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + TAG_DESC_DIABETIC + TAG_DESC_LTP + REMARK_DESC_BOB, Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_LTP + REMARK_DESC_BOB, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseFailure(parser, NRIC_DESC_BOB + INVALID_NAME_DESC + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        + GENDER_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                        + GENDER_DESC_BOB + TAG_DESC_DIABETIC + TAG_DESC_LTP + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 72,
      "theyellowfellow": 8,
      "thutahw": 2,
      "-": 50,
      "kaitlynng": 12
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/patient/DeletePatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DeletePatientCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private DeletePatientCommandParser parser \u003d new DeletePatientCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeletePatientCommand(INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 8,
      "thutahw": 1,
      "-": 22,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/patient/EditPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.TAG_DESC_DIABETIC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.TAG_DESC_LTP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_TAG_LTP;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatientIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditPatientCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\", EditPatientCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS); // invalid gender"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // invalid phone followed by valid gender"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + GENDER_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_LTP + TAG_DESC_DIABETIC + TAG_EMPTY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_LTP + TAG_EMPTY + TAG_DESC_DIABETIC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_LTP + TAG_DESC_DIABETIC,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_GENDER_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_DIABETIC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                + GENDER_DESC_AMY + NAME_DESC_AMY + TAG_DESC_LTP;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withTags(VALID_TAG_DIABETIC, VALID_TAG_LTP)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_duplicateFieldsExceptTag_parseExceptionThrown() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // all duplicate fields with the exception of tags should throw an exception"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"1\" + NAME_DESC_AMY + NAME_DESC_BOB));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"1\" + PHONE_DESC_AMY + PHONE_DESC_BOB));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"1\" + GENDER_DESC_AMY + GENDER_DESC_BOB));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // remark"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"1\" + REMARK_DESC_AMY + REMARK_DESC_BOB));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // remark"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_LTP;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTags(VALID_TAG_LTP).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 194,
      "thutahw": 3
    }
  },
  {
    "path": "src/test/java/team/baymax/logic/parser/patient/FindPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thutahw"
        },
        "content": "package team.baymax.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.FindPatientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class FindPatientCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private FindPatientCommandParser parser \u003d new FindPatientCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                FindPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        FindPatientCommand expectedFindPatientCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new FindPatientCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindPatientCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPatientCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 13,
      "thutahw": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/team/baymax/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientManagerBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(new PatientManager(), new PatientManager(modelManager.getPatientManager()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        userPrefs.setPatientStorageFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        userPrefs.setPatientStorageFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatientStorageFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatientStorageFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatientStorageFilePath_validPath_setsPatientStorageFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        modelManager.setPatientStorageFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(path, modelManager.getPatientStorageFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void hasPatient_patientNotInAppointmentBook_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void hasPatient_patientInAppointmentBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager patientManager \u003d new PatientManagerBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager differentPatientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        AppointmentManager appointmentManager \u003d new AppointmentManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CalendarManager calendarManager \u003d new CalendarManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        modelManager \u003d new ModelManager(patientManager, appointmentManager, userPrefs, new CalendarManager());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(patientManager, appointmentManager, userPrefs,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                new CalendarManager());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different patientManager -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPatientManager, appointmentManager, userPrefs,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                calendarManager)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String[] keywords \u003d ALICE.getName().getFullName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientManager, appointmentManager, userPrefs,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                calendarManager)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        differentUserPrefs.setPatientStorageFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientManager, appointmentManager, differentUserPrefs,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                calendarManager)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 24,
      "thutahw": 2,
      "-": 91,
      "kaitlynng": 25
    }
  },
  {
    "path": "src/test/java/team/baymax/model/PatientManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.logic.commands.patient.PatientCommandTestUtil.VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class PatientManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final PatientManager patientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(Collections.emptyList(), patientManager.getReadOnlyList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e patientManager.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void resetData_withValidReadOnlyListManager_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager newData \u003d getTypicalPatientManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManager.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(newData, patientManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicateElementException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_DIABETIC)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManagerStub newData \u003d new PatientManagerStub(newPatients);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e patientManager.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e patientManager.hasPatient((Patient) null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void hasPatient_patientNotInAppointmentBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(patientManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void hasPatient_patientInAppointmentBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(patientManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInAppointmentBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_DIABETIC)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(patientManager.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patientManager.getReadOnlyList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * A stub ReadOnlyListManager whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static class PatientManagerStub implements ReadOnlyListManager\u003cPatient\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManagerStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        public ObservableList\u003cPatient\u003e getReadOnlyList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 12,
      "thutahw": 3,
      "kaitlynng": 88
    }
  },
  {
    "path": "src/test/java/team/baymax/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void setPatientStorageFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPatientStorageFilePath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "thutahw": 1,
      "-": 18,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/model/appointment/AppointmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.ALICE_APT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.ALICE_APT_DUPLICATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.ALICE_APT_VAR_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.ALICE_APT_VAR_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.BOB_APT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.appointment.TypicalAppointments.CARL_APT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e BOB_APT.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void isSameAppointment() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // same dateTime and same patient -\u003e return True"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(ALICE_APT.isSame(ALICE_APT_VAR_1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // same dateTime and same Patient -\u003e returns True"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(ALICE_APT.isSame(ALICE_APT_DUPLICATE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // same dateTime but different Patient -\u003e return False"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(ALICE_APT.isSame(BOB_APT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different dateTime -\u003e return False"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(ALICE_APT.isSame(CARL_APT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        //same patient but different dateTime -\u003e  returns False"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(ALICE_APT.isSame(ALICE_APT_VAR_2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // same patient, exact same appointment -\u003e returns True"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(ALICE_APT, ALICE_APT_DUPLICATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different patient -\u003e returns False"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertNotEquals(CARL_APT, ALICE_APT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void getPatient() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same Patient"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(ALICE, ALICE_APT.getPatient());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // different Patient"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertNotEquals(ALICE, BOB_APT.getPatient());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 23,
      "porkeypine": 1,
      "thutahw": 32
    }
  },
  {
    "path": "src/test/java/team/baymax/model/appointment/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static team.baymax.testutil.TypicalDateTimes.DATETIME5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void fromString_acceptableStringFormat_dateTimeReturned() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        String acceptableStringDateTime \u003d \"12-12-2020 23:59\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertEquals(new DateTime(), DateTime.fromString(acceptableStringDateTime));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void fromString_nonAcceptableStringFormat_illegalArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        String nonAcceptableStringDateTime \u003d \"2020-12-12 23:59\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e DateTime.fromString(nonAcceptableStringDateTime));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void isValidDateTimeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"13-06-1000 00:34\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"22-02-2024 23:33\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"22-13-1999 23:33\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"22-12-1999 25:00\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"32-12-1999 23:33\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"22-12-1999 23:63\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"This isn\u0027t even a date!\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void getStorageFormat_dateTimeAsString_stringReturned() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertEquals(\"12-12-2020 23:59\", new DateTime().getStorageFormat());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void compareToOtherDateTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertTrue(0 \u003d\u003d DATETIME1.compareTo(DATETIME5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertTrue(0 \u003c DATETIME1.compareTo(DATETIME2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertTrue(0 \u003e DATETIME2.compareTo(DATETIME3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void equalsToOtherDateTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertTrue(DATETIME1.equals(DATETIME5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(DATETIME1.equals(DATETIME3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(DATETIME2.equals(DATETIME4));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(DATETIME3.equals(DATETIME5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void hashCode_defaultObject_valueAsExpected() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"12-12-2020 23:59\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\")).hashCode(), new DateTime().hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void toString_typicalDateTimes_valueAsExpected() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertEquals(\"12 Dec 2020, 11:59PM\", DATETIME1.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertEquals(\"01 Jan 2020, 08:00PM\", DATETIME2.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertEquals(\"01 Jan 2020, 08:01PM\", DATETIME3.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertEquals(\"12 Jan 2020, 10:00AM\", DATETIME4.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertEquals(\"12 Dec 2020, 11:59PM\", DATETIME5.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "theyellowfellow": 78,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/model/appointment/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        // null Description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        // blank description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty description with no spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // empty description with one space"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        assertFalse(Description.isValidDescription(\"   \")); // empty description with multiple spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "theyellowfellow": 31
    }
  },
  {
    "path": "src/test/java/team/baymax/model/appointment/DurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class DurationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Duration(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void constructor_invalidDuration_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Integer invalidDuration \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(invalidDuration));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void invalidDuration() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Maximum value is 24 * 60 (equivalent to one day)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Duration.isValidDuration(24 * 60 + 1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Minimum value is 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Duration.isValidDuration(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Negative duration"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Duration.isValidDuration(-1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 34
    }
  },
  {
    "path": "src/test/java/team/baymax/model/patient/GenderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String invalidGender \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // blank gender -\u003e invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(Gender.isValidGender(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // contains number -\u003e invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Gender.isValidGender(\"0\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Gender.isValidGender(\"M0\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // contains symbols -\u003e invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Gender.isValidGender(\"@*\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Gender.isValidGender(\"M@\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // lower case gender -\u003e valid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(Gender.isValidGender(\"f\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(Gender.isValidGender(\"m\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // upper case gender"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(Gender.isValidGender(\"F\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(Gender.isValidGender(\"M\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 20,
      "thutahw": 25
    }
  },
  {
    "path": "src/test/java/team/baymax/model/patient/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Keywords match phone, gender, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withGender(\"F\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 11,
      "-": 63,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/model/patient/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/team/baymax/model/patient/NricTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalNrics.NRIC_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalNrics.NRIC_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        String invalidNric \u003d \"S977F\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Empty -\u003e invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // First letter not neither \u0027S\u0027, \u0027T\u0027, \u0027F\u0027 nor \u0027G\u0027 -\u003e invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\"A9774487F\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Less than 7 numerical digits -\u003e invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S9487F\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S977448F\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S97744876F\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Last letter is non-alphabet -\u003e invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S977448$\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S9774488\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S977448 \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // First letter non-capitalized -\u003e valid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s9774487F\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Last letter is non-capitalized -\u003e valid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S9774487f\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // same nric"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(new Nric(NRIC_1), new Nric(NRIC_1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different nric"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertNotEquals(new Nric(NRIC_1), new Nric(NRIC_2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 60
    }
  },
  {
    "path": "src/test/java/team/baymax/model/patient/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.PatientCommandTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getTags().remove(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void isSamePatient() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(ALICE.isSame(ALICE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(ALICE.isSame(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // different phone and gender -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(PatientCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withGender(PatientCommandTestUtil.VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(PatientCommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withGender(PatientCommandTestUtil.VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withTags(PatientCommandTestUtil.VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same name, same gender, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(PatientCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .withTags(PatientCommandTestUtil.VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        // same name, same phone, same gender, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(PatientCommandTestUtil.VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(PatientCommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(PatientCommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withGender(PatientCommandTestUtil.VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(PatientCommandTestUtil.VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 26,
      "thutahw": 4,
      "-": 46,
      "kaitlynng": 12
    }
  },
  {
    "path": "src/test/java/team/baymax/model/patient/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/team/baymax/model/patient/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(new Remark(\"\"), new Remark(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(new Remark(\"@#$%\"), new Remark(\"@#$%\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertEquals(new Remark(\"A remark.\"), new Remark(\"A remark.\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        assertNotEquals(new Remark(\"R1\"), new Remark(\"R2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 24
    }
  },
  {
    "path": "src/test/java/team/baymax/model/patient/UniquePatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.PatientCommandTestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.PatientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private final UniqueList\u003cPatient\u003e uniquePatientList \u003d new UniqueList\u003cPatient\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains((Patient) null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withTags(PatientCommandTestUtil.VALID_TAG_DIABETIC)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setElement(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setElement(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniquePatientList.setElement(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.setElement(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        UniqueList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withTags(PatientCommandTestUtil.VALID_TAG_DIABETIC)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.setElement(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        UniqueList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.setElement(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        UniqueList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePatientList.setElement(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        UniqueList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setElements((UniqueList\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        UniqueList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.setElements(expectedUniquePatientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setElements((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        uniquePatientList.setElements(patientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        UniqueList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePatientList.setElements(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 11,
      "thutahw": 3,
      "-": 84,
      "kaitlynng": 72
    }
  },
  {
    "path": "src/test/java/team/baymax/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/team/baymax/model/util/datetime/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package team.baymax.model.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void isValidDateTime_nullDateTime_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void isValidDateTime_invalidDateTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"ABC123\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"01/02/2020\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"40/12/2021\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"31/13/2021\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"01-02-2020\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"14:00\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"12-12-2020 25:03\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"12-12-2020 25:03:02\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"12-12-2020 02:45 AM\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void isValidDateTime_validDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"01-02-2020 12:00\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"30-01-2021 23:59\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void from_nullDateAndTime_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DateTime.from(null, Time.fromString(\"12:00\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DateTime.from(Date.fromString(\"01-01-2020\"), null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e DateTime.from(null, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void from_validDateAndTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(DateTime.fromString(\"01-01-2020 12:00\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                DateTime.from(Date.fromString(\"01-01-2020\"), Time.fromString(\"12:00\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void plusMinutes() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(DateTime.fromString(\"01-01-2020 12:00\").plusMinutes(new Duration(45)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                DateTime.fromString(\"01-01-2020 12:45\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(DateTime.fromString(\"01-01-2020 23:00\").plusMinutes(new Duration(120)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                DateTime.fromString(\"02-01-2020 01:00\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertNotEquals(DateTime.fromString(\"01-01-2020 12:00\").plusMinutes(new Duration(12)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                DateTime.fromString(\"01-01-2020 12:00\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void isAfter() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime before \u003d DateTime.fromString(\"01-01-2020 12:00\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime middle \u003d DateTime.fromString(\"01-01-2020 18:00\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime after \u003d DateTime.fromString(\"01-02-2020 12:00\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(middle.isAfter(before));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(after.isAfter(middle));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(before.isAfter(before));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(before.isAfter(after));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void isBefore() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime before \u003d DateTime.fromString(\"01-01-2020 12:00\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime middle \u003d DateTime.fromString(\"01-01-2020 18:00\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime after \u003d DateTime.fromString(\"01-02-2020 12:00\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(before.isBefore(before));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(before.isBefore(middle));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(middle.isBefore(after));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(after.isBefore(before));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    void isEqual() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime before \u003d DateTime.fromString(\"01-01-2020 12:00\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTime after \u003d DateTime.fromString(\"01-02-2020 12:00\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(before.isEqual(before));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertTrue(before.isEqual(DateTime.fromString(\"01-01-2020 12:00\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(before.isEqual(after));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 99
    }
  },
  {
    "path": "src/test/java/team/baymax/storage/JsonAdaptedPatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.JsonAdaptedPatient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"Y0123456A\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"gender is a social construct\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(BENSON, patient.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NRIC, VALID_NAME, VALID_PHONE, VALID_GENDER, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_NAME, VALID_PHONE, VALID_GENDER,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonAdaptedPatient(VALID_NRIC, INVALID_NAME, VALID_PHONE, VALID_GENDER, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NRIC, null, VALID_PHONE, VALID_GENDER,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                Name.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonAdaptedPatient(VALID_NRIC, VALID_NAME, INVALID_PHONE, VALID_GENDER, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NRIC, VALID_NAME, null, VALID_GENDER,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonAdaptedPatient(VALID_NRIC, VALID_NAME, VALID_PHONE, INVALID_GENDER, VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NRIC, VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                VALID_TAGS, VALID_REMARK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonAdaptedPatient(VALID_NRIC, VALID_NAME, VALID_PHONE, VALID_GENDER, invalidTags, VALID_REMARK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 13,
      "theyellowfellow": 1,
      "thutahw": 1,
      "-": 54,
      "kaitlynng": 50
    }
  },
  {
    "path": "src/test/java/team/baymax/storage/JsonPatientManagerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.getTypicalPatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.JsonPatientManagerStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class JsonPatientManagerStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            \"JsonPatientManagerStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void readPatientManager_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPatientManager(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private java.util.Optional\u003cReadOnlyListManager\u003cPatient\u003e\u003e readPatientManager(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new JsonPatientManagerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                .readPatients(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertFalse(readPatientManager(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPatientManager(\"notJsonFormat.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void readPatientManager_invalidPatientManager_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPatientManager(\"invalidPatientStorage.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void readPatientManager_invalidAndValidPatientManager_throwDataConversionException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPatientManager(\"invalidAndValidPatient.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void readAndSavePatientManager_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAppointmentBook.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager original \u003d getTypicalPatientManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonPatientManagerStorage jsonPatientManagerStorage \u003d new JsonPatientManagerStorage(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        jsonPatientManagerStorage.savePatients(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ReadOnlyListManager\u003cPatient\u003e readBack \u003d jsonPatientManagerStorage.readPatients(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(original, new PatientManager(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        original.addPatient(HOON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        original.removePatient(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        jsonPatientManagerStorage.savePatients(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        readBack \u003d jsonPatientManagerStorage.readPatients(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(original, new PatientManager(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        original.addPatient(IDA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        jsonPatientManagerStorage.savePatients(original); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        readBack \u003d jsonPatientManagerStorage.readPatients().get(); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(original, new PatientManager(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void saveAPatientmanager_nullPatientManager_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePatientManager(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Saves {@code patientManager} at the specified {@code filePath}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void savePatientManager(ReadOnlyListManager\u003cPatient\u003e patientManager, String filePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            new JsonPatientManagerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    .savePatients(patientManager, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void savePatientManager_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePatientManager(new PatientManager(), null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 11,
      "thutahw": 1,
      "kaitlynng": 102
    }
  },
  {
    "path": "src/test/java/team/baymax/storage/JsonSerializablePatientManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.JsonSerializablePatientManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.TypicalPatients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class JsonSerializablePatientManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            \"JsonSerializableBaymaxTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatients.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatient.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatients.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonSerializablePatientManager dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                JsonSerializablePatientManager.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager patientManagerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager typicalPatientsPatientManager \u003d TypicalPatients.getTypicalPatientManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(patientManagerFromFile, typicalPatientsPatientManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void toModelType_invalidPatientsFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonSerializablePatientManager dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                JsonSerializablePatientManager.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonSerializablePatientManager dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                JsonSerializablePatientManager.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePatientManager.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 12,
      "-": 23,
      "kaitlynng": 14
    }
  },
  {
    "path": "src/test/java/team/baymax/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        userPrefs.setPatientStorageFilePath(Paths.get(\"data/patients.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 6,
      "-": 117,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.ReadOnlyListManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.storage.appointment.JsonAppointmentManagerStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.patient.JsonPatientManagerStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.storage.userprefs.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.testutil.patient.TypicalPatients;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonPatientManagerStorage patientManagerStorage \u003d new JsonPatientManagerStorage(getTempFilePath(\"pm\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        JsonAppointmentManagerStorage appointmentManagerStorage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                new JsonAppointmentManagerStorage(getTempFilePath(\"am\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        storageManager \u003d new StorageManager(patientManagerStorage, appointmentManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void patientManagerReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "         * {@link JsonPatientManagerStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        PatientManager original \u003d TypicalPatients.getTypicalPatientManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        storageManager.savePatients(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ReadOnlyListManager\u003cPatient\u003e retrieved \u003d storageManager.readPatients().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(original, new PatientManager(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public void getPatientManagerStorageFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertNotNull(storageManager.getPatientManagerStorageFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 10,
      "thutahw": 1,
      "-": 52,
      "kaitlynng": 11
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 4,
      "-": 44,
      "kaitlynng": 7
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/TypicalDateTimes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "package team.baymax.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "public class TypicalDateTimes {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public static final DateTime DATETIME1 \u003d DateTime.fromString(\"12-12-2020 23:59\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public static final DateTime DATETIME2 \u003d DateTime.fromString(\"01-01-2020 20:00\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public static final DateTime DATETIME3 \u003d DateTime.fromString(\"01-01-2020 20:01\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public static final DateTime DATETIME4 \u003d DateTime.fromString(\"12-01-2020 10:00\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public static final DateTime DATETIME5 \u003d DateTime.fromString(\"12-12-2020 23:59\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final DateTime DATETIME6 \u003d DateTime.fromString(\"11-10-2020 12:00\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyellowfellow": 10,
      "thutahw": 1,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/appointment/AppointmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " * A utility class to help with building Appointment objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "public class AppointmentBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public static final Patient DEFAULT_PATIENT \u003d ALICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"11-10-2020 12:45\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final int DEFAULT_DURATION \u003d 60;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Monthly checkup.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final AppointmentStatus DEFAULT_APPOINTMENT_STATUS \u003d AppointmentStatus.UPCOMING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private AppointmentStatus status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Creates an AppointmentBuilder with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public AppointmentBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        patient \u003d DEFAULT_PATIENT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        dateTime \u003d DateTime.fromString(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        duration \u003d new Duration(DEFAULT_DURATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        status \u003d DEFAULT_APPOINTMENT_STATUS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Initialises an AppointmentBuilder with the data of appointmentToCopy"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @param appointmentToCopy"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public AppointmentBuilder(Appointment appointmentToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        patient \u003d appointmentToCopy.getPatient();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        dateTime \u003d appointmentToCopy.getDateTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        duration \u003d appointmentToCopy.getDuration();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        description \u003d appointmentToCopy.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        tags \u003d appointmentToCopy.getTags();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        status \u003d appointmentToCopy.getStatus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Sets the patient of the appointment we are building to the input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @param patient"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public AppointmentBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Sets the status of the appointment we are building to the input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public AppointmentBuilder withStatus(AppointmentStatus status) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Sets the description of the appointment we are building to the input"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public AppointmentBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses the input into a {@code DateTime} and sets it as the dateTime of the appointment we are building"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public AppointmentBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.dateTime \u003d DateTime.fromString(dateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses the input into a Duration and sets it as the duration of the appointment we are building"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param duration"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public AppointmentBuilder withDuration(Duration duration) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * Parses the input into a Set of Tags and sets it as the tags of the appointment we are building"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public AppointmentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    public Appointment build() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new Appointment(patient, dateTime, duration, description, tags, status);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 18,
      "theyellowfellow": 87,
      "kaitlynng": 14
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/appointment/EditAppointmentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.appointment.EditAppointmentDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A utility class to help with building EditAppointmentDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditAppointmentDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private EditAppointmentDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor \u003d new EditAppointmentDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptorBuilder(EditAppointmentDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.descriptor \u003d new EditAppointmentDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Returns an {@code EditAppointmentDescriptor} with fields containing {@code appointment}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptorBuilder(Appointment appointment) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor \u003d new EditAppointmentDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        descriptor.setDateTime(appointment.getDateTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        descriptor.setDescription(appointment.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        descriptor.setStatus(appointment.getStatus());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        descriptor.setTags(appointment.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditAppointmentDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptorBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.setDateTime(DateTime.fromString(dateTime));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Sets the {@code Name} of the {@code EditAppointmentDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditAppointmentDescriptor}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditAppointmentDescriptor build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 63,
      "thutahw": 6
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/appointment/TypicalAppointmentIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class TypicalAppointmentIndexes {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 8
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/appointment/TypicalAppointments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.patient.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.appointment.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.AppointmentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import team.baymax.model.util.datetime.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": " * A utility class containing a list of {@code Appointment} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class TypicalAppointments {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Appointment ALICE_APT \u003d new Appointment(ALICE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            DateTime.fromString(\"11-10-2020 12:45\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Duration(60), new Description(\"desc 1\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new HashSet\u003c\u003e(), AppointmentStatus.UPCOMING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    // Exact duplicate of APT1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Appointment ALICE_APT_DUPLICATE \u003d new Appointment(ALICE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            DateTime.fromString(\"11-10-2020 12:45\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Duration(60), new Description(\"desc 1\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new HashSet\u003c\u003e(), AppointmentStatus.UPCOMING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    // Variant 1 - same patient and datetime with APT1, but other fields are different"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Appointment ALICE_APT_VAR_1 \u003d new Appointment(ALICE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            DateTime.fromString(\"11-10-2020 12:45\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Duration(60), new Description(\"desc 2\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new HashSet\u003c\u003e(), AppointmentStatus.MISSED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    // Variant 2 - same patient, but different datetime"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Appointment ALICE_APT_VAR_2 \u003d new Appointment(ALICE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            DateTime.fromString(\"12-10-2020 12:45\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Duration(60), new Description(\"desc 2\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new HashSet\u003c\u003e(), AppointmentStatus.UPCOMING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Appointment CARL_APT \u003d new Appointment(CARL,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            DateTime.fromString(\"11-11-2020 11:30\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Duration(60), new Description(\"desc 3\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new HashSet\u003c\u003e(), AppointmentStatus.UPCOMING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Appointment BOB_APT \u003d new Appointment(BOB,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            DateTime.fromString(\"11-10-2020 12:45\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new Duration(60), new Description(\"desc 4\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            new HashSet\u003c\u003e(), AppointmentStatus.UPCOMING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private TypicalAppointments() {} // prevents instantiation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns a {@code PatientManager} with all the typical patients."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static AppointmentManager getTypicalAppointmentManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        AppointmentManager appointmentManager \u003d new AppointmentManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        for (Appointment appointment : getTypicalAppointments()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            appointmentManager.addAppointment(appointment);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return appointmentManager;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static List\u003cAppointment\u003e getTypicalAppointments() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_APT, CARL_APT, BOB_APT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 57,
      "thutahw": 16,
      "kaitlynng": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/calendar/TypicalCalendar.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.CalendarManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class TypicalCalendar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static CalendarManager getTypicalCalendarManager() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        CalendarManager calendarManager \u003d new CalendarManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        // Set to 01-01-2021"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarManager.setDay(new Day(1));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarManager.setMonth(new Month(2)); // 28 days in february"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        calendarManager.setYear(new Year(2021)); // non-leap-year"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return calendarManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 19
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/calendar/TypicalDays.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Day;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class TypicalDays {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Day FIRST \u003d new Day(1);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Day SECOND \u003d new Day(2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Day THIRD \u003d new Day(3);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Day TWENTY_EIGTH \u003d new Day(28);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Day TWENTY_NINTH \u003d new Day(29);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Day THIRTIETH \u003d new Day(30);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Day THIRTY_FIRST \u003d new Day(31);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 13
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/calendar/TypicalMonths.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class TypicalMonths {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Month JANUARY \u003d new Month(1);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Month FEBRUARY \u003d new Month(2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Month MARCH \u003d new Month(3);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/calendar/TypicalYears.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.datetime.Year;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class TypicalYears {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Year YEAR_2020 \u003d new Year(2020); //leap year"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Year YEAR_2021 \u003d new Year(2021); //leap year"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Year YEAR_2033 \u003d new Year(2033); //leap year"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/patient/EditPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private EditPatientCommand.EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        descriptor \u003d new EditPatientCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public EditPatientDescriptorBuilder(EditPatientCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.descriptor \u003d new EditPatientCommand.EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        descriptor \u003d new EditPatientCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        descriptor.setNric(patient.getNric());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        descriptor.setGender(patient.getGender());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        descriptor.setTags(patient.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyellowfellow"
        },
        "content": "        descriptor.setRemark(patient.getRemark());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public EditPatientDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditPatientDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditPatientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public EditPatientDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public EditPatientCommand.EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 23,
      "theyellowfellow": 4,
      "thutahw": 3,
      "-": 46,
      "kaitlynng": 21
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/patient/PatientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Gender;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"T1203540A\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Daniel Gryffin\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"81053637\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"M\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"No allergies.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        nric \u003d patientToCopy.getNric();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        gender \u003d patientToCopy.getGender();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        remark \u003d patientToCopy.getRemark();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the {@code Nric} of the {@Code Patient} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thutahw"
        },
        "content": "     * Sets the {@code Gender} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public PatientBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thutahw"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Sets the {@code Remark} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new Patient(nric, name, phone, gender, tags, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 23,
      "thutahw": 10,
      "-": 50,
      "kaitlynng": 26
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/patient/PatientManagerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A utility class to help with building PatientManager objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " *     {@code PatientManager ab \u003d new PatientManagerBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class PatientManagerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private PatientManager patientManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientManagerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManager \u003d new PatientManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientManagerBuilder(PatientManager patientManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.patientManager \u003d patientManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds a new {@code Patient} to the {@code PatientManager} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientManagerBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        patientManager.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public PatientManager build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return patientManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "kaitlynng": 31
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/patient/PatientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jianhandev"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns an add command string for adding the {@code patient}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static String getAddCommand(Patient patient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return AddPatientCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns the part of command string for the given {@code patient}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NRIC + patient.getNric().getValue() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NAME + patient.getName().getFullName() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        sb.append(CliSyntax.PREFIX_PHONE + patient.getPhone().getValue() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        sb.append(CliSyntax.PREFIX_GENDER + patient.getGender().getValue() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        sb.append(CliSyntax.PREFIX_REMARK + patient.getRemark().getValue() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        patient.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            s -\u003e sb.append(CliSyntax.PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditPatientCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(CliSyntax.PREFIX_NRIC)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .append(nric.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(CliSyntax.PREFIX_NAME)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .append(name.getFullName()).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(CliSyntax.PREFIX_PHONE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .append(phone.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(CliSyntax.PREFIX_GENDER)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .append(gender.getValue())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thutahw"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        descriptor.getRemark().ifPresent(remark -\u003e sb.append(CliSyntax.PREFIX_REMARK)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                .append(remark.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                sb.append(CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "                tags.forEach(s -\u003e sb.append(CliSyntax.PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 64,
      "thutahw": 1
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/patient/TypicalFirstNames.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import static team.baymax.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thutahw"
        },
        "content": "import team.baymax.model.patient.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thutahw"
        },
        "content": "public class TypicalFirstNames {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final Name FIRST_NAME_ALICE \u003d new Name(\"Alice\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final Name FIRST_NAME_BENSON \u003d new Name(\"Benson\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final Name FIRST_NAME_CARL \u003d new Name(\"Carl\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final Name FIRST_NAME_DANIEL \u003d new Name(\"Daniel\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final Name FIRST_NAME_ELLE \u003d new Name(\"Elle\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final Name FIRST_NAME_FIONA \u003d new Name(\"Fiona\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final Name FIRST_NAME_GEORGE \u003d new Name(\"George\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final Name FIRST_NAME_HANSON \u003d new Name(\"Hanson\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String VALID_FIRST_NAME_ALICE \u003d \" \" + PREFIX_NAME + FIRST_NAME_ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    public static final String INVALID_FIRST_NAME_ALICE \u003d \" \" + PREFIX_NAME + new Name(\"Alice Bob\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thutahw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thutahw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "thutahw": 21
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/patient/TypicalNrics.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class TypicalNrics {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String NRIC_1 \u003d \"S9774358F\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String NRIC_2 \u003d \"S9604358G\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String NRIC_3 \u003d \"G1904358T\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String NRIC_4 \u003d \"F2944358B\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final String NRIC_5 \u003d \"T0124358A\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 9
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/patient/TypicalPatientIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "public class TypicalPatientIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 6,
      "kaitlynng": 3
    }
  },
  {
    "path": "src/test/java/team/baymax/testutil/patient/TypicalPatients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.testutil.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.logic.commands.patient.PatientCommandTestUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.modelmanagers.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"T1234567A\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"F\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(\"remark Alice\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withTags(\"tag1\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"S1234567B\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"M\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withTags(\"tag2\", \"tag3\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(\"remark Benson\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"S8546464H\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"F\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(\"remark Carl\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"S7539514E\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"M\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withTags(\"tag1\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(\"remark Daniel\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"T0012564N\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"F\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(\"remark Elle\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"S7744115E\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"F\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(\"remark Fiona\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"S0002546G\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"M\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(\"remark George\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"S0312456A\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"F\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            .withNric(\"T7894561D\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(\"F\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thutahw"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withNric(PatientCommandTestUtil.VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(PatientCommandTestUtil.VALID_NAME_AMY).withPhone(PatientCommandTestUtil.VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(PatientCommandTestUtil.VALID_GENDER_AMY).withTags(PatientCommandTestUtil.VALID_TAG_LTP)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(PatientCommandTestUtil.VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jianhandev"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withNric(PatientCommandTestUtil.VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withName(PatientCommandTestUtil.VALID_NAME_BOB).withPhone(PatientCommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withGender(PatientCommandTestUtil.VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withTags(PatientCommandTestUtil.VALID_TAG_DIABETIC, PatientCommandTestUtil.VALID_TAG_LTP)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "            .withRemark(PatientCommandTestUtil.VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a {@code PatientManager} with all the typical patients."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static PatientManager getTypicalPatientManager() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        PatientManager ab \u003d new PatientManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            ab.addPatient(patient);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 58,
      "thutahw": 1,
      "-": 1,
      "kaitlynng": 55
    }
  },
  {
    "path": "src/test/java/team/baymax/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/team/baymax/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "package team.baymax.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import static team.baymax.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "import team.baymax.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jianhandev"
        },
        "content": "\u003c?import team.baymax.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "jianhandev": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003cfx:root type\u003d\"team.baymax.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 2,
      "-": 4
    }
  }
]
