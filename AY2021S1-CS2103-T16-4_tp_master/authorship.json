[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T16-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T16-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _ScheDar_) used for managing tasks and planning schedule."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  * It is **written in OOP fashion**. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* This project builds a calendar and scheduling application that assists students in the planning of their lecture and tutorial schedules, as well as keep track of assignments and deadlines. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* The following features will be offered:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Timetabling and scheduling: List out the different classes, meetings, and events on a given day. Allows for adding of weekly recurring events, like lectures and tutorials (with potential NUSMods integration for adding of modules by module code)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Task management: Tracking of deadlines for todos, homework, project, etc., and assigning of various priority levels for the different tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Different views: A daily, weekly, and monthly view for users to get a quick overview of current and upcoming tasks and events, and allow sorting based on deadline, priority, and other criteria."
      }
    ],
    "authorContributionMap": {
      "e0316059": 10,
      "-": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Damith C. Pahapakse"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Role: Supervisor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Tishya Khanna"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Role: Supervisor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Chen Yongyan"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "\u003cimg src\u003d\"images/raymond0212.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[github](https://github.com/Raymond0212)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[portfolio](team/raymond0212.md)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Responsibilities: Front-end, Back-end, UI/UX Design"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Daniel Adipranoto"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0316059"
        },
        "content": "\u003cimg src\u003d\"images/danadi7.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[github](https://github.com/danadi7)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[portfolio](team/danadi7.md)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Responsibilities: Front-end, Back-end, UI/UX Design"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Qu Mingsi"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0316059"
        },
        "content": "\u003cimg src\u003d\"images/e0316059.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[github](http://github.com/e0316059)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0316059"
        },
        "content": "[[portfolio](team/e0316059.md)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* Responsibilities: Front-end, Back-end, UI/UX Design"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 1,
      "e0316059": 18,
      "-": 35
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* NUS CS Students"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* seeking an integrated calendar"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* seeking a task management application to plan their schedule"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Value proposition**: A calendar and scheduling application that assists students in the planning of their lecture and tutorial schedules, as well as keep track of assignments and deadlines."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| Priority | As …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "|:--------:| ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a new user                                   | have access to user guide/help file easily |learn more about the software easily when I need            |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student                                  | see the time of my lessons and meetings |      plan my day.                                             |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student                                  | see my deadlines at a glance   | prioritise my work.                                                    |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student                                  | assign priorities to my different tasks | know which ones I should do first |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student                                  | delete tasks    | remove cancelled obligations.        |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | a student with many tasks                  |search through my task using keywords   | I can find relevant tasks quickly |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* * *`  | an advanced user                           |edit the source file of todo list directly   |make changes without going through the CLI|"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "|`* *`| a NUS student | add my periodic asks at once | avoid adding them repeatedly |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | a student bad at remembering deadlines | sort my deadlines based on date | know which deadline is coming soon |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | an efficient student | type abbreviated commands | type super fast |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | a student | see the statistics of my tasks | preview the workload I will encounter in the coming weeks |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | self-consistent NUS student | add task to different task | make my plan well organised |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `* *` | a NUS student |  add class schedule by module code |  |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | an every day user | receive a warm welcome when I open the app | feel pleased |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a student likes customisation | customise some parts of UI | feel more comfortable when I use it |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a student | set a free day for my timetable by making proper arrangement | have a long weekend |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a user | get notifications for recent events and coming deadlines | will not miss them |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | an organised user | be able to add tags to my task and filter by tags | sort my tasks by topic |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a lazy user | past and add a bunch of different tasks at once through command line | add them fastly |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a student with a lot of group projects | assiciate tasks with people | keep track which group member is doing what |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | an advanced user | add dates to todos to convert them to events/deadlines | I don\u0027t have to delete and create a new task |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a user | change the description of a task | update them without deleting |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a forgetful user | have duplicate tasks deleted | avoid the same task appearing twice |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a lazy student | have acces to links to websites or file in the description | have access to related resources easily |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a careless student | undo my commands | avoid misoperation |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "| `*` | a normal user |  go through my tasks opon opening the app | be well informed |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "(For all use cases below, the **System** is the `ScheDar` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: add a ta\u0027s\u0027k**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User enters add command specifying task type"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar give a response"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: delete a task**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests to delete a specific task in the list"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar deletes the task"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: assign priority to a task**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests to assign priority a specific task in the list"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar gives priority to the task"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 4a. The task already have a priority."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 4a1. ScheDar shows a confirmation about overriding."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "         * 4a1a User confirms override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "         * ScheDar gives new priority to the task"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "           Use case ends"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "         * 4a1a User denies override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "           Use case resumes at step 1."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: mark a task as done**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests to mark a specific task in the list as done"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar marks the task"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 4a. The task is already done."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: retrieve last-deleted task**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests to retrieve a last-deleted task"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar retrieves the task"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 2a. The rubbish bin is empty."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    * 3a1. ScheDar shows an error message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Use case: search for tasks by keyword**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "1. User requests search with keyward"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2. ScheDar get matched tasks and list them"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* 2a. The keyword is not found."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "   * 3a1. ScheDar shows an warning message."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "2.  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 128,
      "-": 350
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": "ScheDar is a **desktop app for managing tasks, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ScheDar can get your task management done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "1. Download the latest `ScheDar.jar` from [here](coming soon)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your ScheDar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0316059"
        },
        "content": "   * **`list`** : Lists out the tasks currently on the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0316059"
        },
        "content": "   * **`add`**`event n/project meeting d/2020-09-16 18:00 t/important` : Adds an event named `project meeting` to ScheDar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0316059"
        },
        "content": "   * **`del`**`3` : Deletes the 3rd task shown in the current list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0316059"
        },
        "content": "   * **`find`** `cs2103 project`: Searches the current task list for the specified keyword `cs2103 project`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/project meeting`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/project meeting t/important` or as `n/project meeting`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/important`, `t/important t/online` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0316059"
        },
        "content": "  e.g. if the command specifies `n/NAME d/DATETIME`, `d/DATETIME n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Lists out all the commands accepted by ScheDar. If the command name is specified, it will specify how to use that command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Adding a task : `add`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Add a new task(todo/event/deadline) to the ScheDar program."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `add TYPE n/NAME d/DATETIME [t/TAG]…​`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        TYPE refers to the type of task to be added."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        TYPE must be one of the following: deadline, event, todo"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Adds a new task of the given type, name, date and time, and tag if any, to the task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The new task will be appended at the end of the existing task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0316059"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* `add event n/project meeting d/2020-09-16 18:00 t/important`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Assigning priority to a task : `pri`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Assigns priority to an existing task on the task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `pri LEVEL INDEX`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        LEVEL indicates the priority level"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The LEVEL must be one of the following: high, med, low"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Marks the task at the specified INDEX as the priority level indicated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index refers to the index number shown on the task list when using the list command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0316059"
        },
        "content": "* `pri high 2`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Listing all tasks : `list`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Lists out the tasks currently on the task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Listing deadlines chronologically : `dl`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Lists out deadline-type tasks currently stored on the task list, in chronological order of deadline. The earliest deadline would be at the top of the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `dl`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Marking task as done : `done`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Marks an existing task on the task list as completed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Marks as completed the task at the specified INDEX."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index refers to the index number shown on the task list when using the list command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Example: `done 2`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Deleting a task : `del`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Deletes the specified task from the current task list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `del INDEX`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Deletes the task at the specified INDEX."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index refers to the index number shown on the task list when using the list command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Example: `del 1`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Retrieve last-deleted task : `re`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Restores the most recently deleted task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `re`\t"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0316059"
        },
        "content": "### Searching for tasks by keyword : `find`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Searches the current tasklist for the specified keyword(s)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Format: `find KEYWORD1 [KEYWORD2]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Searches the entire task list for the presence of the keyword(s) on any task."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Matching tasks are shown on a list to the user."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0316059"
        },
        "content": "Example: `find cs2103 project`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0316059"
        },
        "content": "ScheDar data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ScheDar home folder."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Add** | `add TYPE n/NAME d/DATETIME [t/TAG]…​` \u003cbr\u003e e.g., `add event n/project meeting d/2020-09-16 18:00 t/important`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Deadline** | `dl`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Delete** | `del INDEX`\u003cbr\u003e e.g., `del 1`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Done** | `done INDEX`\u003cbr\u003e e.g., `done 1`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find project meeting`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Priority** | `pri LEVEL INDEX`\u003cbr\u003e e.g., `pri high 2`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0316059"
        },
        "content": "**Retrieve** | `re`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0316059": 76,
      "-": 108
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "title: ScheDar"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T16-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-T16-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "**ScheDar is a desktop application for managing your daily tasks.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* If you are interested in using ScheDar, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "* If you are interested about developing ScheDar, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.storage.JsonTaskManagerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.storage.TaskManagerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaskManager ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManagerStorage addressBookStorage \u003d new JsonTaskManagerStorage(userPrefs.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s task manager and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The data from the sample task manager will be used instead if {@code storage}\u0027s task manager is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * or an empty task manager will be used instead if errors occur when reading {@code storage}\u0027s task manager."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Optional\u003cReadOnlyTaskManager\u003e taskManagerOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ReadOnlyTaskManager initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            taskManagerOptional \u003d storage.readTaskManager();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (!taskManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TaskManager\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            initialData \u003d taskManagerOptional.orElseGet(SampleDataUtil::getSampleTaskManager);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            initialData \u003d new TaskManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            initialData \u003d new TaskManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        logger.info(\"Starting TaskManager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 21,
      "-": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the TaskManager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * @see seedu.address.model.Model#getTaskManager()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ReadOnlyTaskManager getTaskManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of taskss */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 8,
      "e0316059": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.TaskManagerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final TaskManagerParser taskManagerParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManagerParser \u003d new TaskManagerParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Command command \u003d taskManagerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            storage.saveTaskManager(model.getTaskManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return model.getTaskManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return model.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 13,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deadline-type task to the task manager. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_DATE + \"DEADLINE DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"tP Tasks \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Refactor tP Code \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"High \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_DATE + \"2020-10-01 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"cs2103 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"project\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deadline added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task manager\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final Deadline toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * Creates an DeadlineCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddDeadlineCommand(Deadline task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof AddDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddDeadlineCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 63,
      "e0316059": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a event-type task to the task manager. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_DATE + \"EVENT DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_TIME + \"EVENT TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"CS2103 party \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Coding Party! \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"High \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_DATE + \"2020-10-01 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TASK_TIME + \"19:00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"cs2103 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"project\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task manager\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates an TodoCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddEventCommand(Event task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Adds a todo to the task manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a todo-type task to the task manager. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TITLE + \"tP Tasks \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Refactor tP Code \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_PRIORITY + \"High \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"cs2103 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            + PREFIX_TAG + \"project\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New todo added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task manager\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final ToDo toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates an AddTodoCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddTodoCommand(ToDo task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof AddTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTodoCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Clears the task manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task manager has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.setTaskManager(new TaskManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            + \": Deletes the task identified by the index number shown in the list.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted task: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // TODO: Change to use universal invalid index message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"Index invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "e0316059": 10,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            + \": Marks the task identified by the index number shown in the list as done.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Mark task as done: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"Index invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Task taskToMarkDone \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        model.doneTask(taskToMarkDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, taskToMarkDone));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 4,
      "e0316059": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Task Manager as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static String commandDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public HelpCommand() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public HelpCommand(String commandWord) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        commandDescription \u003d commandWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        UiManager.setCommandDescription(commandDescription);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public String getCommandWord () {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return commandDescription;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 14,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Lists all tasks in the task manager to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 1,
      "danadi7": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Parses input arguments and creates a new AddDeadlineCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddDeadlineCommandParser implements Parser\u003cAddDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDeadlineCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * and returns a AddDeadlineCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        PREFIX_TASK_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                PREFIX_TASK_DATE, PREFIX_TAG)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskDate taskDeadline \u003d ParserUtil.parseTaskDate(argMultimap.getValue(PREFIX_TASK_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline dl \u003d new Deadline(title, description, priority, taskDeadline, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new AddDeadlineCommand(dl);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * and returns a AddEventCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        PREFIX_TASK_DATE, PREFIX_TASK_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                PREFIX_TASK_DATE, PREFIX_TASK_TIME, PREFIX_TAG)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskDate eventDate \u003d ParserUtil.parseTaskDate(argMultimap.getValue(PREFIX_TASK_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskTime eventTime \u003d ParserUtil.parseTaskTime(argMultimap.getValue(PREFIX_TASK_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event event \u003d new Event(title, description, priority, eventDate, eventTime, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTodoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Parses input arguments and creates a new TodoCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddTodoCommandParser implements Parser\u003cAddTodoCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTodoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * and returns a AddTodoCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public AddTodoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY, PREFIX_TAG)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo todo \u003d new ToDo(title, description, priority, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new AddTodoCommand(todo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_TASK_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_TASK_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 6,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "          * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": "          * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "          * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Add Edit Command. The AB3 code below would need some modifications."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 83,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "public class ExitCommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "     * Returns a ExitCommand object for execution."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    public ExitCommand parse(String args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Add Find Command. The AB3 code below would need some modifications."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "     * Returns a ListCommand object for execution."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    public ListCommand parse(String args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String dateString} into a {@code TaskDate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code dateString} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static TaskDate parseTaskDate(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedDateString \u003d dateString.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!TaskDate.isValidDate(trimmedDateString)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(TaskDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new TaskDate(trimmedDateString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static TaskTime parseTaskTime(String timeString) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String trimmedTimeString \u003d timeString.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!TaskTime.isValidTime(trimmedTimeString)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new ParseException(TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new TaskTime(trimmedTimeString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 52,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "import seedu.address.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskManagerParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case AddTodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new AddTodoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new AddDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raymond0212"
        },
        "content": "            return new ExitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raymond0212": 6,
      "danadi7": 7,
      "e0316059": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void setTaskManagerFilePath(Path taskManagerFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces task manager data with the data in {@code taskManager}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void setTaskManager(ReadOnlyTaskManager taskManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /** Returns the TaskManager */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ReadOnlyTaskManager getTaskManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task manager."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task must exist in the task manager."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code task} must not already exist in the task manager."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    void doneTask(Task task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code target} must exist in the task manager."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task manager."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 26,
      "e0316059": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents the in-memory model of the task manager data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final TaskManager taskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Initializes a ModelManager with the given taskManager and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ModelManager(ReadOnlyTaskManager taskManager, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(taskManager, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        logger.fine(\"Initializing with task manager: \" + taskManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManager \u003d new TaskManager(taskManager);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.taskManager.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this(new TaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return userPrefs.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(taskManagerFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        userPrefs.setTaskManagerFilePath(taskManagerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTaskManager(ReadOnlyTaskManager taskManager) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManager.resetData(taskManager);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager.hasTask(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.removeTask(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public void doneTask(Task task) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        taskManager.doneTask(task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.setTask(target, editedTask);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager.equals(other.taskManager)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 39,
      "e0316059": 4,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Unmodifiable view of a task manager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public interface ReadOnlyTaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskManager implements ReadOnlyTaskManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManager() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a TaskManager using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManager(ReadOnlyTaskManager toBeCopied) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /// list overwrite operations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Resets the existing data of this {@code TaskManager} with {@code newData}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void resetData(ReadOnlyTaskManager newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task manager."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Adds a task to the task manager."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task must not already exist in the task manager."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task manager."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Removes {@code key} from this {@code TaskManager}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code key} must exist in the task manager."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public void doneTask(Task key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        key.markDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof TaskManager // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 tasks.equals(((TaskManager) other).tasks));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 109,
      "e0316059": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Path taskManagerFilePath \u003d Paths.get(\"data\" , \"taskmanager.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        setTaskManagerFilePath(newUserPrefs.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManagerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(taskManagerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManagerFilePath \u003d taskManagerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 taskManagerFilePath.equals(o.taskManagerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Objects.hash(guiSettings, taskManagerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + taskManagerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASK_TYPE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final TaskDate deadlineDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructor without DoneStatus."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Deadline(Title title, Description description, Priority priority, TaskDate deadlineDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, tags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructor with DoneStatus."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Deadline(Title title, Description description, Priority priority, TaskDate deadlineDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    DoneStatus status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, status, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskDate getDeadlineDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return deadlineDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if two tasks of the same title and description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(otherTask instanceof Deadline)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(other instanceof Deadline)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline otherTask \u003d (Deadline) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDeadlineDate().equals(getDeadlineDate())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Objects.hash(title, description, priority, deadlineDate, tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getDeadlineDate())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s description in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any value, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DoneStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DoneStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"DoneStatus should be an integer.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final DoneStatusCode status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a new DoneStatus given a status code."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DoneStatus(int statusCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(statusCode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidDoneStatus(statusCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d DoneStatusCode.getDoneStatusByCode(statusCode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a new DoneStatus that defaults to NOT_DONE."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DoneStatus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d DoneStatusCode.NOT_DONE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid status code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidDoneStatus(int test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        DoneStatusCode ds \u003d DoneStatusCode.getDoneStatusByCode(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return ds !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return status.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof DoneStatus"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 status.equals(((DoneStatus) other).status));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return status.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DoneStatusCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public enum DoneStatusCode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    NOT_DONE(0, \"Not done\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    DONE(1, \"Done\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    OVERDUE(2, \"Overdue\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final Map\u003cInteger, DoneStatusCode\u003e BY_STATUS_CODE \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final int statusCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (DoneStatusCode ds : values()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            BY_STATUS_CODE.put(ds.statusCode, ds);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private DoneStatusCode(int statusCode, String label) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.statusCode \u003d statusCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static DoneStatusCode getDoneStatusByCode(int statusCode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return BY_STATUS_CODE.get(statusCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int getStatusCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return statusCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASK_TYPE \u003d \"EVENT\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final TaskDate eventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final TaskTime eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructor without DoneStatus."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Event(Title title, Description description, Priority priority,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                 TaskDate eventDate, TaskTime eventTime, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, tags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructor with DoneStatus."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Event(Title title, Description description, Priority priority,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                 TaskDate eventDate, TaskTime eventTime, DoneStatus status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, status, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskDate getEventDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskTime getEventTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if two tasks of the same title and description."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(otherTask instanceof Event)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event otherTask \u003d (Event) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getEventDate().equals(getEventDate())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getEventTime().equals(getEventTime())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Objects.hash(title, description, priority, eventDate, eventTime, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Event Date: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getEventDate())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Event Time: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getEventTime())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s priority in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            \"Priority level should be Low, Medium or High\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALIDATION_STRING_PRIORITY_LOW \u003d \"LOW\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALIDATION_STRING_PRIORITY_MEDIUM \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALIDATION_STRING_PRIORITY_HIGH \u003d \"HIGH\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final PriorityLevel level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param level A valid priority level."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Priority(String level) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(level);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidPriority(level), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        switch(level.toUpperCase()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.level \u003d PriorityLevel.LOW;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.level \u003d PriorityLevel.MEDIUM;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.level \u003d PriorityLevel.HIGH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid priority level."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return test.toUpperCase().equals(VALIDATION_STRING_PRIORITY_LOW)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || test.toUpperCase().equals(VALIDATION_STRING_PRIORITY_MEDIUM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || test.toUpperCase().equals(VALIDATION_STRING_PRIORITY_HIGH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return level.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 level.equals(((Priority) other).level)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return level.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/PriorityLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public enum PriorityLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    LOW(\"Low\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    MEDIUM(\"Medium\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    HIGH(\"High\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private PriorityLevel(String label) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task in the task manager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final Priority priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    protected DoneStatus status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Create new Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Task(Title title, Description description, Priority priority, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(title, priority, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d new DoneStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Create new Task with DoneStatus."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Task(Title title, Description description, Priority priority, DoneStatus status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(title, priority, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DoneStatus getStatus() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.status \u003d new DoneStatus(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if two tasks of the same title and description."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return otherTask.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Objects.hash(title, description, priority, tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 133,
      "e0316059": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s date in the task manager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in the format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code TaskDate}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param dateString A valid date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskDate(String dateString) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidDate(dateString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            LocalDate.parse(test, FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return date.format(FORMATTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof TaskDate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 date.equals(((TaskDate) other).date));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s time in task manager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskTime {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should be in the format HH:MM\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final LocalTime time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code TaskTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param timeString A valid time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskTime(String timeString) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidTime(timeString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.time \u003d LocalTime.parse(timeString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            LocalTime.parse(test, FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return time.format(FORMATTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof TaskTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 time.equals(((TaskTime) other).time));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a Task\u0027s title in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 17,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTitle().title, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/ToDo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASK_TYPE \u003d \"TODO\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDo(Title title, Description description, Priority priority, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, tags);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDo(Title title, Description description, Priority priority, DoneStatus status, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(title, description, priority, status, tags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The yask identity of {@code editedTask} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Contains utility methods for populating {@code TaskManager} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            new ToDo(new Title(\"cs2103 tp\"), new Description(\"Team Project\"), new Priority(\"High\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                getTagSet(\"cs2103\", \"projects\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            new Deadline(new Title(\"cs2103 peer review\"), new Description(\"Peer reviews for tp\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new Priority(\"Medium\"), new TaskDate(\"2020-10-10\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                getTagSet(\"cs2103\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            new Event(new Title(\"cs2103 lecture\"), new Description(\"Weekly lecture\"), new Priority(\"Low\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new TaskDate(\"2020-10-09\"), new TaskTime(\"12:00\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static ReadOnlyTaskManager getSampleTaskManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager sampleTm \u003d new TaskManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            sampleTm.addTask(sampleTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return sampleTm;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 26,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.DoneStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final Integer doneStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String deadlineDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String eventDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final String eventTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code JsonAdaptedTodo} with the given task details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                           @JsonProperty(\"priority\") String priority, @JsonProperty(\"doneStatus\") Integer doneStatus,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                           @JsonProperty(\"type\") String type, @JsonProperty(\"deadlineDate\") String deadlineDate,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                           @JsonProperty(\"eventDate\") String eventDate, @JsonProperty(\"eventTime\") String eventTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.doneStatus \u003d doneStatus;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority \u003d source.getPriority().level.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        doneStatus \u003d source.getStatus().status.getStatusCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (source instanceof Deadline) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            type \u003d Deadline.TASK_TYPE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            deadlineDate \u003d ((Deadline) source).getDeadlineDate().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventDate \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventTime \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        } else if (source instanceof Event) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            type \u003d Event.TASK_TYPE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            deadlineDate \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventDate \u003d ((Event) source).getEventDate().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventTime \u003d ((Event) source).getEventTime().toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            type \u003d ToDo.TASK_TYPE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            deadlineDate \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventDate \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            eventTime \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Converts this Jackson-friendly adapted todo object into the model\u0027s {@code ToDo} object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted todo."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final Description modelDesc \u003d new Description(description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (doneStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    DoneStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!DoneStatus.isValidDoneStatus(doneStatus)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(DoneStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final DoneStatus modelStatus \u003d new DoneStatus(doneStatus);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case Deadline.TASK_TYPE:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (deadlineDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        TaskDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (!TaskDate.isValidDate(deadlineDate)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(TaskDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            final TaskDate modelDlDate \u003d new TaskDate(deadlineDate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new Deadline(modelTitle, modelDesc, modelPriority, modelDlDate, modelStatus, modelTags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case Event.TASK_TYPE:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (eventDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        TaskDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (!TaskDate.isValidDate(eventDate)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(TaskDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            final TaskDate modelEventDate \u003d new TaskDate(eventDate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (eventTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        TaskTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (!TaskTime.isValidTime(eventTime)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            final TaskTime modelEventTime \u003d new TaskTime(eventTime);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new Event(modelTitle, modelDesc, modelPriority,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                    modelEventDate, modelEventTime, modelStatus, modelTags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        case ToDo.TASK_TYPE:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new ToDo(modelTitle, modelDesc, modelPriority, modelStatus, modelTags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new IllegalValueException(\"Stored Task matches no known patterns.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * An Immutable TaskManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "@JsonRootName(value \u003d \"taskmanager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "class JsonSerializableTaskManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskManager} with the given taskss."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonSerializableTaskManager(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskManager} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskManager}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonSerializableTaskManager(ReadOnlyTaskManager source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Converts this task manager into the model\u0027s {@code TaskManager} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (taskManager.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            taskManager.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class JsonTaskManagerStorage implements TaskManagerStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskManagerStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public JsonTaskManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return readTaskManager(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Similar to {@link #readTaskManager()}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Optional\u003cJsonSerializableTaskManager\u003e jsonTaskManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                filePath, JsonSerializableTaskManager.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!jsonTaskManager.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return Optional.of(jsonTaskManager.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager addressBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        saveTaskManager(addressBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Similar to {@link #saveTaskManager(ReadOnlyTaskManager)}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        requireNonNull(taskManager);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskManager(taskManager), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 19,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public interface Storage extends TaskManagerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Manages storage of TaskManager data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TaskManagerStorage taskManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TaskManagerStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public StorageManager(TaskManagerStorage taskManagerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManagerStorage \u003d taskManagerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManagerStorage.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return readTaskManager(taskManagerStorage.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManagerStorage.readTaskManager(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        saveTaskManager(taskManager, taskManagerStorage.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManagerStorage.saveTaskManager(taskManager, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 17,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Represents a storage for {@link seedu.address.model.TaskManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public interface TaskManagerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns TaskManager data as a {@link ReadOnlyTaskManager}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @see #getTaskManagerFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @param taskManager cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * @see #saveTaskManager(ReadOnlyTaskManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 13,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 7,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title.setText(task.getTitle().title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority.setText(task.getPriority().level.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        status.setText(task.getStatus().status.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 18,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static String commandDescription \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public static void setCommandDescription (String commandDesc) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        commandDescription \u003d commandDesc;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 5,
      "-": 89
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "          \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "danadi7": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "danadi7": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TODO_PROJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.storage.JsonTaskManagerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        JsonTaskManagerStorage taskManagerStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new JsonTaskManagerStorage(temporaryFolder.resolve(\"taskManager.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taskManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // Update universal invalid index message"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertCommandException(deleteCommand, DeleteCommand.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        JsonTaskManagerStorage taskManagerStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new JsonTaskManagerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTaskManager.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taskManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String addTodoCommand \u003d AddTodoCommand.COMMAND_WORD + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo expectedTodo \u003d new ToDoBuilder(TODO_PROJECT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedModel.addTask(expectedTodo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertCommandFailure(addTodoCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static class JsonTaskManagerIoExceptionThrowingStub extends JsonTaskManagerStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        private JsonTaskManagerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 31,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo validTodo \u003d new ToDoBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedModel.addTask(validTodo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertCommandSuccess(new AddTodoCommand(validTodo), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                String.format(AddTodoCommand.MESSAGE_SUCCESS, validTodo), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Task taskInList \u003d model.getTaskManager().getTaskList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // First task in list is of Event Type"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertCommandFailure(new AddEventCommand((Event) taskInList), model, AddEventCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 17,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddDeadlineCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDeadlineCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_deadlineAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline validDeadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        CommandResult commandResult \u003d new AddDeadlineCommand(validDeadline).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(String.format(AddDeadlineCommand.MESSAGE_SUCCESS, validDeadline),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(Arrays.asList(validDeadline), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline validDeadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddDeadlineCommand addDeadlineCommand \u003d new AddDeadlineCommand(validDeadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validDeadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(CommandException.class, AddDeadlineCommand.MESSAGE_DUPLICATE_TASK, ()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            -\u003e addDeadlineCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline homework \u003d new DeadlineBuilder().withTitle(\"Homework\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline project \u003d new DeadlineBuilder().withTitle(\"Project\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddDeadlineCommand addHomeworkCommand \u003d new AddDeadlineCommand(homework);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddDeadlineCommand addProjectCommand \u003d new AddDeadlineCommand(project);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(addHomeworkCommand.equals(addHomeworkCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddDeadlineCommand addHomeworkCommandCopy \u003d new AddDeadlineCommand(homework);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(addHomeworkCommand.equals(addHomeworkCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo validTodo \u003d new ToDoBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddTodoCommand addTodoCommand \u003d new AddTodoCommand(validTodo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(addTodoCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different Deadlines -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(addProjectCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void doneTask(Task task) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new TaskManager();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 205
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(CommandException.class, AddEventCommand.MESSAGE_DUPLICATE_TASK, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            -\u003e addEventCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event lecture \u003d new EventBuilder().withTitle(\"Lecture\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event tutorial \u003d new EventBuilder().withTitle(\"Tutorial\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddEventCommand addLectureCommand \u003d new AddEventCommand(lecture);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddEventCommand addTutorialCommand \u003d new AddEventCommand(tutorial);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(addLectureCommand.equals(addLectureCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddEventCommand addLectureCommandCopy \u003d new AddEventCommand(lecture);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(addLectureCommand.equals(addLectureCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo validTodo \u003d new ToDoBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddTodoCommand addTodoCommand \u003d new AddTodoCommand(validTodo);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addLectureCommand.equals(addTodoCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addLectureCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different Events -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addLectureCommand.equals(addTutorialCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void doneTask(Task task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new TaskManager();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 204
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTodoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddTodoCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_nullToDo_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTodoCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_todoAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo validTodo \u003d new ToDoBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        CommandResult commandResult \u003d new AddTodoCommand(validTodo).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(String.format(AddTodoCommand.MESSAGE_SUCCESS, validTodo), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(Arrays.asList(validTodo), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo validTodo \u003d new ToDoBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddTodoCommand addTodoCommand \u003d new AddTodoCommand(validTodo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTodo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(CommandException.class, AddTodoCommand.MESSAGE_DUPLICATE_TASK, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            -\u003e addTodoCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo eat \u003d new ToDoBuilder().withTitle(\"Eat\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo sleep \u003d new ToDoBuilder().withTitle(\"Sleep\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddTodoCommand addEatCommand \u003d new AddTodoCommand(eat);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddTodoCommand addSleepCommand \u003d new AddTodoCommand(sleep);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(addEatCommand.equals(addEatCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddTodoCommand addEatCommandCopy \u003d new AddTodoCommand(eat);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(addEatCommand.equals(addEatCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline validDeadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddDeadlineCommand addDeadlineCommand \u003d new AddDeadlineCommand(validDeadline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addEatCommand.equals(addDeadlineCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addEatCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different ToDo -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(addEatCommand.equals(addSleepCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void doneTask(Task task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return new TaskManager();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 204
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_emptyTaskManager_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void execute_nonEmptyTaskManager_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedModel.setTaskManager(new TaskManager());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_TITLE_PROJECT \u003d \"Do tP tasks\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_TITLE_LECTURE \u003d \"Attend lecture\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_DESCRIPTION_PROJECT \u003d \"Complete tP tasks for current week\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_DESCRIPTION_LECTURE \u003d \"Weekly Zoom lecture for CS2103\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_PRIORITY_PROJECT \u003d \"High\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_PRIORITY_LECTURE \u003d \"Medium\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_TASKDATE_PROJECT \u003d \"2020-12-31\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_TASKDATE_LECTURE \u003d \"2020-10-31\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_TASKTIME_PROJECT \u003d \"16:00\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_TASKTIME_LECTURE \u003d \"10:00\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_TAG_PROJECT \u003d \"project\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String VALID_TAG_LECTURE \u003d \"lecture\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TITLE_DESC_PROJECT \u003d \" \" + PREFIX_TITLE + VALID_TITLE_PROJECT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TITLE_DESC_LECTURE \u003d \" \" + PREFIX_TITLE + VALID_TITLE_LECTURE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DESCRIPTION_DESC_PROJECT \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PROJECT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DESCRIPTION_DESC_LECTURE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_LECTURE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String PRIORITY_DESC_PROJECT \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String PRIORITY_DESC_LECTURE \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LECTURE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASKDATE_DESC_PROJECT \u003d \" \" + PREFIX_TASK_DATE + VALID_TASKDATE_PROJECT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASKDATE_DESC_LECTURE \u003d \" \" + PREFIX_TASK_DATE + VALID_TASKDATE_LECTURE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASKTIME_DESC_PROJECT \u003d \" \" + PREFIX_TASK_TIME + VALID_TASKTIME_PROJECT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TASKTIME_DESC_LECTURE \u003d \" \" + PREFIX_TASK_TIME + VALID_TASKTIME_LECTURE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TAG_DESC_PROJECT \u003d \" \" + PREFIX_TAG + VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String TAG_DESC_LECTURE \u003d \" \" + PREFIX_TAG + VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Do your homework!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"Nope\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String INVALID_TASKDATE_DESC \u003d \"2020/12/31\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String INVALID_TASKTIME_DESC \u003d \"12 NOON\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"lect*\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * - the task manager, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager expectedTaskManager \u003d new TaskManager(actualModel.getTaskManager());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedTaskManager, actualModel.getTaskManager());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * {@code model}\u0027s task manager."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        final String[] splitTitle \u003d task.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model.updateFilteredTaskList(new TitleContainsKeywordsPredicate(Arrays.asList(splitTitle[0])));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 52,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Test for Delete Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 5,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddDeadlineCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_LECTURE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASKDATE_DESC_LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASKDATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_PROJECT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PROJECT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKDATE_PROJECT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_PROJECT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE_PROJECT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddDeadlineCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private AddDeadlineCommandParser parser \u003d new AddDeadlineCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline expectedDeadline \u003d new DeadlineBuilder(DEADLINE_PROJECT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_LECTURE + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_LECTURE + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_LECTURE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_LECTURE + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddDeadlineCommand(expectedDeadline));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline expectedDeadlineWithMultipleTags \u003d new DeadlineBuilder(DEADLINE_PROJECT)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .withTags(VALID_TAG_PROJECT, VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT + TAG_DESC_LECTURE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddDeadlineCommand(expectedDeadlineWithMultipleTags));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // TODO: Add tests for optional fields: parse_optionalFieldsMissing_success()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + VALID_DESCRIPTION_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing priority prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + VALID_PRIORITY_PROJECT"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + VALID_TASKDATE_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PROJECT + VALID_DESCRIPTION_PROJECT + VALID_PRIORITY_PROJECT"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + VALID_TASKDATE_PROJECT + VALID_TAG_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + INVALID_DESCRIPTION_DESC + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        //         + INVALID_TASKDATE_DESC + TAG_DESC_PROJECT, TaskDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // two invalid values, only first value reported"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_DESCRIPTION_DESC + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_LECTURE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASKDATE_DESC_LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASKDATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASKTIME_DESC_LECTURE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TASKTIME_DESC_PROJECT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_PROJECT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PROJECT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKDATE_PROJECT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKTIME_PROJECT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_PROJECT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.EVENT_PROJECT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event expectedEvent \u003d new EventBuilder(EVENT_PROJECT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_LECTURE + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_LECTURE + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_LECTURE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_LECTURE + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple times - last time accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_LECTURE + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event expectedEventWithMultipleTags \u003d new EventBuilder(EVENT_PROJECT)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .withTags(VALID_TAG_PROJECT, VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT + TAG_DESC_LECTURE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                new AddEventCommand(expectedEventWithMultipleTags));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // TODO: Add tests for optional fields: parse_optionalFieldsMissing_success()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + VALID_DESCRIPTION_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing priority prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + VALID_PRIORITY_PROJECT"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + VALID_TASKDATE_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing time prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + VALID_TASKTIME_PROJECT + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PROJECT + VALID_DESCRIPTION_PROJECT + VALID_PRIORITY_PROJECT"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + VALID_TASKDATE_PROJECT + VALID_TASKTIME_PROJECT + VALID_TAG_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + INVALID_DESCRIPTION_DESC + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // TODO: Fix Invalid DateTime Checks."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        //         + INVALID_TASKDATE_DESC + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, TaskDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        //         + TASKDATE_DESC_PROJECT + INVALID_TASKTIME_DESC + TAG_DESC_PROJECT, TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // two invalid values, only first value reported"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_DESCRIPTION_DESC + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                        + PRIORITY_DESC_PROJECT + TASKDATE_DESC_PROJECT + TASKTIME_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTodoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_LECTURE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_PROJECT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PROJECT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_PROJECT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TODO_PROJECT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class AddTodoCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private AddTodoCommandParser parser \u003d new AddTodoCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo expectedTodo \u003d new ToDoBuilder(TODO_PROJECT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TAG_DESC_PROJECT, new AddTodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_LECTURE + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TAG_DESC_PROJECT, new AddTodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_LECTURE + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TAG_DESC_PROJECT, new AddTodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_LECTURE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TAG_DESC_PROJECT, new AddTodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo expectedTodoWithMultipleTags \u003d new ToDoBuilder(TODO_PROJECT).withTags(VALID_TAG_PROJECT, VALID_TAG_LECTURE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TAG_DESC_PROJECT + TAG_DESC_LECTURE, new AddTodoCommand(expectedTodoWithMultipleTags));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // TODO: Add tests for optional fields: parse_optionalFieldsMissing_success()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + VALID_DESCRIPTION_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // missing priority prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + VALID_PRIORITY_PROJECT"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TAG_DESC_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_PROJECT + VALID_DESCRIPTION_PROJECT + VALID_PRIORITY_PROJECT"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + VALID_TAG_PROJECT, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TAG_DESC_PROJECT, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + INVALID_DESCRIPTION_DESC + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TAG_DESC_PROJECT, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TAG_DESC_PROJECT, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // two invalid values, only first value reported"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_DESCRIPTION_DESC + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + TAG_DESC_PROJECT, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_PROJECT + DESCRIPTION_DESC_PROJECT"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                + PRIORITY_DESC_PROJECT + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// TODO: Create tests for DeleteCommandParser"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "///**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "// */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 33,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"Lecture$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"Higher\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String INVALID_TASKDATE \u003d \"20-12-31\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String INVALID_TASKTIME \u003d \"00:60\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Project\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Weekly tP tasks\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"HIGH\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String VALID_TASKDATE \u003d \"2020-12-31\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static final String VALID_TASKTIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTaskDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTaskDate((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTaskDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTaskDate(INVALID_TASKDATE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTaskDate_validValueWithoutWhitespace_returnsTaskDate() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskDate expectedTaskDate \u003d new TaskDate(VALID_TASKDATE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedTaskDate, ParserUtil.parseTaskDate(VALID_TASKDATE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTaskDate_validValueWithWhitespace_returnsTrimmedTaskDate() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_TASKDATE + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskDate expectedTaskDate \u003d new TaskDate(VALID_TASKDATE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedTaskDate, ParserUtil.parseTaskDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTaskTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTaskTime((String) null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTaskTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTaskTime(INVALID_TASKTIME));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTaskTime_validValueWithoutWhitespace_returnsTaskTime() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskTime expectedTaskTime \u003d new TaskTime(VALID_TASKTIME);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedTaskTime, ParserUtil.parseTaskTime(VALID_TASKTIME));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseTaskTime_validValueWithWhitespace_returnsTrimmedTaskTime() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TASKTIME + WHITESPACE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskTime expectedTaskTime \u003d new TaskTime(VALID_TASKTIME);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedTaskTime, ParserUtil.parseTaskTime(timeWithWhitespace));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 85,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TaskManagerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.DeadlineUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.EventUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskManagerParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final TaskManagerParser parser \u003d new TaskManagerParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseCommand_addTodo() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo todo \u003d new ToDoBuilder().withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddTodoCommand command \u003d (AddTodoCommand) parser.parseCommand(ToDoUtil.getTodoCommand(todo));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(new AddTodoCommand(todo), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseCommand_addDeadline() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline deadline \u003d new DeadlineBuilder().withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddDeadlineCommand command \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                (AddDeadlineCommand) parser.parseCommand(DeadlineUtil.getDeadlineCommand(deadline));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(new AddDeadlineCommand(deadline), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseCommand_addEvent() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event event \u003d new EventBuilder().withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(EventUtil.getEventCommand(event));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(new AddEventCommand(event), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" lol\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //     assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    //     assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" lol\") instanceof  HelpCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" lol\") instanceof ListCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BAKE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.TaskManagerBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(new TaskManager(), new TaskManager(modelManager.getTaskManager()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        userPrefs.setTaskManagerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        userPrefs.setTaskManagerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTaskManagerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTaskManagerFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTaskManagerFilePath_validPath_setsTaskManagerFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        modelManager.setTaskManagerFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(path, modelManager.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void hasTask_personNotInTaskManager_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(modelManager.hasTask(BAKE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void hasPerson_personInTaskManager_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        modelManager.addTask(BAKE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(modelManager.hasTask(BAKE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager taskManager \u003d new TaskManagerBuilder().withTask(BAKE).withTask(DISH).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager differentTaskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        modelManager \u003d new ModelManager(taskManager, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(taskManager, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different taskManager -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTaskManager, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String[] keywords \u003d BAKE.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        modelManager.updateFilteredTaskList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskManager, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        differentUserPrefs.setTaskManagerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskManager, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 34,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TaskManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BAKE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(Collections.emptyList(), taskManager.getTaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskManager.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void resetData_withValidReadOnlyTaskManager_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager newData \u003d getTypicalTaskManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(newData, taskManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo editedBake \u003d new ToDoBuilder(BAKE).withPriority(VALID_PRIORITY_PROJECT).withTags(VALID_TAG_PROJECT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(BAKE, editedBake);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManagerStub newData \u003d new TaskManagerStub(newTasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskManager.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskManager.hasTask(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void hasTask_taskNotInTaskManager_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(taskManager.hasTask(BAKE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void hasTask_taskInTaskManager_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.addTask(BAKE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(taskManager.hasTask(BAKE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e taskManager.getTaskList().remove(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.addTask(BAKE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo editedBake \u003d new ToDoBuilder(BAKE).withPriority(VALID_PRIORITY_PROJECT).withTags(VALID_TAG_PROJECT)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(taskManager.hasTask(editedBake));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * A stub ReadOnlyTaskManager whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private static class TaskManagerStub implements ReadOnlyTaskManager {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManagerStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaskManagerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKDATE_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_PROJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ATTEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CRAFT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ELECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline deadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e deadline.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(CRAFT.isSameTask(CRAFT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.isSameTask(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline editedCraft \u003d new DeadlineBuilder(CRAFT).withDescription(VALID_DESCRIPTION_PROJECT).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.isSameTask(editedCraft));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedCraft \u003d new DeadlineBuilder(CRAFT).withTitle(VALID_TITLE_PROJECT).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.isSameTask(editedCraft));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same title, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedCraft \u003d new DeadlineBuilder(CRAFT).withPriority(VALID_PRIORITY_LECTURE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .withDeadlineDate(VALID_TASKDATE_PROJECT).withDoneStatus(1).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(CRAFT.isSameTask(editedCraft));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline bakeCopy \u003d new DeadlineBuilder(CRAFT).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(CRAFT.equals(bakeCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(CRAFT.equals(CRAFT));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(ATTEND));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different Deadlines -\u003e return false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(ELECT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Deadline editedCraft \u003d new DeadlineBuilder(CRAFT).withTitle(VALID_TITLE_PROJECT).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(editedCraft));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedCraft \u003d new DeadlineBuilder(CRAFT).withDescription(VALID_DESCRIPTION_PROJECT).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(editedCraft));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedCraft \u003d new DeadlineBuilder(CRAFT).withPriority(VALID_PRIORITY_LECTURE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(editedCraft));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different deadlineDate -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedCraft \u003d new DeadlineBuilder(CRAFT).withDeadlineDate(VALID_TASKDATE_PROJECT).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(editedCraft));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedCraft \u003d new DeadlineBuilder(CRAFT).withDoneStatus(1).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(editedCraft));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedCraft \u003d new DeadlineBuilder(CRAFT).withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(CRAFT.equals(editedCraft));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Weekly lecture\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Implement new methods; Write new test cases\")); // long desc"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DoneStatusCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DoneStatusCodeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void getDoneStatusByCode() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(DoneStatusCode.NOT_DONE, DoneStatusCode.getDoneStatusByCode(0));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(DoneStatusCode.DONE, DoneStatusCode.getDoneStatusByCode(1));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(DoneStatusCode.OVERDUE, DoneStatusCode.getDoneStatusByCode(2));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void getStatusCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(0, DoneStatusCode.NOT_DONE.getStatusCode());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(1, DoneStatusCode.DONE.getStatusCode());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(2, DoneStatusCode.OVERDUE.getStatusCode());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DoneStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DoneStatusTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_null_createNewDoneStatusWithNotDone() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(new DoneStatus(0).equals(new DoneStatus()));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isValidDoneStatus() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid integers"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(DoneStatus.isValidDoneStatus(4));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(DoneStatus.isValidDoneStatus(1000));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(DoneStatus.isValidDoneStatus(-1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // valid integers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(DoneStatus.isValidDoneStatus(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(DoneStatus.isValidDoneStatus(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(DoneStatus.isValidDoneStatus(2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKDATE_LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKTIME_LECTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_LECTURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ATTEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BAKE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.FISH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event deadline \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e deadline.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(ATTEND.isSameTask(ATTEND));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.isSameTask(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event editedAttend \u003d new EventBuilder(ATTEND).withDescription(VALID_DESCRIPTION_LECTURE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.isSameTask(editedAttend));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedAttend \u003d new EventBuilder(ATTEND).withTitle(VALID_TITLE_LECTURE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.isSameTask(editedAttend));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same title, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedAttend \u003d new EventBuilder(ATTEND).withPriority(VALID_PRIORITY_PROJECT)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .withEventDate(VALID_TASKDATE_LECTURE).withDoneStatus(1).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(ATTEND.isSameTask(editedAttend));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event bakeCopy \u003d new EventBuilder(ATTEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(ATTEND.equals(bakeCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(ATTEND.equals(ATTEND));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(BAKE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different Events -\u003e return false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(FISH));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event editedAttend \u003d new EventBuilder(ATTEND).withTitle(VALID_TITLE_LECTURE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(editedAttend));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedAttend \u003d new EventBuilder(ATTEND).withDescription(VALID_DESCRIPTION_LECTURE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(editedAttend));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedAttend \u003d new EventBuilder(ATTEND).withPriority(VALID_PRIORITY_PROJECT).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(editedAttend));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different eventDate -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedAttend \u003d new EventBuilder(ATTEND).withEventDate(VALID_TASKDATE_LECTURE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(editedAttend));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different eventTime -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedAttend \u003d new EventBuilder(ATTEND).withEventTime(VALID_TASKTIME_LECTURE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(editedAttend));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedAttend \u003d new EventBuilder(ATTEND).withDoneStatus(1).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(editedAttend));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedAttend \u003d new EventBuilder(ATTEND).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(ATTEND.equals(editedAttend));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_invalidPriorityLevel_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String invalidPriorityLevel \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriorityLevel));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null priority"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid priorities"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"Test\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"Higher\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"Lower\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"Random long sentence.\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // valid priorities"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"HIGH\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"MEDIUM\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"LOW\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"High\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"Medium\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"Low\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"high\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"medium\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"low\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"hIgH\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"MeDiUm\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"lOw\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TaskDate(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TaskDate.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"2020/12/31\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"2020.12.31\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"20-12-31\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"2020-31-12\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"31-12-2020\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"12-31-2020\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"31 DEC 2020\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"DEC 31 2020\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"2020 DEC 31\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"2020 31 DEC\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"2020-DEC-31\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"2020-1-31\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"2020-12-1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskDate.isValidDate(\"2020-12-31\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskDate.isValidDate(\"1970-01-01\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskDate.isValidDate(\"2020-12-01\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskDate.isValidDate(\"2020-01-31\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskTime(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TaskTime(invalidTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TaskTime.isValidTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // blank time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"12.00\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"1pm\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"12 noon\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"Noon\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"23:60\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"1:1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"12:1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(TaskTime.isValidTime(\"1:01\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // valid times"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskTime.isValidTime(\"12:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskTime.isValidTime(\"00:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskTime.isValidTime(\"23:59\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskTime.isValidTime(\"01:01\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskTime.isValidTime(\"14:01\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(TaskTime.isValidTime(\"01:14\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TitleContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                Collections.singletonList(\"Lecture\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(predicate.test(new ToDoBuilder().withTitle(\"Weekly Lecture\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"CS2103\", \"Project\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(predicate.test(new ToDoBuilder().withTitle(\"CS2103 Project\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"CS2103\", \"Project\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(predicate.test(new ToDoBuilder().withTitle(\"CS2103 Lecture\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"cS2103\", \"PrOjEcT\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(predicate.test(new ToDoBuilder().withTitle(\"CS2103 Project\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(predicate.test(new ToDoBuilder().withTitle(\"Lecture\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Lecture\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(predicate.test(new ToDoBuilder().withTitle(\"CS2103 Project\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Project\", \"random\", \"Low\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(predicate.test(new ToDoBuilder().withTitle(\"Lecture\").withDescription(\"random\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .withPriority(\"Low\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(Title.isValidTitle(\"cs2*00\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Title.isValidTitle(\"project\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Title.isValidTitle(\"cs2103\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Title.isValidTitle(\"CS2103 Lecture\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(Title.isValidTitle(\"CS2103 Software Engineering weekly lecture\")); // long titles"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/ToDoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ATTEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BAKE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DISH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.ToDoBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo todo \u003d new ToDoBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e todo.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(BAKE.isSameTask(BAKE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.isSameTask(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo editedBake \u003d new ToDoBuilder(BAKE).withDescription(VALID_DESCRIPTION_PROJECT).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.isSameTask(editedBake));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedBake \u003d new ToDoBuilder(BAKE).withTitle(VALID_TITLE_PROJECT).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.isSameTask(editedBake));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same title, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedBake \u003d new ToDoBuilder(BAKE).withPriority(VALID_PRIORITY_PROJECT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .withDoneStatus(1).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(BAKE.isSameTask(editedBake));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo bakeCopy \u003d new ToDoBuilder(BAKE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(BAKE.equals(bakeCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(BAKE.equals(BAKE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.equals(ATTEND));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different ToDos -\u003e return false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.equals(DISH));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ToDo editedBake \u003d new ToDoBuilder(BAKE).withTitle(VALID_TITLE_PROJECT).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.equals(editedBake));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedBake \u003d new ToDoBuilder(BAKE).withDescription(VALID_DESCRIPTION_PROJECT).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.equals(editedBake));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedBake \u003d new ToDoBuilder(BAKE).withPriority(VALID_PRIORITY_PROJECT).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.equals(editedBake));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedBake \u003d new ToDoBuilder(BAKE).withDoneStatus(1).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.equals(editedBake));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        editedBake \u003d new ToDoBuilder(BAKE).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(BAKE.equals(editedBake));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ATTEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.BAKE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertFalse(uniqueTaskList.contains(ATTEND));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(uniqueTaskList.contains(ATTEND));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event editedAttend \u003d new EventBuilder(ATTEND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .withPriority(VALID_PRIORITY_PROJECT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAttend));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(ATTEND));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, ATTEND));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(ATTEND, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(ATTEND, ATTEND));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.setTask(ATTEND, ATTEND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedUniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        Event editedAttend \u003d new EventBuilder(ATTEND)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PROJECT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.setTask(ATTEND, editedAttend);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedUniqueTaskList.add(editedAttend);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.setTask(ATTEND, BAKE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedUniqueTaskList.add(BAKE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(BAKE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(DuplicateTaskException.class, ()-\u003e uniqueTaskList.setTask(ATTEND, BAKE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, ()-\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(ATTEND));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.remove(ATTEND);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedUniqueTaskList.add(BAKE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.add(ATTEND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(BAKE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        expectedUniqueTaskList.add(BAKE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ATTEND, ATTEND);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        userPrefs.setTaskManagerFilePath(Paths.get(\"taskmanager.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        JsonTaskManagerStorage taskManagerStorage \u003d new JsonTaskManagerStorage(getTempFilePath(\"tm\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        storageManager \u003d new StorageManager(taskManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void taskManagerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager original \u003d getTypicalTaskManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        storageManager.saveTaskManager(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        ReadOnlyTaskManager retrieved \u003d storageManager.readTaskManager().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertEquals(original, new TaskManager(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public void getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        assertNotNull(storageManager.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 12,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeadlineBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.DoneStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DeadlineBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Do tP tasks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Complete tP tasks for week 10.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"High\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_DEADLINE_DATE \u003d \"2020-12-31\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private DoneStatus status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TaskDate deadlineDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a {@code DeadlineBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DeadlineBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        status \u003d new DoneStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        deadlineDate \u003d new TaskDate(DEFAULT_DEADLINE_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Initializes the DeadlineBuilder with the data of {@code todoToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DeadlineBuilder(Deadline dlToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title \u003d dlToCopy.getTitle();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description \u003d dlToCopy.getDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority \u003d dlToCopy.getPriority();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        status \u003d dlToCopy.getStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        deadlineDate \u003d dlToCopy.getDeadlineDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(dlToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Title} of the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DeadlineBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Description} of the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DeadlineBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Priority} of the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DeadlineBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code DoneStatus} of the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DeadlineBuilder withDoneStatus(int statusCode) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d new DoneStatus(statusCode);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code deadlineDate} of the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DeadlineBuilder withDeadlineDate(String deadlineDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.deadlineDate \u003d new TaskDate(deadlineDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Deadline} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public DeadlineBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Deadline build() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Deadline(title, description, priority, deadlineDate, status, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeadlineUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A utility class for Deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class DeadlineUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns an add command string for adding the {@code deadline}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static String getDeadlineCommand(Deadline deadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return AddDeadlineCommand.COMMAND_WORD + \" \" + getDeadlineDetails(deadline);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the part of command string for the given {@code deadline}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static String getDeadlineDetails(Deadline deadline) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_TITLE + deadline.getTitle().title + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + deadline.getDescription().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_PRIORITY + deadline.getPriority().level.toString() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_TASK_DATE + deadline.getDeadlineDate().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        deadline.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.DoneStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Do tP tasks\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Complete tP tasks for week 10.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"High\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_EVENT_DATE \u003d \"2020-12-31\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_EVENT_TIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private DoneStatus status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TaskDate eventDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TaskTime eventTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a {@code seedu.address.model.task.EventBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        status \u003d new DoneStatus();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        eventDate \u003d new TaskDate(DEFAULT_EVENT_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        eventTime \u003d new TaskTime(DEFAULT_EVENT_TIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code todoToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title \u003d eventToCopy.getTitle();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority \u003d eventToCopy.getPriority();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        status \u003d eventToCopy.getStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        eventDate \u003d eventToCopy.getEventDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        eventTime \u003d eventToCopy.getEventTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Title} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Priority} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code DoneStatus} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder withDoneStatus(int statusCode) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d new DoneStatus(statusCode);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code eventDate} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder withEventDate(String eventDate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventDate \u003d new TaskDate(eventDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code eventTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder withEventTime(String eventTime) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.eventTime \u003d new TaskTime(eventTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public EventBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new Event(title, description, priority, eventDate, eventTime, status, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A utility class for Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class EventUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns an add command string for adding the {@code event}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static String getEventCommand(Event event) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the part of command string for the given {@code event}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static String getEventDetails(Event event) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_TITLE + event.getTitle().title + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + event.getDescription().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_PRIORITY + event.getPriority().level.toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_TASK_DATE + event.getEventDate().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_TASK_TIME + event.getEventTime().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        event.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskManagerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A utility class to help with building TaskManager objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": " *     {@code TaskManager tm \u003d new TaskManagerBuilder().withTask(\"Lecture\", \"Project\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TaskManagerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManagerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManagerBuilder(TaskManager taskManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.taskManager \u003d taskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Adds a new {@code Task} to the {@code TaskManager} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManagerBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public TaskManager build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ToDoBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.DoneStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A utility class to help with building ToDo objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class ToDoBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Do tP tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Complete tP tasks for week 10.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"High\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private DoneStatus status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Creates a {@code ToDoBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDoBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        status \u003d new DoneStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Initializes the ToDoBuilder with the data of {@code todoToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDoBuilder(ToDo todoToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        title \u003d todoToCopy.getTitle();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        description \u003d todoToCopy.getDescription();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        priority \u003d todoToCopy.getPriority();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        status \u003d todoToCopy.getStatus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(todoToCopy.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Title} of the {@code ToDo} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDoBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Description} of the {@code ToDo} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDoBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code Priority} of the {@code ToDo} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDoBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Sets the {@code DoneStatus} of the {@code ToDo} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDoBuilder withDoneStatus(int statusCode) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.status \u003d new DoneStatus(statusCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code ToDo} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDoBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public ToDo build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new ToDo(title, description, priority, status, tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ToDoUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A utility class for ToDo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class ToDoUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns an add command string for adding the {@code ToDo}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static String getTodoCommand(ToDo toDo) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return AddTodoCommand.COMMAND_WORD + \" \" + getTodoDetails(toDo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns the part of command string for the given {@code ToDo}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static String getTodoDetails(ToDo toDo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_TITLE + toDo.getTitle().title + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + toDo.getDescription().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        sb.append(PREFIX_PRIORITY + toDo.getPriority().toString() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        toDo.getTags().stream().forEach("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danadi7"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LECTURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PROJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKDATE_LECTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKDATE_PROJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKTIME_LECTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASKTIME_PROJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_LECTURE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_PROJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danadi7"
        },
        "content": "import seedu.address.model.task.ToDo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danadi7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danadi7"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danadi7"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danadi7"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Event ATTEND \u003d new EventBuilder().withTitle(\"Attend CS2103 Lecture\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Weekly Friday CS2103 Lecture\").withPriority(\"Medium\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withEventDate(\"2020-10-23\").withEventTime(\"12:00\").withTags(\"lecture\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final ToDo BAKE \u003d new ToDoBuilder().withTitle(\"Bake cookies\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Bake cookies for party\").withPriority(\"Low\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withTags(\"party\", \"baking\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Deadline CRAFT \u003d new DeadlineBuilder().withTitle(\"Craft model plane\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Model plane for GET project\").withPriority(\"High\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDeadlineDate(\"2020-11-30\").withTags(\"project\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final ToDo DISH \u003d new ToDoBuilder().withTitle(\"Wash dishes\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Wash dishes after party\").withPriority(\"Low\").withTags(\"party\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Deadline ELECT \u003d new DeadlineBuilder().withTitle(\"Elect new committee members\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Interview and choose new committee for CCA\").withPriority(\"High\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDeadlineDate(\"2020-12-31\").withDoneStatus(1).withTags(\"cca\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Event FISH \u003d new EventBuilder().withTitle(\"Go fishing\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Weekly fishing session with dad\").withPriority(\"Low\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withEventDate(\"2020-11-01\").withEventTime(\"17:00\").withTags(\"fishing\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Event GAME \u003d new EventBuilder().withTitle(\"Play CS GO\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Play CS GO with bro\").withPriority(\"Low\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withEventDate(\"2020-11-01\").withEventTime(\"22:00\").withTags(\"gaming\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // Manually Added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Event HIKE \u003d new EventBuilder().withTitle(\"Hiking with John\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Explore Pulau Ubin on foot\").withPriority(\"High\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withEventDate(\"2020-10-24\").withEventTime(\"08:00\").withTags(\"hiking\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Deadline IMPROVE \u003d new DeadlineBuilder().withTitle(\"Improve CS2103 iP\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(\"Clean up iP for use in portfolio\").withPriority(\"High\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDeadlineDate(\"2020-10-25\").withDoneStatus(1).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final ToDo TODO_PROJECT \u003d new ToDoBuilder().withTitle(VALID_TITLE_PROJECT)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_PROJECT).withPriority(VALID_PRIORITY_PROJECT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Deadline DEADLINE_PROJECT \u003d new DeadlineBuilder().withTitle(VALID_TITLE_PROJECT)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_PROJECT).withPriority(VALID_PRIORITY_PROJECT)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDeadlineDate(VALID_TASKDATE_PROJECT)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Event EVENT_PROJECT \u003d new EventBuilder().withTitle(VALID_TITLE_PROJECT)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_PROJECT).withPriority(VALID_PRIORITY_PROJECT)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withEventDate(VALID_TASKDATE_PROJECT).withEventTime(VALID_TASKTIME_PROJECT)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final ToDo TODO_LECTURE \u003d new ToDoBuilder().withTitle(VALID_TITLE_LECTURE)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_LECTURE).withPriority(VALID_PRIORITY_LECTURE)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Deadline DEADLINE_LECTURE \u003d new DeadlineBuilder().withTitle(VALID_TITLE_LECTURE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_LECTURE).withPriority(VALID_PRIORITY_LECTURE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDeadlineDate(VALID_TASKDATE_LECTURE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static final Event EVENT_LECTURE \u003d new EventBuilder().withTitle(VALID_TITLE_LECTURE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_LECTURE).withPriority(VALID_PRIORITY_LECTURE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withEventDate(VALID_TASKDATE_LECTURE).withEventTime(VALID_TASKTIME_LECTURE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            .withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     * Returns a {@code TaskManager} with all the typical tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danadi7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static TaskManager getTypicalTaskManager() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        TaskManager tm \u003d new TaskManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danadi7"
        },
        "content": "            tm.addTask(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return tm;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danadi7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danadi7"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ATTEND, BAKE, CRAFT, DISH, ELECT, FISH, GAME));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danadi7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danadi7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danadi7": 101
    }
  }
]
